<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>信息仓库</title>
      <link href="/2023/06/05/News-about-china/"/>
      <url>/2023/06/05/News-about-china/</url>
      
        <content type="html"><![CDATA[<h2 id="1、商业领域的知名网站"><a href="#1、商业领域的知名网站" class="headerlink" title="1、商业领域的知名网站"></a>1、商业领域的知名网站</h2><p>1、财经网：财经网是一个专注于财经和商业领域的综合性门户网站，提供国内外的商业新闻、金融资讯、股市行情等。网站链接：<a href="http://www.caijing.com.cn/">http://www.caijing.com.cn/</a></p><p>2、第一财经：第一财经是中国领先的财经门户网站，覆盖金融、投资、商业等领域的新闻报道、分析和评论。网站链接：<a href="http://www.yicai.com/">http://www.yicai.com/</a></p><p>3、中国经济网：中国经济网是一个专注于经济领域的新闻门户网站，提供全面的经济新闻报道、数据分析和行业研究。网站链接：<a href="http://www.ce.cn/">http://www.ce.cn/</a></p><p>4、投资界：投资界是中国领先的商业和投资媒体，提供投资、创业、商业资讯等方面的报道和分析。网站链接：<a href="https://www.pedaily.cn/">https://www.pedaily.cn/</a></p><p>5、商务部网站：商务部网站是中国政府商务部的官方网站，提供国内外贸易、投资、经济政策等方面的资讯和发布。网站链接：<a href="http://www.mofcom.gov.cn/">http://www.mofcom.gov.cn/</a></p><p>6、中华网财经：提供国内外财经新闻、股市行情、财经评论等。网站链接：<a href="http://finance.china.com.cn/">http://finance.china.com.cn/</a></p><p>7、中国证券网：提供股票、基金、债券等金融市场的行情数据、资讯和投资分析。网站链接：<a href="http://www.cnstock.com/">http://www.cnstock.com/</a></p><p>8、和讯网：提供综合性的财经新闻、股票、基金、理财等方面的信息和分析。网站链接：<a href="http://www.hexun.com/">http://www.hexun.com/</a></p><p>9、东方财富网：提供股票、基金、期货等金融市场数据、资讯和投资分析工具。网站链接：<a href="http://www.eastmoney.com/">http://www.eastmoney.com/</a></p><p>10、中国商业新闻网：关注商业领域的新闻、报道和评论。网站链接：<a href="http://www.cb.com.cn/">http://www.cb.com.cn/</a></p><p>11、财新网：中国著名经济新闻网站，报道商业、金融和经济领域的新闻、评论和分析。网站链接：<a href="http://www.caixin.com/">http://www.caixin.com/</a></p><p>12、经济观察网：专注于财经和商业新闻的网站，提供深入的报道、评论和分析。网站链接：<a href="http://www.eeo.com.cn/">http://www.eeo.com.cn/</a></p><p>13、21世纪经济报道：以商业和经济新闻为主题的媒体，报道中国及国际经济的动态和趋势。网站链接：<a href="http://www.21jingji.com/">http://www.21jingji.com/</a></p><h2 id="2、科技与创新领域的知名网站："><a href="#2、科技与创新领域的知名网站：" class="headerlink" title="2、科技与创新领域的知名网站："></a>2、科技与创新领域的知名网站：</h2><p>1、钛媒体：钛媒体是中国领先的科技创新媒体，提供全面的科技、创业和创新资讯、报道和深度分析。网站链接：<a href="https://www.tmtpost.com/">https://www.tmtpost.com/</a></p><p>2、36氪：36氪是一个专注于科技创新和创业的新闻门户网站，提供科技行业的新闻报道、创业公司的报道和分析等。网站链接：<a href="https://36kr.com/">https://36kr.com/</a></p><p>3、虎嗅网：虎嗅网是一个关注创新和创业的科技媒体，报道和分析科技创新、创业公司和商业领域的趋势。网站链接：<a href="https://www.huxiu.com/">https://www.huxiu.com/</a></p><p>4、雷锋网：雷锋网是一个综合性科技媒体，报道科技新闻、创新产品和科技趋势，并提供对科技创新的深入分析。网站链接：<a href="https://www.leiphone.com/">https://www.leiphone.com/</a></p><p>5、爱范儿：爱范儿是一个关注科技、创新和互联网文化的媒体，提供科技新闻、产品评测和科技文化报道。网站链接：<a href="https://www.ifanr.com/">https://www.ifanr.com/</a></p><p>6、科技网：提供科技新闻、科学研究进展、科技政策等方面的报道和资讯。网站链接：<a href="http://www.stdaily.com/">http://www.stdaily.com/</a></p><p>7、博客园：汇集了大量科技博客和技术专栏，涵盖了软件开发、数据科学、人工智能等多个领域。网站链接：<a href="https://www.cnblogs.com/">https://www.cnblogs.com/</a></p><p>8、科学网：关注科学研究和学术领域的新闻、论文、科研进展等。网站链接：<a href="http://www.sciencenet.cn/">http://www.sciencenet.cn/</a></p><p>9、极客公园：专注于科技、互联网和创新的新闻、报道和分析。网站链接：<a href="http://www.geekpark.net/">http://www.geekpark.net/</a></p><p>10、创业邦：关注创业和创新领域的新闻、创业项目介绍、创业经验分享等。网站链接：<a href="http://www.cyzone.cn/">http://www.cyzone.cn/</a></p><h2 id="3、企业发展的知名网站："><a href="#3、企业发展的知名网站：" class="headerlink" title="3、企业发展的知名网站："></a>3、企业发展的知名网站：</h2><p>1、企业家网：企业家网是一个专注于企业管理、创业和领导力的门户网站，提供企业管理、创业经验、行业分析等方面的文章和资源。网站链接：<a href="http://www.iceo.com.cn/">http://www.iceo.com.cn/</a></p><p>2、华尔街见闻：华尔街见闻是一个财经资讯平台，关注国内外经济、金融、企业等方面的新闻报道和数据分析。网站链接：<a href="https://wallstreetcn.com/">https://wallstreetcn.com/</a></p><p>3、企业家日报：企业家日报是一家专注于商业新闻和企业发展的数字媒体，提供企业新闻、经济报道和行业深度分析。网站链接：<a href="http://www.entrepreneur.com.cn/">http://www.entrepreneur.com.cn/</a></p><p>4、天下网：天下网是天下杂志的官方网站，提供商业、经济、管理等领域的深度报道和分析。网站链接：<a href="http://www.cbnweek.com/">http://www.cbnweek.com/</a></p><p>5、商业内参：商业内参是一个专注于商业新闻和市场分析的媒体平台，提供商业新闻报道、市场研究和行业动态。网站链接：<a href="https://www.neeq.com.cn/">https://www.neeq.com.cn/</a></p><p>6、中国经济网企业频道：提供企业管理、经济政策、商业资讯等方面的报道和分析。网站链接：<a href="http://www.ce.cn/enterprise/">http://www.ce.cn/enterprise/</a></p><p>7、中国网财经频道：关注财经领域的新闻报道、商业动态和经济政策等。网站链接：<a href="http://finance.china.com.cn/">http://finance.china.com.cn/</a></p><p>8、创业邦企业服务：提供创业指导、企业管理、创业项目推荐等方面的信息和资源。网站链接：<a href="http://www.cyzone.cn/service/">http://www.cyzone.cn/service/</a></p><p>9、投资界企业家库：收录了众多创业者和企业家的资料和故事，提供创业经验和企业管理的分享。网站链接：<a href="https://people.pedaily.cn/">https://people.pedaily.cn/</a></p><h2 id="4、国家政策的重要网站："><a href="#4、国家政策的重要网站：" class="headerlink" title="4、国家政策的重要网站："></a>4、国家政策的重要网站：</h2><p>1、中国政府网：中国政府网是中国政府的官方门户网站，提供各级政府机构的政策法规、新闻发布和政务信息等。网站链接：<a href="http://www.gov.cn/">http://www.gov.cn/</a></p><p>2、国务院发展研究中心：国务院发展研究中心是中国国务院直属事业单位，负责经济和社会发展政策研究，提供重要政策文件和研究报告。网站链接：<a href="http://www.drc.gov.cn/">http://www.drc.gov.cn/</a></p><p>3、国家发改委：国家发展和改革委员会是中国国家层面的宏观经济管理机构，负责制定国家发展规划和宏观调控政策。网站链接：<a href="http://www.ndrc.gov.cn/">http://www.ndrc.gov.cn/</a></p><p>4、中国人民银行：中国人民银行是中国的中央银行，负责货币政策和金融稳定，提供金融政策和法规文件。网站链接：<a href="http://www.pbc.gov.cn/">http://www.pbc.gov.cn/</a></p><p>5、中国证监会：中国证券监督管理委员会负责监管中国证券市场，提供证券市场的监管规定和政策文件。网站链接：<a href="http://www.csrc.gov.cn/">http://www.csrc.gov.cn/</a></p><p>6、中华人民共和国国家税务总局：提供税收政策、税法法规和税务服务的官方网站。网站链接：<a href="https://www.chinatax.gov.cn/">https://www.chinatax.gov.cn/</a></p><p>7、中国人民银行外汇管理局：负责管理和监督中国的外汇管理政策和规定。网站链接：<a href="https://www.safe.gov.cn/">https://www.safe.gov.cn/</a></p><p>8、中国人民银行金融稳定局：负责金融稳定政策和金融风险防控的官方网站。网站链接：<a href="http://www.cbirc.gov.cn/">http://www.cbirc.gov.cn/</a></p><p>9、国家知识产权局：负责知识产权保护和知识产权政策的官方网站。网站链接：<a href="http://www.sipo.gov.cn/">http://www.sipo.gov.cn/</a></p><p>10、中国外商投资企业协会：提供外商投资相关政策、法规和商业信息的行业协会官方网站。网站链接：<a href="http://www.fiea.org.cn/">http://www.fiea.org.cn/</a></p><h2 id="5、尖端技术信息发布的知名网站："><a href="#5、尖端技术信息发布的知名网站：" class="headerlink" title="5、尖端技术信息发布的知名网站："></a>5、尖端技术信息发布的知名网站：</h2><p>1、MIT技术评论：麻省理工学院的科技媒体，提供全球尖端技术领域的新闻、分析和评论。网站链接：<a href="https://www.technologyreview.com/">https://www.technologyreview.com/</a></p><p>2、IEEE Spectrum：IEEE（国际电气和电子工程师协会）的科技杂志，报道科技领域的前沿技术、研究和趋势。网站链接：<a href="https://spectrum.ieee.org/">https://spectrum.ieee.org/</a></p><p>3、TechCrunch：科技媒体，关注科技创新、初创公司和科技产业的新闻报道和分析。网站链接：<a href="https://techcrunch.com/">https://techcrunch.com/</a></p><p>4、Wired：科技和创新杂志，报道科技、文化和商业领域的前沿技术和趋势。网站链接：<a href="https://www.wired.com/">https://www.wired.com/</a></p><p>5、Gizmodo：科技媒体，报道科技、科学和创新领域的新闻、产品评测和趋势。网站链接：<a href="https://gizmodo.com/">https://gizmodo.com/</a></p><p>6、Engadget：科技媒体，报道科技新闻、产品评测和科技趋势。网站链接：<a href="https://www.engadget.com/">https://www.engadget.com/</a></p><p>7、Ars Technica：科技媒体，提供科技新闻、分析和评论，涵盖计算机、科学和技术领域。网站链接：<a href="https://arstechnica.com/">https://arstechnica.com/</a></p><p>8、TechRadar：科技新闻和产品评测网站，关注电子产品、科技趋势和科技文化。网站链接：<a href="https://www.techradar.com/">https://www.techradar.com/</a></p><p>9、Digital Trends：科技媒体，提供科技新闻、产品评测和科技文化内容。网站链接：<a href="https://www.digitaltrends.com/">https://www.digitaltrends.com/</a></p><p>10、New Atlas：科技新闻和创新网站，报道科技领域的新技术、发明和创新项目。网站链接：<a href="https://newatlas.com/">https://newatlas.com/</a></p><h2 id="6、创业好想法："><a href="#6、创业好想法：" class="headerlink" title="6、创业好想法："></a>6、创业好想法：</h2><p>1、Entrepreneur：这是一个专注于创业和企业管理的网站，提供创业灵感、商业机会和创新思维的文章和资源。网站链接：<a href="https://www.entrepreneur.com/">https://www.entrepreneur.com/</a></p><p>2、Springwise：这个网站跟踪全球的创新和新兴趋势，提供创业者和企业家灵感的创新想法和商业机会。网站链接：<a href="https://www.springwise.com/">https://www.springwise.com/</a></p><p>3、Trend Hunter：这是一个趋势研究和消费者洞察的网站，提供最新的创业趋势和商业创意。网站链接：<a href="https://www.trendhunter.com/">https://www.trendhunter.com/</a></p><p>4、Startup Stash：这是一个创业资源库，汇集了各种创业工具、资源和灵感，可以帮助创业者发现好的创业想法。网站链接：<a href="https://startupstash.com/">https://startupstash.com/</a></p><p>5、AngelList：这是一个面向初创公司和投资者的平台，提供创业机会和创业项目的信息，帮助创业者找到投资和合作机会。网站链接：<a href="https://angel.co/">https://angel.co/</a></p><p>6、Crunchbase：这是一个关于初创公司和创业生态系统的数据库，提供创业公司的信息、趋势和投资数据。网站链接：<a href="https://www.crunchbase.com/">https://www.crunchbase.com/</a></p><p>7、Kickstarter：这是一个众筹平台，展示了许多创新和创意项目，可以为创业者提供灵感和参考。网站链接：<a href="https://www.kickstarter.com/">https://www.kickstarter.com/</a></p><p>8、Product Hunt：这个网站聚集了各种新产品和创新项目，创业者可以在这里发现新的创业机会和商业想法。网站链接：<a href="https://www.producthunt.com/">https://www.producthunt.com/</a></p><p>9、Inc.com：这是一家创业和企业管理的媒体公司，提供创业洞察、商业思维和成功故事的文章和资源。网站链接：<a href="https://www.inc.com/">https://www.inc.com/</a></p><p>10、Fast Company：这是一个关注创新和创业的媒体，报道领先的商业思维、创业者和创新项目。网站链接：<a href="https://www.fastcompany.com/">https://www.fastcompany.com/</a></p><h2 id="7、顶尖生物医疗技术信息"><a href="#7、顶尖生物医疗技术信息" class="headerlink" title="7、顶尖生物医疗技术信息"></a>7、顶尖生物医疗技术信息</h2><p>1、Nature Biotechnology：《Nature Biotechnology》杂志的官方网站，提供生物技术和生物医学领域的研究文章、评论和新闻。网站链接：<a href="https://www.nature.com/nbt/">https://www.nature.com/nbt/</a></p><p>2、BioPharma Dive：专注于生物制药和生物医疗行业的新闻和分析网站，涵盖科技创新、治疗方法和行业趋势。网站链接：<a href="https://www.biopharmadive.com/">https://www.biopharmadive.com/</a></p><p>3、FierceBiotech：提供生物技术和生物医疗行业的新闻、分析和趋势报道的网站。网站链接：<a href="https://www.fiercebiotech.com/">https://www.fiercebiotech.com/</a></p><p>4、GenomeWeb：专注于基因组科学、生物医学研究和生物技术领域的新闻和分析网站。网站链接：<a href="https://www.genomeweb.com/">https://www.genomeweb.com/</a></p><p>5、Medscape：医学和生物医学领域的专业网站，提供医学新闻、临床信息和科学研究文章。网站链接：<a href="https://www.medscape.com/">https://www.medscape.com/</a></p><h2 id="8、全球军事信息"><a href="#8、全球军事信息" class="headerlink" title="8、全球军事信息"></a>8、全球军事信息</h2><p>1、Jane’s：这是一个全球知名的军事和安全情报机构，提供军事装备、武器系统、军事技术和地缘政治等方面的权威信息。网站链接：<a href="https://www.janes.com/">https://www.janes.com/</a></p><p>2、Defense News：这是一个专注于国防和军事领域的新闻和分析网站，提供军事技术、军备竞赛和地缘政治等方面的报道。网站链接：<a href="https://www.defensenews.com/">https://www.defensenews.com/</a></p><p>3、The Diplomat：这是一个涵盖亚洲地区的国际事务和安全政策的网站，提供与军事相关的新闻、分析和评论。网站链接：<a href="https://thediplomat.com/">https://thediplomat.com/</a></p><p>4、GlobalSecurity.org：这是一个提供全球安全和军事信息的网站，包括国家军事力量、军事技术和地缘政治的综合性资源。网站链接：<a href="https://www.globalsecurity.org/">https://www.globalsecurity.org/</a></p><p>5、Military.com：这是一个专注于军事和国防领域的新闻、资源和社区网站，提供军事新闻、军事生活和军事职业方面的信息。网站链接：<a href="https://www.military.com/">https://www.military.com/</a></p><h2 id="7、图片下载的网站"><a href="#7、图片下载的网站" class="headerlink" title="7、图片下载的网站"></a>7、图片下载的网站</h2><p>Unsplash - <a href="https://unsplash.com/">https://unsplash.com/</a><br>Pixabay - <a href="https://pixabay.com/">https://pixabay.com/</a><br>Pexels - <a href="https://www.pexels.com/">https://www.pexels.com/</a><br>Freepik - <a href="https://www.freepik.com/">https://www.freepik.com/</a><br>Getty Images - <a href="https://www.gettyimages.com/">https://www.gettyimages.com/</a><br>Shutterstock - <a href="https://www.shutterstock.com/">https://www.shutterstock.com/</a><br>Adobe Stock - <a href="https://stock.adobe.com/">https://stock.adobe.com/</a><br>Depositphotos - <a href="https://depositphotos.com/">https://depositphotos.com/</a></p><h2 id="8、PPT模板"><a href="#8、PPT模板" class="headerlink" title="8、PPT模板"></a>8、PPT模板</h2><p>千库网 - <a href="https://588ku.com/">https://588ku.com/</a><br>千图网 - <a href="https://www.58pic.com/">https://www.58pic.com/</a><br>优品PPT - <a href="http://www.ypppt.com/">http://www.ypppt.com/</a><br>第一PPT - <a href="https://www.1ppt.com/">https://www.1ppt.com/</a><br>PPT宝藏 - <a href="https://www.pptbz.com/">https://www.pptbz.com/</a><br>PPT模板网 - <a href="http://www.pptmobi.com/">http://www.pptmobi.com/</a></p><h2 id="9、豆瓣读书"><a href="#9、豆瓣读书" class="headerlink" title="9、豆瓣读书"></a>9、豆瓣读书</h2><p>豆瓣读书主页：<a href="https://book.douban.com/">https://book.douban.com/</a><br>豆瓣书店：榜单 <a href="https://market.douban.com/book/?type=annual">https://market.douban.com/book/?type=annual</a></p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Movie channels</title>
      <link href="/2023/05/22/Movie-channels/"/>
      <url>/2023/05/22/Movie-channels/</url>
      
        <content type="html"><![CDATA[<h2 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h2><h3 id="天空影视"><a href="#天空影视" class="headerlink" title="天空影视"></a>天空影视</h3><p><a href="https://tkznp.com/">https://tkznp.com/</a></p><h3 id="泰剧鸟"><a href="#泰剧鸟" class="headerlink" title="泰剧鸟"></a>泰剧鸟</h3><p><a href="https://www.taijuniao.com/">https://www.taijuniao.com/</a></p><h3 id="555电影"><a href="#555电影" class="headerlink" title="555电影"></a>555电影</h3><p><a href="https://555dy.cc/">https://555dy.cc/</a></p><h3 id="爱看影视"><a href="#爱看影视" class="headerlink" title="爱看影视"></a>爱看影视</h3><p><a href="https://ikan6.vip/">https://ikan6.vip/</a></p><h3 id="干饭影视"><a href="#干饭影视" class="headerlink" title="干饭影视"></a>干饭影视</h3><p><a href="https://gfysys3.com/">https://gfysys3.com/</a></p><h3 id="大米星球"><a href="#大米星球" class="headerlink" title="大米星球"></a>大米星球</h3><p><a href="https://www.dmxq.fun/">https://www.dmxq.fun/</a></p><h3 id="假人人影视"><a href="#假人人影视" class="headerlink" title="假人人影视"></a>假人人影视</h3><p><a href="https://www.renren.pro/">https://www.renren.pro/</a></p><h3 id="低端影视"><a href="#低端影视" class="headerlink" title="低端影视"></a>低端影视</h3><p><a href="https://ddys.art/">https://ddys.art/</a></p><h3 id="在线之家"><a href="#在线之家" class="headerlink" title="在线之家"></a>在线之家</h3><p><a href="https://www.zxzjhd.com/">https://www.zxzjhd.com/</a></p><h3 id="NOVIP"><a href="#NOVIP" class="headerlink" title="NOVIP"></a>NOVIP</h3><p><a href="https://www.novipnoad.com/">https://www.novipnoad.com/</a></p><h3 id="Z动漫"><a href="#Z动漫" class="headerlink" title="Z动漫"></a>Z动漫</h3><p><a href="https://www.dm2022.com/">https://www.dm2022.com/</a></p><h3 id="樱花动漫"><a href="#樱花动漫" class="headerlink" title="樱花动漫"></a>樱花动漫</h3><p><a href="http://www.yinghuacd.com/">http://www.yinghuacd.com/</a></p><h3 id="COKEMV"><a href="#COKEMV" class="headerlink" title="COKEMV"></a>COKEMV</h3><p><a href="https://cokemv.me/">https://cokemv.me/</a></p><h3 id="第一影视"><a href="#第一影视" class="headerlink" title="第一影视"></a>第一影视</h3><p><a href="https://www.1ys.cc/">https://www.1ys.cc/</a></p><h3 id="91美剧网"><a href="#91美剧网" class="headerlink" title="91美剧网"></a>91美剧网</h3><p><a href="https://www.91mjtt.cc/">https://www.91mjtt.cc/</a></p><h3 id="莫扎兔"><a href="#莫扎兔" class="headerlink" title="莫扎兔"></a>莫扎兔</h3><p><a href="https://www.mozhatu.com/">https://www.mozhatu.com/</a></p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><h3 id="下歌吧音乐下载平台"><a href="#下歌吧音乐下载平台" class="headerlink" title="下歌吧音乐下载平台"></a>下歌吧音乐下载平台</h3><p><a href="https://music.y444.cn/#/">https://music.y444.cn/#/</a></p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beautiful sentences</title>
      <link href="/2023/05/22/Beautiful-sentences/"/>
      <url>/2023/05/22/Beautiful-sentences/</url>
      
        <content type="html"><![CDATA[<h2 id="Part-One"><a href="#Part-One" class="headerlink" title="Part One"></a>Part One</h2><p>失去分享的欲望，便是散场的开始。</p><p>你的压力来源于，无法自律只是假装努力，现状跟不上内心欲望，所以你焦虑甚至恐慌</p><p>旧账重提是因为它从没被妥善解决</p><p>喜欢谁，就像打麻将，都希望自己赢得钵满盆满。不过上了牌桌，就要输得起也赢得起。愿赌服输，赢了时幸运，输了也不要骂麻将只有那么几张</p><p>有趣的人，大概就是他的信息密度和知识层面都远高于你，可他还是愿意俯下身听你将那些没有营养的废话，并乐此不疲</p><p>想念才是爱情最本质的体现</p><p>礼貌和教养不只是干瘪单薄的客套，还有推己及人的周到和体谅。这考验的不止是情商，还有你的善良</p><p>不要爱一个开始就只想和你试试的人，要爱那个一心想要和你长久的人，不管能不能到最后，这个人都会在过程里好好珍惜你</p><p>让你哭的从来不是文案，是相似的经历，是久久憋在心里的委屈，是你不被爱的事实</p><p>我们终有一死，而这些竹简也必将腐朽，但这些律令背后的精神，一定会延绵后世千年</p><p>妈妈说：如果你越来越冷漠，你以为你长大了，但其实没有。长大应该是变得温柔，对全世界都温柔</p><p>世界上最让人底气十足的，不是尊重与平等，而是被偏爱</p><p>深海不会因为一杯沸水而加温</p><p>失去的东西<br>其实从未正真的属于你<br>也不必惋惜。–亦舒</p><p>除掉睡眠<br>人的一辈子只有一万多天<br>人与人的不同在于：<br>你是真的活了一万多天<br>还是仅仅生活了一天<br>却重复了一万多次。–佩索阿</p><p>如果你真的想做一件事<br>那么就算障碍重重<br>你也会想尽一切办法去办到它<br>但若是你不是真心的<br>想要去完成一件事情<br>那么纵使前方道路平坦<br>你也会想尽一切理由<br>阻止自己向前–亦舒《不是理由》</p><p>其实人跟树一样<br>越是向往高处的阳光<br>它的根就越要伸向黑暗的地底–尼采</p><p>要是永远纠结在过去的事情上<br>就会看不清将来<br>人啊，比起那些把痛苦<br>明明白白写在脸上的时候<br>往往越是强颜欢笑<br>举止活泼开朗的时候<br>内心反而掩饰着更深刻的悲伤–《濒死之眼》</p><p>我始终认为一个人<br>可以很天真简单的活下去<br>必是身边无数人<br>用更大的代价守护而来的–《小王子》</p><p>人一到群体中<br>智商就严重降低<br>为了获得认同<br>个体愿意抛弃是非<br>用智商去换取<br>那份让人倍感安全的归属感–《乌合之众》</p><p>我不相信手掌的纹路<br>但我相信手掌加上手指的力量<br>如果你不能确定你往哪里走<br>那么此处就是你的葬生之地–毕淑敏《心灵七游戏》</p><p>有的东西不过很久是不可能理解的<br>有些东西等到理解了又为时已晚<br>大多数时候，我们不得不<br>在尚未清楚认识自己的情况下选择行动<br>因而感到迷惘和困惑–村上春树《世界尽头与冷酷仙境》</p><p>不要在任何东西面前<br>失去自我<br>哪怕是教条<br>哪怕是别人的目光<br>哪怕是爱情–《成为简奥斯汀》</p><p>世上有两样东西不可直视<br>一是太阳，二是人心  –《白夜行》</p><p>有些人一辈子<br>都活在太阳的照耀下<br>也有些人不得不<br>一直活在漆黑的深夜里</p><p>人害怕的，就是本来<br>一直存在的太阳落下不在升起<br>也就是非常害怕<br>原本照在自己身上的光芒消失</p><h2 id="Part-Two"><a href="#Part-Two" class="headerlink" title="Part Two"></a>Part Two</h2><p>心脏是一座有两间卧室的房子，一间住着痛苦，另一间住着欢乐，人不能笑得太响，否则笑声会吵醒隔壁房间的痛苦–卡夫卡《箴言录》</p><p>我和这个世界不熟。这并非是我安静的原因。我依旧有很多问题，问南方，问故里，问希望，问距离–北岛《我和这个世界不熟》</p><p>这个跑步真的是世界上最无聊的运动，重复、枯燥，偶尔有人陪伴，大部分时间都没有回应，但，像极了人生–《听你的》</p><p>每个人都忙着赶路，或忙着寻找什么，或忙着赶上别人，其实，更多时候，他们只是在忙着追赶自己–凯特汤普森《寻找时间的人》</p><p>人是为了活着本身而活着，而不是为了活着之外的任何事物而活着–余华</p><p>我世面见得越多，越觉得我一辈子也见不到一个我会真心爱恋的男人–简奥斯汀《理智与情感》</p><p>你还年轻，将来你会遇到很多人，经历很多事，得到很多，也会失去很多，但无论如何，有两样东西，你绝不能丢弃。一个叫良心，另一个叫理想。能改的叫做缺点，不能改的，叫做弱点。成功只有一个——按照自己的方式去度过人生–当年明月《明朝那些事》</p><p>我们总是忘了事情是怎么开始的，却执着于控制它结束的方式。“事情不应该这么结束”，于是千千万万段感情继续着，以奇形怪状的式样–颜卤煮</p><p>如果不坚持对现实表示些不满、刻薄或者绝望的话，人生就虚伪得连一点诚意都没有了–《大梦》</p><p>如果不能去梦想之地，那便在自己所在的城市，最大限度的复制出那个平行世界中的自己，应该有的生活–杨熹文</p><p>事实上黑暗本身是不存在的，它们之时缺少光线的照射罢了–《苏菲的世界》</p><p>人们越是感到前面可能有什么乱子和祸事临头，就越是放纵自己及时行乐</p><p>没有人是完整的。所谓幸福，就是认清自己的限度并安分守己–罗曼罗兰《约翰克里斯托夫》</p><p>做自己吧，真正的爱情不是颠覆自己的迁就，而是双方眼中看到的是最真实的彼此</p><p>快乐的人没有过去，不快乐的人除了过去一无所有–理查德.弗兰纳根</p><p>愿你所得过少时，不会终日愤愤；愿你所得过多时，不必终日惶恐–东野圭吾</p><p>所有的人都渐渐学会了保护自己，在别人疏远前先一步动身，在别人冷淡时加倍地漠然，在得不到的时候大声说，我根本就不想要啊–八月长安《你好，旧时光》</p><p>世间有许多人站在歧路上只徘徊顾虑，既不肯有所舍，便不能有所取。世间也有许多人既走上这一条路，有恋恋不忘那一条路。结果也不免差误时光–朱光潜《给青年的十二封信》</p><p>梦想，可以天花乱坠，理想，是我们一步一个脚印踩出来的坎坷道路–三毛《亲爱的三毛》</p><p>其实了解一个人并不代表什么，人是会变的。今天他喜欢凤梨，明天它可以喜欢别的</p><p>现实生活未必同想象一样，在不尽人意的时候只需记住，人生从来就没有绝对的完美。锐利的岁月可以将一个骨肉丰盈的人，削减到无比瘦脊–白落梅</p><p>懒惰是很奇怪的东西，它使你以为那是安逸，是休息，是福气；但实际上它所给你的是无聊，是倦怠，是消沉；它剥夺你对前途的希望，隔断你和别人之间的友情，使你心胸日渐狭窄，对人生也越来越怀疑–罗兰《忙碌于进取》</p><p>人生的路，靠自己一步一步走去，真正能保护你的，是你自己的人格选择和文化选择。那么反过来，真正能伤害你的，也是一样，自己的选择–余秋雨《借我一生》</p><p>在这个吵得人分不清东南西北的世界里，我们手里所持有的干干净净的初衷，不多了，握好了，别丢了，明天还要赶很远的路–七堇年《灯下尘》</p><p>一切尽意，百事从欢<br>西风渭水，落日长安<br>尾生抱木，至死方休<br>半生漂泊，雨打归舟<br>花花世界，静守己心<br>花看半开，酒饮微醺<br>流光一瞬，华表千年<br>长夜将尽，来日可期</p><p>一个人真的喜欢你，他绝对会因为思念而找你的，绝不是你理他他才找你，友情也好，爱情也罢，没有腼腆一词</p><p>好朋友是不会在彼此身上找优越感的</p><p>我们的有趣程度取决于我们之间的关系</p><p>失望最可怕，比发脾气更可怕，发脾气还可以哄，失望不行，失望说不出来什么感觉，但是永远都会有隔阂</p><p>生活不算太糟糕，三餐能下肚，每天有感悟，想发圈，想配图，想传达出我是一个有趣的人，但忘了怎么表述，也忘了自己怎么有趣</p><p>人们总是把少年的勇气叫做叛逆，把孩子的不甘叫做顶嘴，把未成年的崩溃叫做矫情，把成年人的懦弱叫做顾全大局</p><p>时间证明不了什么，两年三年五年十年，任何人在任何时候分道扬镳都很正常</p><h2 id="Part-Three"><a href="#Part-Three" class="headerlink" title="Part Three"></a>Part Three</h2><p>每个人在为别人做什么的时候，哪怕他再心甘情愿，再默默无声，心里也总会有那么一丝希望，希望有一天对方能看见，我不能免俗</p><p>别等了，喜欢你的人会想方设法的找你聊天，不喜欢你的就算看见也不会回你 小心点 别再次成为被抛弃的可怜鬼</p><p>我来到这世界上，不是为了结婚生子，繁衍后代，而是为了看这世界，花是怎么开的，水怎么流，太阳何时升起，夕阳又如何落下</p><p>你们的恶毒与善良不够纯粹，所以痛苦</p><p>心理学有一个词叫做丧失致盲，当你即将要失去一样东西或者是一个人的时候，你会忽视掉他所有的缺点。明明对方是一个会伤害你的人，但是在整个失恋煎熬中，你却越来越想到他的优点，你看到什么都会想到他对你的温柔，想起什么都是曾经的美好</p><p>生活，就是生下来，活下去</p><p>人到最后，什么都会习以为常–《局外人》</p><p>刚开始是假装坚强，后来就真的坚强了–杨绛</p><p>人生是一袭华丽的袍，上面爬满了虱子–张爱玲</p><p>爱是一个人的事，而爱情是两个人的事。所以我爱你，与你无关–茨威格</p><p>每天努力呼吸着，因为我活着，是为自己</p><p>孤独不是一种脾性，而是一种无赖–余秋雨</p><p>你可以逃避现实，但是你无法逃避这样做的后果–安兰德</p><p>人老了，唯一的好处就是能失去的东西少了–《哈尔的移动城堡》</p><p>每个大人都曾经是孩子，可惜的是，很少大人记得这一点–《小王子》</p><p>生命之所以有意义是因为它会停止–卡夫卡</p><p>在你感到最无助最无力的时候，才是你真正觉醒的时候–《悟空传》</p><p>一尘不染不是不再有尘埃，而是尘埃让它飞扬，我自做我的阳光–林清玄</p><p>我去旅行，是因为我决定了要去，并不是因为对风景的兴趣–《霍乱时期的爱情》</p><p>也许我们用尽全力也只是为了过好平凡的一生</p><p>你既然已经做出了选择，又何必去问为什么选择–《秦时明月》</p><p>人生碌碌，竞短论长，却不道荣枯有数，得失难量–《浮生六记》</p><p>刻意去找的东西往往是找不到的，天下万物的来和去，都有它的时间–三毛</p><p>我们都有特别害怕失去的东西，有时候为了这些东西，我们会做我们不愿意做的事情。–《隐秘的角落》</p><p>庆幸你来自远方，不知道我的过往</p><p>对于未来的真正慷慨，是把一切献给现在</p><p>人生如同痴人说梦，充满着喧哗与骚动，却没有任何意义–《麦克白》</p><h2 id="Part-Four"><a href="#Part-Four" class="headerlink" title="Part Four"></a>Part Four</h2><p>人之所以伤心，是因为看得不够远–林语堂</p><p>哪怕是野火焚烧，哪怕是冰雪覆盖，依然是志向不改，依然是信念不衰–阎肃</p><p>与岁月对望，所有人都老了，再没人死于心碎–高晓松《如丧》</p><p>一星陨落，暗淡不了星空灿烂，一花凋零，荒芜不了整个春天–巴尔扎克</p><p>心之所向，素履以往，生如逆旅，一苇以航–七堇年</p><p>使人疲惫的不是远方的高山，而是鞋子里的一粒沙子–伏尔泰《格言》</p><p>时间赐我青春与死亡，尽管我戴着镣铐依然像大海一样歌唱–狄兰托马斯《羊齿山》</p><p>生活安逸时，会做出绝望的诗，生活窘迫时会不断写出生的喜悦–太宰治《叶》</p><p>一定要爱着点什么，它让我们变得坚韧、宽容、充盈。业余的，爱着–汪曾祺《生活是很好玩的》</p><p>一个能够升起月亮的身体，必然驮住了无数次日落–余秀华《荒漠》</p><p>凡事需多听但少言；聆听他人之意见，但保留自己之判断–莎士比亚《哈姆雷特》</p><p>善的追随你，恶的倾慕你<br>光明的渴望你，黑暗的也希冀你<br>你是超越一切的存在，是神为万物镀上的色彩–《浪漫的传说》</p><p>死亡不是失去生命，而是走出了时间–余华</p><p>要是你老是认为自己配不上一个人，那么，你也永远无法成为一个更好甚至最好的自己–张小娴</p><p>这个世纪疯狂，没人性，腐败。<br>你却一直清醒，温柔，一尘不染–萨冈</p><p>楼道角落里阳光每天盛开<br>你很久前也在<br>很久前的花肥肥的开在窗外<br>你很久前也毛茸茸地在窗里开<br>它们为什么能长盛不衰<br>我们为什么屡战屡败–冯唐《记梦》</p><p>怀着巨大的偏见当机立断-此乃杀人秘诀–村上春树《海边的卡夫卡》</p><p>当你身无分文时经历的世界更彻底–《巴黎伦敦落魄记》</p><p>年轻人不依赖批判和负面的东西而生活，他们靠感情和理想–黑塞《朝圣者之歌》</p><p>无论对谁太过热情，就增加了不被珍惜的概率。倘若没有过度的欢喜，便不会有极度的悲伤–太宰治《人间失格》</p><p>生活总是让我们遍体鳞伤，但到后来，那些受伤的地方一定会变成我们最强壮的地方–海明威《永别了武器》</p><p>过放荡不羁的生活，容易得像顺水推舟，但是要结识良朋益友，却难如登天–巴尔扎克</p><p>天上得每颗星星，都是殉难者得生命–耳东兔子《他从火光中走来》</p><p>即便前路混沌，同他走过，才算人间–高台树色《白日故事》</p><p>每个人得生命里，都有最艰难得那一年，将人生变得美好而辽阔–《岛上书店》</p><p>任何一种环境或个人，初次见面就预感到离别的隐痛时，你必定是爱上他了–黄永玉</p><p>我们都喜欢光，虽然转瞬即逝。但你还是你，有我一喊就颤心的名字–余秀华《风吹》</p><p>悲观也没用<br>谁都想生在好人家，可无法选择父母<br>发给你什么样的牌，你就只能尽量打好它–东野圭吾《时生》</p><p>我的不幸，恰恰在于我缺乏拒绝的能力–太宰治《人间失格》</p><p>我一直喜欢下午的阳光，它让我相信这个世界任何事情都会有转机，相信命运的宽厚和美好–饶雪漫《按时长大》</p><p>我们的灵魂，或者说我们的内在生命，常常是和我们的外在生活格格不入的–弗吉尼亚.伍尔芙</p><p>年轻的时候以为不读书不足以了解人生，知道后来才发现，如果不了解人生，是读不懂书的。读书的意义大概就是用生活所感去读书，用读书所得去生活吧–杨绛</p><p>使人变渺小的感情可耻<br>使人变孩子的感情可贵–雨果《悲惨世界》</p><p>两年学说话，一生学闭嘴。懂与不懂，不多说。心乱心静，慢慢说。若真没话，就别说–海明威</p><p>如果我们没有忘记过去从来都不是因为怀恋别人，而是怀恋过去岁月中的自己《过客，匆匆》<br>世间一切伟大壮举总是默默完成的，世间一切智者都是深谋远虑的–《人类群星闪耀时》</p><p>寂静在喧嚣里低头不语，沉默在黑夜里与目光结交。于是我们看错了世界，却说世界欺骗了我们–泰戈尔《飞鸟集》</p><p>爱的反面不是仇恨，而是漠不关心–特蕾莎修女</p><p>借我一个暮年，借我碎片<br>借我瞻前与顾后，借我执拗如少年<br>借我后天长成的先天，借我突变不曾改变<br>借我素淡的世故和明白的愚，借我可预知的脸<br>借我悲怆的磊落<br>借我温软的鲁莽和玩笑的庄严<br>借我最初与最终的不敢，借我不言而喻的不见<br>借我一场秋啊，可你说这已是冬天–樊小纯</p><p>即使没有月亮 心中也是一片皎洁–路遥</p><p>一个人应该活得是自己并且干净–顾城</p><h2 id="Part-Five"><a href="#Part-Five" class="headerlink" title="Part Five"></a>Part Five</h2><p>人的一生是万里河山，来往无数客，有人给山河添色，有人使日月无光，有人改他江流，有人塑他梁骨，大限到时，不过是立在山巅，江河回望–尾鱼《西出玉门》</p><p>梦之中，尽是称心如意。乍惊，不知人间何世，天不再冷了，夜不再昏了，人也不再年少。一觉醒来，人间原来暗换了芳华–李碧华《生死桥》</p><p>我渴望有人至死都暴烈的爱我，明白爱和死一样强大，并且永远的扶持我。我渴望有人毁灭我，也被我毁灭–《橘子不是唯一的水果》</p><p>后来许多人问我一个人夜晚踟蹰路上的心情，我想起的却不是孤单和路长，而是波澜壮阔的海和天空中闪耀的星光–《走吧，张小砚》</p><p>没有一个人是禁得起分析的，能够试着了解，已是不容易了–三毛《亲爱的三毛》</p><p>就算走到绝境，失去耐心，也要永远保有幽默感，热爱生活，这是我们人生最大的财富–马尔克斯《活着为了讲述》</p><p>屏弃于温暖之外，满足于荒凉的寂寞。有孤独，才能保持永远澄澈–《井》</p><p>我们准备着深深地领受，那些意想不到地奇迹，在漫长地岁月里忽然有，彗星地出现，狂风乍起。–冯至《十四行诗》</p><p>少年们啊 从今以后<br>无论你们如何长大<br>都不要太在意自己的容貌<br>不要抽烟 也不要喝酒 除非逢年过节<br>而且 要持之以恒地去爱一个姑娘<br>一个腼腆而又臭美地姑娘–太宰治《人间失格》</p><p>在薄情地世界深情地活着</p><p>生活总是这样，不能叫人处处都满意<br>但我们还要热情地活下去<br>人活一生，值得爱的东西很多，<br>不要因为一个人不满意，就灰心–路遥《人生》</p><p>搞不好我是在害怕。害怕真心爱上了谁，需要谁，可到最后对方却突如其来、毫无征兆的消失，从此无影无踪，只剩下我孤孤单单一个人–村上村树</p><p>所有你们不相信的事情我都要一一地去做一遍，亲自体验一下不可理喻地成功，或早已注定的失败–马良《坦白书》</p><p>去吧 但愿你一路平安<br>桥都坚固，隧道都光明–《火车》</p><p>跟这个世界交手的许多年后，你是否光彩依旧，兴趣盎然–《乔治》、</p><p>我从来没被人说服过，所以也懒得去寻求别人的理解。人都是顽固不化和自以为是的，相安无事的唯一办法就是欺骗–王塑《动物凶猛》</p><p>为了寻找你，我搬进鸟的眼睛，经常盯着路过的风，也忘了听猎人的枪声–《路边野餐》</p><p>历史是只看结果而忽略手段的，就像人们只看到中国的万里长城、埃及的金字塔等许多伟大的建筑，而看不到这些建筑下面的累累白骨–《蛙》</p><p>人生最大的幸运，莫过于在他的人生中途即在他年富力强时发现自己的人生使命–《人类在群星闪耀时》</p><p>因为人们都会犯错<br>铅笔的后面才会有橡皮–《伦敦生活》</p><p>记住自己这次为什么走上台，既然上去了，不要怕。怕，你就会输一辈子–《激战》</p><p>要永远年轻，永远热情，永远不听话；要大笑，要做梦，要与众不同的。人生是一场伟大的冒险·–《外婆的道歉信》</p><p>我年纪还轻，阅历不深的时候，我父亲教导过我一句话，我至今还念念不忘。“每逢你想要批评任何人的时候，”他对我说，你就要记住，这个世界上所有的人，并不是个个都有过你拥有的那些优越条件–菲茨杰拉德《了不起的盖茨比》</p><p>你的心要如溪水般柔软，你的眼波要像春天般明媚–余光中《写给未来的你》</p><p>心脏是一座有两间卧室的房子，一间住着痛苦，另一间住着欢乐，人不能笑得太响，否则笑声会吵醒隔壁房间的痛苦–卡夫卡《箴言录》</p><p>有些人沦为平庸浅薄，金玉其外，而败絮其中。可不经意间，有一天你会遇到一个彩虹般绚烂的人，从此以后，其他人就不过是匆匆浮云–《砰然心动》</p><h2 id="Part-Six"><a href="#Part-Six" class="headerlink" title="Part Six"></a>Part Six</h2><p>怪物吞噬了一千个月亮，只剩下最后一个，站在悬梁之上，温柔充满天空，被埋葬在浩瀚银河之中。</p><p>旷野是春日阳光赠予世间的吻。</p><p>你踏万千星河而来，又乘舟奔赴远方。</p><p>青丝蘸白雪，来路生云烟。</p><p>霞光四溢 满城铺锦。</p><p>远赴人间惊鸿宴，一睹人间盛世颜。</p><p>有趣的人生，一半是山川湖海。</p><p>日落跌进迢迢星野，人间忽晚，山河已秋。</p><p>你身上的温柔，是克莱因的蓝再加上莫奈的一点灰。</p><p>梦醒人间看微雨，江山还似旧温柔。</p><p>山中若有眠，枕的是月，盖的是漫天星辰。</p><p>江舟添盛望，白马弄清堂。人间盛望，故里江添。——木苏里 《某某》</p><p>愿你眼里藏着太阳，笑里全是坦荡。在这个薄情的世界上，深情的活着</p><p>你来人间一趟，你要看看太阳，和你的心上人一起走在街上</p><p>总有人，山高路远，为你而来</p><p>我这一生遇到过很多人，他们如同指尖的烟火，忽明忽暗，最后沦为一抹灰烬，而你不同，你如北斗，闪耀在我的整个人生</p><p>所有晦暗都留给过往，从遇见你开始，凛冬散尽，星河长明。</p><p>遇见你之前 我犹如朝菌蟪蛄 不知晦朔春秋 那时我俗气至顶 见山是山 见海是海<br>唯独见了你 云海开始翻涌 江潮开始澎湃<br>从此以后 心如冥灵大椿 以千百岁为春秋<br>到后来 山川沉默 海而静谧 花鸟鱼虫被光与尘凝固 即使山河永寂 物换星移<br>我还是很喜欢你 像大鱼缺氧于六千四百米深海 乐此不疲</p><p>你人生所有的惊喜与好运，都是你日积月累的人品与善良。</p><p>星河滚烫 你是人间理想<br>人海冷漠 你是人间炽热<br>皓月清凉 你是人间曙光<br>万物生长 你是四月朝阳<br>满树繁华 你是心之所向</p><p>且视他人之凝目如盏盏鬼火，大胆的去走你的夜路–史铁生</p><p>矮人看戏何曾见，都是随人说长短–赵翼</p><p>无法达成的目标才是我的目标，迂回曲折的路才是我想走的路，而每次的歇息，总是带来新的向往–赫尔曼 黑塞</p><p>如果想征服生命中的焦虑，活在当下，活在每一个呼吸里。–马特海洛</p><p>于浩歌狂热之际中寒；于天上看见深渊。于一切眼中看见无所有；于无所希望中得救–鲁迅</p><p>愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光。不必等候炬火。此后如竟没有炬火：我便是唯一的光。——鲁迅</p><p>借我一个暮年，借我碎片，借我瞻前与顾后，借我执拗如少年 -樊小纯写给木心的诗</p><p>纵有千古，横有八荒；前途似海，来日方长–梁启超</p><p>月光还是少年的月光，九州一色还是李白的霜–余光中《独白》</p><p>酒入豪肠，七分酿成了月光。余下三分啸成剑气，绣口一吐，就是半个盛唐</p><h2 id="Part-Seven"><a href="#Part-Seven" class="headerlink" title="Part Seven"></a>Part Seven</h2><p>知交零落实是人生常态，能够偶尔话起，而心中仍然温暖，就是好朋友 –三毛</p><p>无论人生上到哪一层台阶，阶下有人仰望你，阶上亦有人俯视你。你抬头自卑，低头自得，唯有平视，才能看见真实的自己–杨绛</p><p>人生如逆旅，我亦是行人–苏轼</p><p>我不要听到你嘴里的积极口号，不要看到你在受伤之后的眼泪。我要看到你平地一声雷的蛰伏，看到你特立独行却不被孤立的魅力，看到你与世无争却有迹可循的野心，看到你说堕落，却又不自甘堕落的自制力。</p><p>岁月不饶人，我亦不曾饶过岁月–木心</p><p>对未来真正的慷慨，是把一切献给现在–加缪</p><p>活在这珍贵人间，太阳强烈，水波温柔–海子</p><p>应是天仙狂醉，乱把白云揉碎–李白</p><p>大智不群，大善无帮，何惧孤步，何惧毁谤。——《文化苦旅》</p><p>说是人生无常，却也是人生之常。——余光中</p><p>瀑布的水逆流而上，蒲公英种子从远处飘回，聚成伞的模样，太阳从西边升起，落向东方。子弹退回枪膛，运动员回到起跑线上，我交回录取通知书，忘了十年寒窗。厨房里飘来饭菜的香， 你把我的卷子签好名字，关掉电视，帮我把书包背上。你还在我身旁。——戴畅《你还在我身旁》</p><p>谁终将声震人间，必长久深自缄默。谁终将点燃闪电，必长久如云漂泊。——尼采</p><p>若逢新雪初霁，满月当空，下面平铺着皓影，上面流转着亮银，而你带笑地向我步来，月色与雪色之间，你是第三种绝色。——余光中《绝色》</p><p>苟有恒，何必三更眠五更起。最无益，莫过一日曝十日寒。——胡居仁</p><p>屋宇如鱼，匍匐在水面上，吐出日子，吐出生老病死和一个个连绵不绝的四季。——余秀华</p><p>君臣一梦，今古空名。但远山长，云山乱，晓山青。——苏轼</p><p>四方食事，不过一碗人间烟火。——汪曾祺</p><p>我的灵魂清澈而明亮，宛若清晨的群山。——尼采</p><p>鲸落海底，哺暗界众生十五年。——加里·斯奈德</p><p>心中贫瘠的早上，去看大海。——寺山修司《寺山修司少女诗集》</p><p>十里寒塘路，烟花一半醒。——魏宪《西湖春晓》</p><p>吹灭读书灯，一身都是月。——桂苓</p><p>不知原谅什么，诚觉世事尽可原谅。——木心</p><p>欲买桂花同载酒，终不似、少年游。——《唐多令·芦叶满汀洲》</p><p>我曾踏月而来，只因你在山中。——席慕蓉</p><p>唯有你的光辉，能像漫过山岭的薄雾。——雪莱</p><p>花店不开了，花继续开。——蔡仁伟</p><p>山中何事？松花酿酒，春水煎茶。——张可久《人月圆·山中书事》</p><p>今晚月色真美，风也温柔。——夏目漱石</p><p>草在结它的种子，风在摇它的叶子。我们站着，不说话，就十分美好。——顾城《门前》</p><p>秋风吹渭水，落叶满长安。——贾岛</p><p>双木非林，田下有心。——顾城</p><p>下次你路过，人间已无我。——余光中</p><p>我有一瓢酒，可以慰风尘。——韦应物</p><p>花看半开，酒饮微醺。——『菜根谭』</p><p>雾失楼台，月迷津渡。——秦观</p><p>掉头一去是风吹黑发，回首再来已雪满白头。——余光中《浪子回头》</p><p>夜晚我用呼吸，点燃星辰。——海子</p><p>玻璃晴朗，橘子辉煌。——北岛</p><p>黑夜一无所有，为何给我安慰。—海子《黑夜的献诗》</p><p>叶底藏花一度，梦里踏雪几回。——《一代宗师》</p><p>惊觉相思不露，原来只因已入骨。—— 汤显祖 《牡丹亭》</p><p>情不知所起，一往而深。——汤显祖《牡丹亭》</p><p>可惜一溪风月，莫教踏碎琼瑶。——苏轼《西江月·顷在黄州》</p><p>最是人间留不住，朱颜辞镜花辞树。——王国维</p><p>世事漫随流水，算来一梦浮生。——李煜</p><p>白马秋风塞上，杏花春雨江南。——徐悲鸿</p><p>见了他,她变得很低很低，低到尘埃里。但她心里是欢喜的，从尘埃里开出花来。——张爱玲</p><p>总之岁月漫长，然而值得等待。——村上春树</p><p>凡是过去，皆为序章。——莎士比亚</p><p>小舟从此逝，江海寄余生。 ——苏轼</p><p>你是我的半截的诗，不许别人更改一个字。 ——海子 《半截的诗》</p><p>我明白你会来，所以我等。 ——沈从文</p><h2 id="Part-Eight"><a href="#Part-Eight" class="headerlink" title="Part Eight"></a>Part Eight</h2><p>傍晚的阳光金黄而辽远，四季交替却如此温情，你迟到了许多年，可我依然为你的到来而高兴。等一下，我要裁一段星河赠你，人间烟火错落，你也不能逊色。</p><p>一辆载着梅子酒和沙丁鱼的火车，穿过樱花汇成的隧道，一头扎进了仲夏的黄昏，黄昏把它的碎片，一片片洒向人间，融入山川湖海，于是满天星河才有幸住进你的眼。我把这些碎片收集起来写成长信，在失眠的夜里轻声读给你听。</p><p>你是夜不下来的黄昏，是明不起来的清晨。你的语调像深山流泉，你的抚摸如暮春微云。温柔的暴徒，只对我言听计从。</p><p>当再次回到凤凰堂胡同之时，就如同流逝的岁月般，胡同也上了年岁。但，无论是我的青春还是这条胡同，再也无法回到过去了。岁月依然流逝，一切终将过去，青春之所以美丽，恐怕这就是原因。年岁渐长，那些鲜活的快乐，再也无法回去。涌出眼泪的青涩岁月，我也有过，这种青春。</p><p>那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。</p><p>暧昧就应该发生在秋天，温温吞吞，犹豫不决，两个人之间的关系像天气时冷时暖，一会儿靠近冬天一会儿靠近夏天，这种季节很难穿对衣服，像是愁着不知道对他该说什么话，想着怎样能平缓地推进这段感情。</p><p>山河多如故，故人长孤独</p><p>看春风不喜，看夏蝉不烦，看秋风不悲，看冬雪不叹</p><p>虽然幸苦，我还是选择哪种滚烫的人生–北野武</p><p>如何渡一生？山前停马蹄，绿水揉春风，林间耸翠入眼，崖前无尽深渊。行到星子入夜，白鹿饮溪边，风声渐停，万事都成空</p><p>热爱可抵岁月漫长</p><p>自然多好啊，有夏蚕有冬雪，有白昼有黑夜，有一切祥和与安宁。不像人间，循规蹈矩，满目荒唐</p><p>城市堕入温柔的困意，月亮枕在枝头开始醒着眼睛</p><p>我熬落霞一壶，饮星月一盅，披风雪一裳，织山川一卷。灯影泛舟，鲜衣抚琴，逆风执酒，倚轩祭情，夜为渔歌，上下四方为枕，古往今来为裘</p><p>读书不是为了雄辩和驳斥，也不是为了轻信和盲从，而是为了思考和权衡。很多人觉得他们在思考，而实际上他们只是在重新整理自己的偏见。</p><p>我们总是喜欢拿 顺其自然 来敷衍人生道路上的荆棘坎坷，却很少承认 真正的顺其自然，其实是竭尽所能之后的不强求 而非两手一摊的不作为</p><p>真正强大的人，从来不需要去碾压别人，更不会表现出极端的强势。相反，他们非常柔和，让人如沐春风，但身上却自带强大的气场，在智慧与见识的支撑下，让人倾倒，而不是浑身带刺，思想偏激，令人敬而远之！</p><p>如果你重要的人去世了，你感到十分悲伤，你痛苦了好久，但是突然有一天你开始不再感到悲伤，你感到有了一股力量，你有了振作的力量，你开始做美好的事情，说不定就是对方舍不得你悲伤，回来拥抱了一下你。</p><p>我希望你能活出最精彩的自己” “我希望你能见识到令你惊奇的事物” “我希望你能体验从未有过的情感” “我希望你能遇见一些想法不同的人” “我希望你能为你自己的人生感到骄傲” “如果你发现自己还没有做到” “我希望你有勇气重头再来</p><p>把诗和蓝莓酱抹在荞麦面包上 用树隙里的阳光做件毛坎肩 跟猫狗以及啄窗的小麻雀说说话 往深夜的咖啡杯里倒进碎星星 在心里装一个小女孩儿 你如果爱着生活 生活一定比谁都清楚</p><p>人生海海，谁人不是举步踉跄，孤独前往。但这世界啊，美便在于，有人是照耀他人的光，有人是等待黎明的夜。孤独不会消失，灵魂却可相拥。但愿你，是那一束拥抱他人的光，无惧黑夜与孤独</p><p>我在黄昏写上一封书信,载着落日的余晖和银河的浪漫。寄给你,寄给温柔本身。</p><p>所有的失败都是上帝在考验你是否真的热爱</p><p>空气是溶解的花，山谷是沉睡的马，蝴蝶是飘走的画，秃鹰是矗立的塔。</p><p>海的皱纹还给风 昆虫的秘密还给冬 也请把我孤勇归还给我</p><p>外向是生活所需 孤独是自我享受</p><p>我们这群人 苦没有真正苦过 爱没有用力爱过 每天受着信息大潮的冲击 三观未定又备受曲折 贫穷不再是正义 又妄图不让金钱成为唯一的追求 过早看到了更大的世界 勤奋却又不过三天 热血透不过键盘和屏幕 回忆止于游戏 像一群没有根的孩子 在别人的经历和精神里吵闹</p><p>每个优秀的人，都有一段沉默的时光。 那段时光，是付出了很多努力，却得不到结果的日子，我们把它叫作扎根</p><p>我生来平平淡淡，没有显赫家世，没有倾城面貌。惊艳不了青春，斑驳不了岁月。可我依然想温暖时光，饱读诗书，努力弥补我这平淡出生，后期绚烂绽放。</p><p>这个世界太危险，时间就该浪费在美好的事物上。</p><p>我本是于你袖口取暖的晚星，抖落间却无意挟了满身春风。</p><p>盛夏的尾巴，喧哗浮躁，浅浅的疼，和心上不经意的悸动，都像老宅后院种着的梨花树。</p><p>我眼见的雪月，耳听的风雷，食得的酸甜，触到的温凉，连同轻轻的落笔声儿一起藏进信封里，在月亮很美的夜里，悄悄递给你。</p><p>我喜欢听老年人说自己幼时的事 人到老年还不能忘的记忆 大约有点像太湖底下捞起的石头 是洗净尘泥后的硬瘦剔透 上面附着一生岁月所冲积洗刷出的浪痕</p><p>特别喜欢那种气质清冷的人，好似这世间纷乱无一事能扰得了他的心，没有过分热络的样子，没有讨好世间的谄笑，他们眼中只有脚下的路，眸子里从不掺杂多余的情绪，却也不是冷漠，只不过将此生所有的柔情都留给了生命里最重要的人，与旁人只是淡淡如水的交情，却也装着漫不经心的样子，关注着身旁陌路的老人和小孩，随意伸手就帮了，善良的不着痕迹。</p><p>山风微微，像月下晃动的海浪，温和而柔软，停留在背后的时光，变成小时候听过的故事。在遥远的城市，陌生的地方，有他从未见过的山与海。</p><p>要一个黄昏 满是风 和正在落下的夕阳 如果麦子刚好熟了 炊烟恰恰升起 那只白鸽贴着水面飞过 栖息于一棵芦苇 而芦苇正好准备了一首曲子 如此 足够我爱这破碎泥泞的人间</p><p>我们终会在人生的更高处相见。 我想见你，地点你选。 森林 沙漠 夜晚宁静的湖边。 草原 大海 清晨微雾的街头。 只是…只是别在梦里。 晚安</p><p>前程似锦 未来可期 寻得良人 共赴白头 祝你也祝我。</p><h2 id="Part-Nine"><a href="#Part-Nine" class="headerlink" title="Part Nine"></a>Part Nine</h2><p>没有专注力的人生，就仿佛大睁着双眼却什么也看不见。——《眠》</p><p>一样是明月 一样是隔山灯火 满天的星 只有人不见 梦似的挂起 ——林徽因</p><p>卒子一过河，或动或静都没有回头的路。人生中一个决定牵动另一个决定，一个偶然注定另一个偶然，因此偶然从来不是偶然，一条路势必走向下一条路，回不了头。我发现，人生中所有的决定，其实都是不回头的“卒”。——《亲爱的安德烈》</p><p>谁终将声震人间，必长久深自缄默；谁终将点燃闪电，必长久如云漂泊。——尼采</p><p>我们所有的词语，不过是思想筵席上散落下的碎食屑。——纪伯伦</p><p>很多人一辈子都不会遇见你梦想的真爱。只会因为害怕孤独地死去而选择随便找个人，互相饲养。——塞内加</p><p>当夏季死时，所有的莲都殉情——余光中</p><p>与海为邻，住在无尽蓝的隔壁，却无壁可隔，一无所有，却拥有一切——余光中</p><p>最是那一低头的温柔，像一朵水莲花不胜凉风的娇羞——徐志摩</p><p>我是天空里的一片云，偶尔投影在你的波心——徐志摩</p><p>我想攀附月色，化一阵清风，吹醒群松春醉，去山中浮动；吹下一枝新碧，掉在你窗前；轻柔如同叹息——不惊你安眠！——徐志摩</p><p>背后是空旷的蓝绿色的天，蓝得一点渣子也没有——有是有的，沉淀在底下，黑漆漆、亮闪闪、烟烘烘、闹嚷嚷的一片——那就是上海。——张爱玲</p><p>丛林中潮气未收，又湿又热，虫类唧唧地叫着，再加上蛙声阁阁，整个的山洼子像一只大锅，那月亮便是一团蓝阴阴的火，缓缓的煮着它，锅里水沸了，嘟嘟的响。——张爱玲</p><p>你用温热的手指划去窗上的雾气，看见了窗子外层无数晶莹的雨滴。新的雾气又朦上来了，你还是用手指去划，划着划着，终于划出了思念中的名字。——余秋雨</p><p>我多愿自己是一份千研万磨后的香醇，并且慎重地斟在一只洁白温暖的厚瓷杯里，带动一个美丽的清晨。——张晓风</p><p>安静是一种很有力量的氛围。正如一只装满液体的瓶子，摇晃过后，一旦安放在桌子上就会出现沉淀物。人也是如此，经过动乱后的冷静思考，可以凸现出人性中不为人知的潜藏部分。——茨威格《断头王后》</p><p>什么是似水流年？就如一个人中了邪躺在河底，眼看潺潺流水，波光粼粼，落叶，浮木,空玻璃瓶,一样一样从身上流过去。- 王小波</p><p>真正的兴趣，或许像一只狡猾的小狐狸，潜伏在草丛中睡不醒。只有“广泛爱好”这张巨大的网铺天盖地罩下来，才有可能把小狐狸捕获，让我们受益终身。——毕淑敏</p><p>人生这么短，抢命似的活是唯一的方法，我不愿慢吞吞地老死。——三毛</p><p>晶莹纯洁的雪花，我期待着你下凡。你，栽种在蓝天上的花瓣。——《雪》图多尔·阿尔盖齐</p><p>所谓父母，就是那不断对着背影既欣喜又悲伤、想追回拥抱又不敢声张的人。——龙应台</p><p>花自飘零水自流。一种相思，两处闲愁。此情无计可消除，才下眉头，却上心头。——李清照</p><p>与恶龙缠斗过久，自身亦成为恶龙; 凝视深渊过久，深渊将回以凝视。——尼采</p><p>一个人就是一片荒原，偶尔有房客，有雷声，有春暖花开。——余秀华</p><p>月光还是少年的月光，九州一色还是李白的霜。 ——余光中《独白》</p><p>我年华虚度，空有一身疲倦。——海子</p><p>吹灭读书灯，一身都是月。——孙玉石</p><p>每个人都是月亮，总有一个阴暗面，从来不让人看见。——马克吐温</p><p>看山坡上的羊群浑身洁白，一生只热爱青草。——海桑</p><p>生活最佳状态是冷冷清清地风风火火。——木心《云雀叫了一整天》</p><h2 id="Part-Ten"><a href="#Part-Ten" class="headerlink" title="Part Ten"></a>Part Ten</h2><p>你要不顾一切让自己变得漂亮，即使是在那些糟糕的日子里。——勺布斯</p><p>脆弱的人才会四处游说自己的不幸，坚强的人只会不动声色地强大。——《Free Loop》热评</p><p>那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行。如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。——北岛《波兰来客》</p><p>我觉得你很像一个终生跋涉的香客，不停地寻找一座根本不存在的神庙。——毛姆《月亮与六便士》</p><p>所以不要回首，往前看，只有这样，生活才会揭示在我们眼前。——小野洋子</p><p>万物生长，又何曾顾及他人的目光。——刘庆祥</p><p>如果一个人必须完成一件自己不喜欢的事，最好的办法就是尽快做好，然后结束。——《起舞》</p><p>你所看到的风景，记忆中的东西，对事物的理解，都取决于你站在何处。——琳乌尔曼《喧嚣》</p><p>人说，背上行囊，就是过客；放下包袱，就找到了故乡。——白落梅</p><p>一定要爱着点什么，恰似草木对光阴的钟情。——汪曾祺《人间草木》</p><p>对待生命，你不妨大胆一点，因为我们始终要失去它。——尼采</p><p>低调是为了生活在自己的世界里，高调是为了生活在别人的世界里。——冯骥才</p><p>沉淀后我愿意做个温暖的人，有自己的喜好，有自己的原则，有自己的信仰，不急功近利，不浮夸轻薄。宠辱不惊，淡定安逸，心静如水，不忘初心，方得始终。——凌茜</p><p>我只身前行，却仿佛带着一万雄兵。——玛雅安吉罗</p><p>真正的平静，不是避开车马喧嚣，而是在心中修篱种菊。——《林徽因传》</p><p>当改变命运的时刻降临，犹豫就会败北。——茨威格《人类群星闪耀时》</p><p>高级的感情，最终沦为精神和意识；低级的感情，只能沦为脾气和情绪。——《春宴》</p><p>所谓浮躁，也就是时时刻刻，希望以最短的时间，博取最多的存在感、优越感和自我认同。——张佳玮</p><p>人生的旅程就是这样，用大把时间迷茫，在几个瞬间成长。——瑞卡斯</p><p>浑身都是刺，别人才会照顾你的感受。你软绵绵的，是人都想揉一把，多舒服。</p><p>而月光衣我以华裳。——席慕容《山月》</p><p>每个人都在愤世疾俗，每个人又都在同流合污。——『自由在高处』</p><p>一星陨落，黯淡不了星空灿烂；一花凋零，荒芜不了整个春天。——巴尔扎克</p><p>我荒废了时间，时间便把我荒废了。——莎士比亚</p><p>只有流过血的手指，才能弹出世间的绝唱。——泰戈尔</p><p>夜暗方显万颗星，灯明始见一缕尘。——七堇年</p><p>我从来不是那样的人，不能耐心的拾起一地碎片，把他们凑合在一起，然后对自己说，这个修补好了的东西，跟新的完全一样，一样东西破碎了就是破碎了，我宁愿记住它最好时的模样，而不想把它修补好，然后终身看着那些破碎了的地方</p><p>因为害怕自己并非明珠，而不敢刻苦琢磨，又因为有几分相信自己是明珠，而不能与沙砾碌碌为伍，遂逐渐远离世间，疏避人群，结果在内心不断地，用愤懑和羞怒，饲育着自己懦弱的自尊心   《山月记》</p><p>生命从来不曾离开过孤独而独立存在，无论我们出生、我们成长，我们相爱还是我们成功失败，直到最后的最后，孤独犹如影子一样，存在于生命的一隅  《百年孤独》</p><p>我始终认为一个人，可以很天真简单的活下去，必是身边无数人，用更大的代价守护而来的《小王子》</p><p>你一抬眼，便乱了我的人间，那就在一起，黄昏与四季，我想我的故事都关于你，我想我的梦里都会出现你，我想我的情话都要说给你，喜欢你，是我终生浪漫的开始。</p><p>我不看月亮也不说想你，这样你和月亮都蒙在鼓里，风行过万里，月沉入海底，我遇见了世界上的一切，却只喜欢你</p><p>见山是山，见海是海，见花便是花，唯独遇见你，云海开始翻涌，江潮开始澎湃，你无需开口，我和天地万物便通通奔向你，我想把这满天星河送给你，希望你像孩子一样快乐，像天上的星星一样闪亮，像风一样自由。</p><p>也许爱情只是一段尽可能的长久陪伴，长到四季穿过晚霞，长到青丝抽离成白发，长到你我的余生岁月熬成一碗粥，悲喜共享，二两桃花酿作酒，万分不及你温柔。</p><p>我喜欢你，像风走了八万里，不问归期。像云漂泊九万里，不曾歇息。像酒香飘了三千里，不带醉意。像日光撒满大地，温柔惬意。</p><h2 id="富含哲理的句子"><a href="#富含哲理的句子" class="headerlink" title="富含哲理的句子"></a>富含哲理的句子</h2><p>人生如落叶，顺应自然，随遇而安，一切均需随时，随地，随便，更需随缘。不为外界的干扰而自寻烦恼，不为外力的侵蚀而自弃，应像落叶一样，用自己的一生闪现出四季不同的色彩。</p><p>人生而自由，却无往不在枷锁中   –卢梭</p><p>每一个不曾起舞的日子，都是对生命的辜负   –尼采</p><p>往外张望的人在做梦，向内审视的人才清醒–卡尔荣格</p><p>人们爱上的往往都是与他们相似的人，或是他们曾经的那种人，或是他们想要成为的人–弗洛伊德</p><p>一个人能否有成就，只要看他是否具备自尊心与自信心两个条件–苏格拉底</p><p>我犯错时，人尽皆知；而我说谎时，却无人察觉–歌德</p><p>这个世界的问题在于，聪明人充满疑惑，而傻子们坚信不疑–罗素</p><p>没有所谓的‘玩笑’，所有的‘玩笑’都有认真的成分–弗洛伊德</p><p>当你凝聚深渊时，深渊也在凝聚着你–尼采</p><p>何必为生命的一个片段而哭泣，我们整个人生都催人泪下–塞涅卡</p><p>你担心什么，什么就控制你–约翰洛克</p><p>只有知道了书的结尾，才能真正懂得书的开头–叔本华</p><p>痛苦来临时，不要总问：“为什么偏偏是我？” 因为快乐降临时，你可没有问这个问题。</p><p>一个人的性格决定你的境遇，如果你坚持保留你的性格，那你就无权拒绝你的境遇–罗曼罗兰</p><p>情商一定是让别人和自己都舒服，如果让别人舒服，自己却很痛苦，那不叫情商，叫智障–霍普金斯</p><p>人类之所以进步，是因为下一代不听上一代的话–毛姆</p><p>考虑别人的感受之前，不妨再考虑一下别人有没有考虑你的感受–科尔姆·托宾</p><p>人一旦有了省钱的脑子，就不会有精力，培养一个挣钱的胆子–乔布斯</p><p>永远要保密的三件事，感情状态，你的情绪和你要做的事–西格蒙特·弗洛伊德</p><p>打断你的腿，再给你一副拐杖，然后告诉你没有我你连路都走不了，所以你要感恩。–鲁迅</p><p>真正的自由不是你想做什么就做什么，自由是你不想做什么，就可以不做什么–康德</p><p>这个世界上有两种人，一种是快乐的猪，一种是痛苦的人。做痛苦的人，不做快乐的猪。–苏格拉底</p><p>乞丐并不会妒忌百万富翁，但是他肯定会妒忌收入更高的乞丐。–罗素</p><p>一个人知道自己为什么而活，就可以忍受任何一种生活–尼采</p><p>发怒，是用别人的错误来惩罚自己–康德</p><p>生活得最有意义的人，并不是年岁活得最长的人，而是对生活最有感受的人。–卢梭</p><p>敌人变成朋友，就比朋友可靠。但朋友变成敌人，就比敌人更危险。–罗素</p><p>当老鼠嘲笑猫的时候，它身边必定有个洞。当三个人突然冷落你的时候，他身边必定有条狗–罗素</p><p>没有永远的朋友，没有永远的敌人，只有永远的利益–丘吉尔</p><p>不是读书没用，是你读的那点破书没用，多花时间塑造自己，少花时间研究别人–罗素</p><p>人际交往的高段位技巧：热情、大方、一问三不知。–王朔</p><h2 id="美文美句"><a href="#美文美句" class="headerlink" title="美文美句"></a>美文美句</h2><p>“人生不是要等待暴风雨过去，而是要学会在雨中跳舞。” - 崔健</p><p>“最终，我们只会记住那些令我们心碎的事情，因为它们曾经让我们的心充满温暖。” - 乔治·萧伯纳</p><p>“我们无法选择人生的起点，但我们可以选择人生的终点。” - 杰西·杰克逊</p><p>“美丽的事物在等待着我们，只要我们愿意抬起头，放下焦虑，去发现它们。” - 匿名</p><p>“在黑暗中寻找星星，即使只有微光，也足以指引我们前进。” - 莎拉·威廉姆斯</p><p>“不要害怕失败，害怕的应该是从未尝试过。” - 玛丽莎·梅耶尔</p><p>“世界上最美的事物无法被看见或者触摸，它们只能用心去感受。” - 安东尼·德·圣-埃克苏佩里</p><p>“真正的旅行是心灵的旅行，而不仅仅是身体的移动。” - 亚历山大·冯·洪堡</p><p>“无论你多么渺小，只要你燃烧起自己的光芒，就能驱散黑暗。” - 奥古斯特·威廉姆·赫夫曼</p><p>“爱是唯一能够战胜时间的力量。” - 雪莱</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scientific research center(AI,Deep-Learning,Computer-Vision)</title>
      <link href="/2023/05/22/scientific-research-center/"/>
      <url>/2023/05/22/scientific-research-center/</url>
      
        <content type="html"><![CDATA[<h2 id="顶会文章"><a href="#顶会文章" class="headerlink" title="顶会文章"></a>顶会文章</h2><p>Neural IPS <a href="https://proceedings.neurips.cc/paper/2020">https://proceedings.neurips.cc/paper/2020</a><br>CVPR <a href="https://openaccess.thecvf.com/CVPR2020">https://openaccess.thecvf.com/CVPR2020</a><br>(CVPR) <a href="http://dblp.uni-trier.de/db/conf/cvpr/index.html">http://dblp.uni-trier.de/db/conf/cvpr/index.html</a><br>WACV ICCV CVPR <a href="https://openaccess.thecvf.com/menu">https://openaccess.thecvf.com/menu</a><br>ICCV <a href="https://openaccess.thecvf.com/ICCV2021">https://openaccess.thecvf.com/ICCV2021</a><br>(ICCV) <a href="http://www.informatik.uni-trier.de/~ley/db/conf/iccv/index.html">http://www.informatik.uni-trier.de/~ley/db/conf/iccv/index.html</a><br>ECCV <a href="https://www.ecva.net/papers.php">https://www.ecva.net/papers.php</a>   <a href="https://openaccess.thecvf.com/ECCV2018">https://openaccess.thecvf.com/ECCV2018</a><br>(ECCV) <a href="http://www.informatik.uni-trier.de/~ley/db/conf/eccv/index.html">http://www.informatik.uni-trier.de/~ley/db/conf/eccv/index.html</a><br>ICLR <a href="https://www.paperdigest.org/2021/01/iclr-2021-highlights/">https://www.paperdigest.org/2021/01/iclr-2021-highlights/</a><br>(ICLR) <a href="https://openreview.net/group?id=ICLR.cc/2022/Conference#accept-poster">https://openreview.net/group?id=ICLR.cc/2022/Conference#accept-poster</a><br>AAAI <a href="https://aaai.org/proceeding/aaai-33-2019/">https://aaai.org/proceeding/aaai-33-2019/</a><br>TPAMI <a href="https://www.datalearner.com/academic/journal/detail/0162-8828">https://www.datalearner.com/academic/journal/detail/0162-8828</a><br>计算机视觉、图像处理顶会顶刊历年论文链接 <a href="https://zhuanlan.zhihu.com/p/456057729">https://zhuanlan.zhihu.com/p/456057729</a><br>Aminer论文查询 <a href="https://www.aminer.cn/">https://www.aminer.cn/</a></p><h2 id="有代码的Paper"><a href="#有代码的Paper" class="headerlink" title="有代码的Paper"></a>有代码的Paper</h2><p>Browse State-of-the-Art <a href="https://paperswithcode.com/sota">https://paperswithcode.com/sota</a>   同一个 <a href="https://codeocean.com/">https://codeocean.com/</a><br>Code Ocean <a href="https://codeocean.com/">https://codeocean.com/</a><br>Model Zoo、Open Model Zoo <a href="https://github.com/openvinotoolkit/open_model_zoo">https://github.com/openvinotoolkit/open_model_zoo</a></p><h2 id="图像分割"><a href="#图像分割" class="headerlink" title="图像分割"></a>图像分割</h2><p>深入理解深度学习分割网络Ｕnet <a href="https://blog.csdn.net/qq_42450404/article/details/91415295">https://blog.csdn.net/qq_42450404/article/details/91415295</a><br>图像分割评价标准及代码 <a href="https://blog.csdn.net/qq_42450404/article/details/93048736">https://blog.csdn.net/qq_42450404/article/details/93048736</a><br>FCN的学习及理解(图像分割的milestone) <a href="https://blog.csdn.net/qq_36269513/article/details/80420363">https://blog.csdn.net/qq_36269513/article/details/80420363</a><br>一文读懂VGG网络 <a href="https://zhuanlan.zhihu.com/p/41423739">https://zhuanlan.zhihu.com/p/41423739</a><br>图像处理特征可视化方法总结（特征图、卷积核、类可视化CAM）(附代码) <a href="https://zhuanlan.zhihu.com/p/420954745">https://zhuanlan.zhihu.com/p/420954745</a></p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>Heart-Disease-Data-Set <a href="https://github.com/lanruo6037/Heart-Disease-Data-Set">https://github.com/lanruo6037/Heart-Disease-Data-Set</a><br>breast cancer数据集 <a href="https://blog.csdn.net/wangyuankl123/article/details/102777014">https://blog.csdn.net/wangyuankl123/article/details/102777014</a><br>医学图像数据集汇总 <a href="https://zhuanlan.zhihu.com/p/102855802">https://zhuanlan.zhihu.com/p/102855802</a><br>Mendeley Data <a href="https://data.mendeley.com/research-data/">https://data.mendeley.com/research-data/</a>?<br>使用CNNs网络，基于caltech 101数据集实现分类 <a href="https://blog.csdn.net/cough777/article/details/112534121">https://blog.csdn.net/cough777/article/details/112534121</a><br>mini-imagenet-tools <a href="https://github.com/search?p=3&q=imagenet&type=Repositories">https://github.com/search?p=3&amp;q=imagenet&amp;type=Repositories</a><br>CV Datasets on the web <a href="http://www.cvpapers.com/datasets.html">http://www.cvpapers.com/datasets.html</a><br>pytorch_训练CIFAR数据集 <a href="https://www.cnblogs.com/wangxiaobei2019/p/12987332.html">https://www.cnblogs.com/wangxiaobei2019/p/12987332.html</a></p><h2 id="对抗攻击-x2F-防御相关"><a href="#对抗攻击-x2F-防御相关" class="headerlink" title="对抗攻击&#x2F;防御相关"></a>对抗攻击&#x2F;防御相关</h2><p>宝藏博主：<a href="https://blog.csdn.net/enjoy_endless/category_9547990.html">https://blog.csdn.net/enjoy_endless/category_9547990.html</a><br>视觉对抗攻击\对抗样本综述 <a href="https://zhuanlan.zhihu.com/p/96030596">https://zhuanlan.zhihu.com/p/96030596</a><br>庞天宇知乎 <a href="https://www2.zhihu.com/people/pang-tian-yu/answers">https://www2.zhihu.com/people/pang-tian-yu/answers</a><br>马行军 <a href="http://xingjunma.com/">http://xingjunma.com/</a>    <a href="https://scholar.google.com/citations?user=XQViiyYAAAAJ&hl=zh-CN&oi=sra">https://scholar.google.com/citations?user=XQViiyYAAAAJ&amp;hl=zh-CN&amp;oi=sra</a><br>马行军ResearchGate <a href="https://www.researchgate.net/profile/Xingjun-Ma">https://www.researchgate.net/profile/Xingjun-Ma</a><br>EYD与机器学习 <a href="https://zhuanlan.zhihu.com/p/67320040">https://zhuanlan.zhihu.com/p/67320040</a>  另一个 <a href="https://www.zhihu.com/column/c_170476465">https://www.zhihu.com/column/c_170476465</a> 另一个 <a href="https://www.zhihu.com/people/shui-jian-qing-yi-qian/posts">https://www.zhihu.com/people/shui-jian-qing-yi-qian/posts</a><br>对抗样本学习笔记 <a href="https://www.zhihu.com/column/c_1147086423579656192">https://www.zhihu.com/column/c_1147086423579656192</a><br>awesome-adversarial-attack-and-defense-papers <a href="https://github.com/JinkaiZheng/awesome-adversarial-attack-and-defense-papers">https://github.com/JinkaiZheng/awesome-adversarial-attack-and-defense-papers</a><br>adversarial-attacks-pytorch <a href="https://github.com/Harry24k/adversarial-attacks-pytorch">https://github.com/Harry24k/adversarial-attacks-pytorch</a><br>搜论文的网站semanticscholar <a href="https://www.semanticscholar.org/">https://www.semanticscholar.org/</a><br>自己添加正则化 <a href="https://blog.csdn.net/qq_40929402/article/details/117961424">https://blog.csdn.net/qq_40929402/article/details/117961424</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Anaconda-用conda创建python虚拟环境 <a href="https://zhuanlan.zhihu.com/p/94744929">https://zhuanlan.zhihu.com/p/94744929</a><br>下载whl文件 <a href="https://pypi.tuna.tsinghua.edu.cn/simplel/">https://pypi.tuna.tsinghua.edu.cn/simplel/</a><br>Conda在断网时创建虚拟环境 conda create -n example –offline<br>pytorch安装-国内镜像源 <a href="https://blog.csdn.net/gg864461719/article/details/112259806">https://blog.csdn.net/gg864461719/article/details/112259806</a><br>win10下安装anaconda+pytorch_gpu+pycharm配置 <a href="https://www.pianshen.com/article/58061298426/">https://www.pianshen.com/article/58061298426/</a></p><h2 id="教学"><a href="#教学" class="headerlink" title="教学"></a>教学</h2><p>B站刘二大人：框架讲解 <a href="https://www.bilibili.com/video/BV1Y7411d7Ys?p=11">https://www.bilibili.com/video/BV1Y7411d7Ys?p=11</a><br>PyTorch 深度学习实践 第11讲 <a href="https://blog.csdn.net/bit452/article/details/109693790">https://blog.csdn.net/bit452/article/details/109693790</a><br>PyTorch 深度学习实践 <a href="https://blog.csdn.net/bit452/category_10569531.html">https://blog.csdn.net/bit452/category_10569531.html</a><br>蜻蜓点论文：<a href="https://space.bilibili.com/17529417/channel/detail?cid=181020">https://space.bilibili.com/17529417/channel/detail?cid=181020</a><br>Valse 视觉与学习青年学者研讨会 <a href="http://valser.org/">http://valser.org/</a>    <a href="http://valser.org/article-358-1.html">http://valser.org/article-358-1.html</a><br>PyTorch中文文档 <a href="https://pytorch-cn.readthedocs.io/zh/latest/">https://pytorch-cn.readthedocs.io/zh/latest/</a><br>极市开发者社区<br>arXivDaily 机器学习每日论文速递 <a href="https://zhuanlan.zhihu.com/p/357445929">https://zhuanlan.zhihu.com/p/357445929</a><br>C语言中文网 <a href="http://c.biancheng.net/view/2380.html">http://c.biancheng.net/view/2380.html</a><br>秋刀鱼的炼丹工坊(论文视频讲解) <a href="https://space.bilibili.com/823532?spm_id_from=333.788.b_765f7570696e666f.1">https://space.bilibili.com/823532?spm_id_from=333.788.b_765f7570696e666f.1</a><br>计算机+人工智能 <a href="https://space.bilibili.com/338257493?spm_id_from=333.788.b_765f7570696e666f.1">https://space.bilibili.com/338257493?spm_id_from=333.788.b_765f7570696e666f.1</a><br>深度学习顶级论文算法详解 <a href="https://www.bilibili.com/video/BV1Ut411L7Cg/?spm_id_from=333.788.recommend_more_video.2">https://www.bilibili.com/video/BV1Ut411L7Cg/?spm_id_from=333.788.recommend_more_video.2</a><br>论文视频讲解 <a href="https://space.bilibili.com/18161609?spm_id_from=333.788.b_765f7570696e666f.2">https://space.bilibili.com/18161609?spm_id_from=333.788.b_765f7570696e666f.2</a>      <a href="https://space.bilibili.com/24460257?spm_id_from=333.788.b_765f7570696e666f.1">https://space.bilibili.com/24460257?spm_id_from=333.788.b_765f7570696e666f.1</a><br>pytorch加载自己的数据集，数据集载入-视频合集 <a href="https://www.bilibili.com/video/BV1354y1s7kQ/?p=3&spm_id_from=pageDriver">https://www.bilibili.com/video/BV1354y1s7kQ/?p=3&amp;spm_id_from=pageDriver</a><br>Pytorch 一步一步训练自己的数据集dog&amp;cat <a href="https://www.bilibili.com/video/BV15J411w7U2/?spm_id_from=333.788.recommend_more_video.1">https://www.bilibili.com/video/BV15J411w7U2/?spm_id_from=333.788.recommend_more_video.1</a><br>Pytorch 如何在vgg16基础上Finetune（迁移） <a href="https://www.bilibili.com/video/BV1sJ411w73G/?spm_id_from=333.788.recommend_more_video.8">https://www.bilibili.com/video/BV1sJ411w73G/?spm_id_from=333.788.recommend_more_video.8</a><br>深度之眼官方账号：<a href="https://www.bilibili.com/video/BV1mi4y1776u?p=5">https://www.bilibili.com/video/BV1mi4y1776u?p=5</a><br>元学习汇总 <a href="https://github.com/floodsung/Meta-Learning-Papers">https://github.com/floodsung/Meta-Learning-Papers</a><br>对比学习合集 <a href="https://github.com/coder-duibai/Contrastive-Learning-Papers-Codes#adversarial-learning">https://github.com/coder-duibai/Contrastive-Learning-Papers-Codes#adversarial-learning</a></p><h2 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h2><p>开源模块化前端UI框架 <a href="https://www.layui.com/">https://www.layui.com/</a><br>JS VUE <a href="https://www.runoob.com/vue2/vue-start.html">https://www.runoob.com/vue2/vue-start.html</a><br>爬虫资源网站  <a href="https://book.apeland.cn/details/12/">https://book.apeland.cn/details/12/</a></p><h2 id="资源网站"><a href="#资源网站" class="headerlink" title="资源网站"></a>资源网站</h2><p>下载论文sci-hub  <a href="https://www.sci-hub.ren/">https://www.sci-hub.ren/</a><br>查询计算机视觉相关的文章引用关系paperconnect <a href="https://www.connectedpapers.com/">https://www.connectedpapers.com/</a><br>各个视觉子领域的SOTA排名，paperswithcode <a href="https://paperswithcode.com/">https://paperswithcode.com/</a><br>不错的算法电子书《labuladong的算法小抄》 <a href="https://labuladong.github.io/algo/">https://labuladong.github.io/algo/</a><br>收藏猫插件（一些谷歌浏览器插件）<a href="https://chrome.pictureknow.com/">https://chrome.pictureknow.com/</a><br>微软会议管理工具CMT 直接可以查询最近的会议，邮箱注册账号即可管理相关的会议的投稿 <a href="https://cmt3.research.microsoft.com/">https://cmt3.research.microsoft.com</a><br>overleaf-在线latex编辑器 <a href="https://cmt3.research.microsoft.com/">https://cmt3.research.microsoft.com</a><br>latex符号、图片、公式转换器 <a href="https://www.latexlive.com/">https://www.latexlive.com/</a><br>计算机视觉牛人博客和代码汇总 <a href="http://www.javashuo.com/article/p-npwjvuxa-by.html">http://www.javashuo.com/article/p-npwjvuxa-by.html</a></p><h2 id="资源网站2"><a href="#资源网站2" class="headerlink" title="资源网站2"></a>资源网站2</h2><p>菜鸟学习教程 <a href="https://www.runoob.com/">https://www.runoob.com/</a><br>SQLite源码分析 <a href="http://huili.github.io/vdbemem/vdbememsqliteintro.html">http://huili.github.io/vdbemem/vdbememsqliteintro.html</a><br>java基础和高级 <a href="https://www.bilibili.com/video/BV1yJ411H78q/?from=search&seid=2631966004868136999&vd_source=2713766b5122c1cad8cd5af1aea074fa">https://www.bilibili.com/video/BV1yJ411H78q/?from=search&amp;seid=2631966004868136999&amp;vd_source=2713766b5122c1cad8cd5af1aea074fa</a></p><h2 id="论文研究方向"><a href="#论文研究方向" class="headerlink" title="论文研究方向"></a>论文研究方向</h2><p>1、医学图像处理，图像处理<br>2、目标检测，自监督半监督<br>3、图神经网络，知识图谱<br>4、Transformer，人体姿态估计<br>5、多模态，扩散模型<br>6、NLP，推荐系统<br>7、小样本学习，遥感影像<br>8、时间序列，联邦学习<br>9、图像分割，语音识别<br>10、点云，提示学习<br>11、SAM，ChatGPT<br>12、自动驾驶，强化学习<br>13、三维重建，预训练<br>14、知识蒸馏，NERF</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The world of outside</title>
      <link href="/2023/05/10/the-world-of-outside/"/>
      <url>/2023/05/10/the-world-of-outside/</url>
      
        <content type="html"><![CDATA[<h2 id="1、18-Best-Youtube-Channels-to-Watch-in-2023"><a href="#1、18-Best-Youtube-Channels-to-Watch-in-2023" class="headerlink" title="1、18 Best Youtube Channels to Watch in 2023"></a>1、18 Best Youtube Channels to Watch in 2023</h2><p>1Kurzgesagt<br>2AlternateHistoryHub<br>3Veritasium<br>4FitnessBlender<br>5Good Mythical Morning<br>6Girlfriend Reviews<br>7PewDiePie<br>8MrBeast<br>9Tasty<br>10The School of Life<br>11TED-Ed<br>12The Dodo<br>13Vanity Fair<br>14Marques Brownlee<br>15Tifo Football<br>16Llama Arts<br>17patrickJMT<br>18WIRED</p><p>Kurzgesagt (Science)：If you’re interested in learning more about science in a much more exciting way than reading books, then look no further than Kurzgesagt. Philipp Detmer founded this channel, and he created animated educational videos.</p><p>AlternateHistoryHub (History)：History can be an extremely complicated and messy topic to talk about. There are various arguments on whether the winning side wrote it, and sometimes we find new evidence that revises what was already written.</p><p>Veritasium (Science Experiments)：Like Kurzgesagt, Veritasium also talks about science. The difference is that this channel discusses the questions you think about every other day, more often than more complex topics. However, they still talk about and regularly conduct experiments to prove (and sometimes disprove) known scientific theories. </p><p>FitnessBlender (Fitness and Health)：While exercise is crucial to physical and mental health, finding the motivation and proper resources can be challenging. If you need a channel that fulfills all your fitness needs, look no further than FitnessBlender. </p><p>Good Mythical Morning (Comedy)：Good Mythical Morning is a channel hosted by Rhett and Link, internet comedians, where they would play games, do crazy experiments, and talk about some of the latest experiments.</p><p>Girlfriend Reviews (Gaming)：Playing video games is a ton of fun, but buying the latest games is often expensive. So sometimes, we need to watch the latest reviews to get a better idea of what the game’s all about and if it’s worth it or not.</p><p>PewDiePie (Gaming)：With more than 111 million subscribers, PewDiePie, a.k.a Felix Kjellberg, is currently the most subscribed YouTube creator. He primarily posts gaming videos on his channel, but does comedy sketches, meme reviews, and many more.</p><p>MrBeast (Entertainment)：MrBeast, real-name Jimmy Donaldson, posts many random yet attention-grabbing videos that will almost always go viral as he averages more than 50 million views on his videos! </p><p>Tasty (Culinary&#x2F;Food)：If you love to make (and eat) good food, then the Tasty YouTube channel has everything you need. They create short yet mouthwatering videos and give simple steps to make the delicious-looking food in their videos.</p><p>The School of Life (Education&#x2F;Life Lessons)：The School of Life is a YouTube channel and a real-life school that teaches adults all kinds of topics that many schools and parents often forget to teach their children, including:Philosophy，Literature，Psychotherapy，Relationships，And much more. Consisting of philosophers, psychologists, and writers, The School of Life posts many videos that can help us lead calmer lives, develop a better understanding of ourselves and others, and increase our confidence in dealing with our problems.</p><p>TED-Ed (Education)：TED-Ed posts “lessons worth sharing” in the form of short and curated educational videos discussing virtually any topic they think would fulfill their mission of spreading great ideas.</p><p>The Dodo (Animals)：While cats and dogs are usually in some of the most viral videos on YouTube, The Dodo posts various animals on their channel, regardless of their size.</p><p>Vanity Fair (Pop Culture)：Vanity Fair is originally a monthly magazine in the United States that talks about pop culture, fashion, and everything trending.</p><p>Marques Brownlee (Technology)：Marques Brownlee, or as he’s known professionally, MKBHD, is a tech-focused YouTuber that has over 15 million subscribers and more than 2.8 billion total video views. He’s one of the best, if not the best tech reviewer, on YouTube, and a former Senior VP of Google even lauded him as “the best technology reviewer on the planet right now.”</p><p>Tifo Football (Football&#x2F;Soccer)：They create insightful tactical breakdowns of football matches, talk about the history of some fascinating stories about football, and sometimes even cover geopolitical events in world football. </p><p>Llama Arts (Animation)：Llama Arts uploads animations of horror stories that Mr. Nightmare — another YouTuber — reads on his channel. They animate the stories from Mr. Nightmare’s channel to help viewers visualize them better.</p><p>PatrickJMT (Math)：Patrick, the creator of PatrickJMT, is a college mathematics instructor and creates math videos for all levels of education to help them get a better understanding of math principles and equations.</p><p>Wired (Technology)：Similar to Vanity Fair, Wired is also a monthly American magazine. However, Wired focuses more on technology rather than pop culture. </p><h2 id="2、Ted"><a href="#2、Ted" class="headerlink" title="2、Ted"></a>2、Ted</h2><p>1、The disappearing computer – and a world where you can take AI everywhere<br>In this exclusive preview of groundbreaking, unreleased technology, former Apple designer and Humane cofounder Imran Chaudhri envisions a future where AI enables our devices to “disappear.” He gives a sneak peek of his company’s new product – shown for the first time ever on the TED stage – and explains how it could change the way we interact with tech and the world around us. Witness a stunning vision of the next leap in device design.<br><a href="https://www.ted.com/talks/imran_chaudhri_the_disappearing_computer_and_a_world_where_you_can_take_ai_everywhere/c/transcript">https://www.ted.com/talks/imran_chaudhri_the_disappearing_computer_and_a_world_where_you_can_take_ai_everywhere/c/transcript</a></p><p>2、The inside story of ChatGPT’s astonishing potential<br><a href="https://www.ted.com/talks/greg_brockman_the_inside_story_of_chatgpt_s_astonishing_potential/transcript">https://www.ted.com/talks/greg_brockman_the_inside_story_of_chatgpt_s_astonishing_potential/transcript</a></p><h2 id="3、Interesting-WebSite"><a href="#3、Interesting-WebSite" class="headerlink" title="3、Interesting WebSite"></a>3、Interesting WebSite</h2><p>1、TED Talks (<a href="http://www.ted.com/">www.ted.com</a>): A collection of inspiring and thought-provoking talks by experts in various fields.</p><p>2、Atlas Obscura (<a href="http://www.atlasobscura.com/">www.atlasobscura.com</a>): A database of unusual and offbeat destinations, including hidden gems and obscure landmarks from around the world.</p><p>3、Duolingo (<a href="http://www.duolingo.com/">www.duolingo.com</a>): A language-learning platform that offers interactive lessons and exercises to help you learn new languages.</p><p>4、NASA’s Astronomy Picture of the Day (apod.nasa.gov&#x2F;apod&#x2F;astropix.html): A daily display of stunning astronomical images with explanations by professional astronomers.</p><p>5、Project Gutenberg (<a href="http://www.gutenberg.org/">www.gutenberg.org</a>): A digital library offering over 60,000 free eBooks, including classic literature, historical texts, and more.</p><p>6、Coursera (<a href="http://www.coursera.org/">www.coursera.org</a>): An online learning platform offering a wide range of courses from leading universities and institutions.</p><p>7、Sporcle (<a href="http://www.sporcle.com/">www.sporcle.com</a>): A trivia and quiz website where you can test your knowledge on various topics and challenge yourself.</p><p>8、Unsplash (<a href="http://www.unsplash.com/">www.unsplash.com</a>): A platform with a vast collection of high-quality, royalty-free images that you can use for personal or commercial purposes.</p><p>9、Khan Academy (<a href="http://www.khanacademy.org/">www.khanacademy.org</a>): An educational platform offering video lessons and interactive exercises on various subjects, from math and science to humanities and test preparation.</p><h2 id="4、When-you-Boring-somthing-you-can-do"><a href="#4、When-you-Boring-somthing-you-can-do" class="headerlink" title="4、When you Boring, somthing you can do"></a>4、When you Boring, somthing you can do</h2><p>1、Read a Book: Dive into a new novel, explore a non-fiction topic that interests you, or catch up on articles and blogs online.</p><p>2、Watch a Movie or TV Show: Pick something from your favorite genre or explore new films and series.</p><p>3、Listen to Music or a Podcast: Discover new artists, explore different genres, or tune in to an interesting podcast on a topic that intrigues you.</p><p>4、Engage in a Hobby: Whether it’s painting, playing an instrument, cooking, gardening, or crafting, spend time doing something you enjoy.</p><p>5、Exercise: Engage in physical activity to boost your mood and energy levels. You can go for a walk, jog, do a workout routine, or try out yoga or meditation.</p><p>6、Learn Something New: Take up a new skill or hobby, such as playing a musical instrument, learning a foreign language, coding, or cooking a new recipe.</p><p>7、Explore Nature: Take a walk in a nearby park, go hiking, have a picnic, or simply spend some time outside enjoying the fresh air and natural surroundings.</p><p>8、Engage in a Creative Activity: Draw, paint, write, or try any other form of creative expression to let your imagination flow.</p><p>9、Play Games: Whether it’s board games, video games, or puzzles, playing games can be a fun way to pass the time and challenge yourself.</p><p>10、Connect with Others: Reach out to friends or family members for a chat, organize a virtual hangout, or join an online community related to your interests.</p><h2 id="5、Here-are-some-reputable-sources-of-information"><a href="#5、Here-are-some-reputable-sources-of-information" class="headerlink" title="5、Here are some reputable sources of information"></a>5、Here are some reputable sources of information</h2><h3 id="General-News-and-Current-Affairs"><a href="#General-News-and-Current-Affairs" class="headerlink" title="General News and Current Affairs:"></a>General News and Current Affairs:</h3><p>BBC News<br>Reuters<br>The Associated Press<br>The New York Times<br>The Guardian</p><h3 id="Science-and-Technology"><a href="#Science-and-Technology" class="headerlink" title="Science and Technology:"></a>Science and Technology:</h3><p>National Geographic<br>Scientific American<br>NASA<br>Wired<br>Popular Science</p><h3 id="History-and-Culture"><a href="#History-and-Culture" class="headerlink" title="History and Culture:"></a>History and Culture:</h3><p>Smithsonian Magazine<br>National Museum websites (e.g., Smithsonian, British Museum, Louvre)<br>History.com<br>TED-Ed History Lessons<br>National Geographic History</p><h3 id="Social-Sciences-and-Politics"><a href="#Social-Sciences-and-Politics" class="headerlink" title="Social Sciences and Politics:"></a>Social Sciences and Politics:</h3><p>The Economist<br>Harvard Business Review<br>Pew Research Center<br>Brookings Institution<br>Stanford Encyclopedia of Philosophy</p><h3 id="Health-and-Medicine"><a href="#Health-and-Medicine" class="headerlink" title="Health and Medicine:"></a>Health and Medicine:</h3><p>Mayo Clinic<br>WebMD<br>Centers for Disease Control and Prevention (CDC)<br>World Health Organization (WHO)<br>National Institutes of Health (NIH)</p><h3 id="Environment-and-Sustainability"><a href="#Environment-and-Sustainability" class="headerlink" title="Environment and Sustainability:"></a>Environment and Sustainability:</h3><p>World Wildlife Fund (WWF)<br>United Nations Environment Programme (UNEP)<br>National Geographic Environment<br>The Nature Conservancy<br>Environmental Protection Agency (EPA)</p><h3 id="Academic-and-Scholarly-Research"><a href="#Academic-and-Scholarly-Research" class="headerlink" title="Academic and Scholarly Research:"></a>Academic and Scholarly Research:</h3><p>Google Scholar<br>JSTOR<br>ResearchGate<br>arXiv<br>PubMed (for biomedical research)</p><h3 id="Business-and-Economics"><a href="#Business-and-Economics" class="headerlink" title="Business and Economics:"></a>Business and Economics:</h3><p>Forbes<br>Bloomberg<br>Financial Times<br>Harvard Business Review<br>World Economic Forum</p><h3 id="Technology-and-Innovation"><a href="#Technology-and-Innovation" class="headerlink" title="Technology and Innovation:"></a>Technology and Innovation:</h3><p>MIT Technology Review<br>TechCrunch<br>IEEE Spectrum<br>Gizmodo<br>Mashable</p><h3 id="Education"><a href="#Education" class="headerlink" title="Education:"></a>Education:</h3><p>Edutopia<br>Khan Academy<br>TED-Ed<br>Stanford Center for Teaching and Learning<br>National Education Association (NEA)</p><h3 id="Psychology-and-Mental-Health"><a href="#Psychology-and-Mental-Health" class="headerlink" title="Psychology and Mental Health:"></a>Psychology and Mental Health:</h3><p>American Psychological Association (APA)<br>Psychology Today<br>National Institute of Mental Health (NIMH)<br>Mayo Clinic Psychology and Psychiatry<br>Verywell Mind</p><h3 id="Law-and-Legal-Issues"><a href="#Law-and-Legal-Issues" class="headerlink" title="Law and Legal Issues:"></a>Law and Legal Issues:</h3><p>Cornell Law School Legal Information Institute<br>FindLaw<br>Harvard Law Review<br>American Bar Association (ABA)<br>Justia</p><h3 id="Political-and-Policy-Analysis"><a href="#Political-and-Policy-Analysis" class="headerlink" title="Political and Policy Analysis:"></a>Political and Policy Analysis:</h3><p>Brookings Institution<br>RAND Corporation<br>Council on Foreign Relations (CFR)<br>Center for Strategic and International Studies (CSIS)<br>Pew Research Center</p><h3 id="Art-and-Culture"><a href="#Art-and-Culture" class="headerlink" title="Art and Culture:"></a>Art and Culture:</h3><p>Tate Modern<br>Museum of Modern Art (MoMA)<br>Art News<br>The Art Newspaper<br>Smithsonian Magazine’s Art Section</p><h2 id="6、Here-are-some-websites-that-provide-commercial-information-including-business-finance-and-market-related-data"><a href="#6、Here-are-some-websites-that-provide-commercial-information-including-business-finance-and-market-related-data" class="headerlink" title="6、Here are some websites that provide commercial information, including business, finance, and market-related data"></a>6、Here are some websites that provide commercial information, including business, finance, and market-related data</h2><p>1、Bloomberg(<a href="https://www.bloomberg.com/">https://www.bloomberg.com/</a>): A leading source for business and financial news, providing market data, analysis, and insights across various industries.</p><p>2、Yahoo Finance(<a href="https://finance.yahoo.com/">https://finance.yahoo.com/</a>): Offers real-time stock quotes, financial news, portfolio management tools, and market analysis.</p><p>3、MarketWatch(<a href="https://www.marketwatch.com/">https://www.marketwatch.com/</a>): Provides financial news, market data, and investment information, along with in-depth analysis of stocks, funds, and market trends.</p><p>4、Investopedia(<a href="https://www.investopedia.com/">https://www.investopedia.com/</a>): An educational resource that offers a wide range of articles, tutorials, and videos covering various aspects of investing, finance, and economics.</p><p>5、Reuters Business(<a href="https://www.reuters.com/business">https://www.reuters.com/business</a>): Features global business and financial news, as well as analysis of market trends, industries, and company performance.</p><p>6、Forbes(<a href="https://www.forbes.com/">https://www.forbes.com/</a>): A renowned business publication that covers a wide range of topics, including entrepreneurship, finance, leadership, and industry-specific news.</p><p>7、Business Insider(<a href="https://www.businessinsider.com/">https://www.businessinsider.com/</a>): Offers business, tech, and finance news, along with in-depth analysis, insights, and profiles of companies and industry trends.</p><p>8、SEC EDGAR(<a href="https://www.sec.gov/edgar.shtml">https://www.sec.gov/edgar.shtml</a>): The U.S. Securities and Exchange Commission’s Electronic Data Gathering, Analysis, and Retrieval system provides access to corporate filings, financial statements, and other regulatory information for publicly traded companies.</p><p>9、Morningstar(<a href="https://www.morningstar.com/">https://www.morningstar.com/</a>): Specializes in investment research and analysis, offering data, ratings, and reports on stocks, mutual funds, ETFs, and other investment products.</p><p>10、Hoover’s(<a href="https://www.hoovers.com/">https://www.hoovers.com/</a>): Provides company information, industry analysis, and business reports, including financial data, key executives, and company profiles.</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python(气温变化做图)</title>
      <link href="/2023/03/13/python-pic/"/>
      <url>/2023/03/13/python-pic/</url>
      
        <content type="html"><![CDATA[<p>做气温变化趋势图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">import</span> FontPropertiesfont_set <span class="token operator">=</span> FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span>r<span class="token string">"simfang.ttf"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"data_final1.xlsx"</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Year"</span><span class="token punctuation">,</span> <span class="token string">'6月'</span><span class="token punctuation">,</span> <span class="token string">'7月'</span><span class="token punctuation">,</span> <span class="token string">'8月'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plt.figure(figsize=(9, 7), dpi=600)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"Year"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df<span class="token punctuation">[</span><span class="token string">"6月"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"6月"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#原始数据</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"Year"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df<span class="token punctuation">[</span><span class="token string">"7月"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"7月"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#原始数据</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"Year"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df<span class="token punctuation">[</span><span class="token string">"8月"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"8月"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#原始数据</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"年份"</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"气温"</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"1961年-2021年气温变化图"</span><span class="token punctuation">,</span> FontProperties<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>prop<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>做平均气温变化图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">import</span> FontPropertiesfont_set <span class="token operator">=</span> FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span>r<span class="token string">"simfang.ttf"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"data_final2.xlsx"</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Year"</span><span class="token punctuation">,</span> <span class="token string">'Avg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plt.figure(figsize=(9, 7), dpi=600)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">"Year"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>df<span class="token punctuation">[</span><span class="token string">"Avg"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">"Avg"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#原始数据</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1991</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token punctuation">]</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">21.61</span><span class="token punctuation">,</span><span class="token number">21.26</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"-."</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"年份"</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"气温"</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"1991年-2021年气温变化图"</span><span class="token punctuation">,</span> FontProperties<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>prop<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>做气温MK图</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>font_manager <span class="token keyword">import</span> FontProperties<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npfont_set <span class="token operator">=</span> FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span>r<span class="token string">"simfang.ttf"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"data_final2.xlsx"</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Year"</span><span class="token punctuation">,</span> <span class="token string">'Avg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Mk</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> input_data<span class="token punctuation">[</span><span class="token string">"Avg"</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token number">31</span>    <span class="token comment" spellcheck="true">#计算UFk</span>    Sk1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Exk1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Varxk1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    UFk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    s1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                s1<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                s1<span class="token operator">+=</span><span class="token number">0</span>        Sk1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>        Exk1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span>        Varxk1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">72</span> <span class="token punctuation">)</span>        UFk<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>Sk1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>Exk1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>Varxk1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#计算UBk</span>    data1 <span class="token operator">=</span> list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#逆转</span>    Sk2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Exk2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    Varxk2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    UBk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    s2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> data1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                s2<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                s2<span class="token operator">+=</span><span class="token number">0</span>        Sk2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>        Exk2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span>        Varxk2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>i<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">72</span> <span class="token punctuation">)</span>        UBk<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>Exk2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>Sk2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>Varxk2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    UBk <span class="token operator">=</span> list<span class="token punctuation">(</span>reversed<span class="token punctuation">(</span>UBk<span class="token punctuation">)</span><span class="token punctuation">)</span>    diff <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>UFk<span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>UBk<span class="token punctuation">)</span>    K <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> diff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>diff<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            K<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> UFk<span class="token punctuation">,</span>UBk<span class="token punctuation">,</span>KUFk<span class="token punctuation">,</span>UBk<span class="token punctuation">,</span>K <span class="token operator">=</span> Mk<span class="token punctuation">(</span>df<span class="token punctuation">)</span>xmk <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1991</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xmk<span class="token punctuation">,</span> UFk<span class="token punctuation">,</span>label <span class="token operator">=</span> <span class="token string">"UFk"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xmk<span class="token punctuation">,</span> UBk<span class="token punctuation">,</span>label <span class="token operator">=</span> <span class="token string">"UBk"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"年份"</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"UFk-UBk"</span><span class="token punctuation">)</span>x_lim <span class="token operator">=</span> plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_lim<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.96</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.96</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"--"</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_lim<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"m--"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_lim<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1.96</span><span class="token punctuation">,</span><span class="token number">1.96</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"--"</span><span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Mk 测试"</span><span class="token punctuation">,</span>FontProperties<span class="token operator">=</span>font_set<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop技术</title>
      <link href="/2023/03/09/hadoop/"/>
      <url>/2023/03/09/hadoop/</url>
      
        <content type="html"><![CDATA[<p>Hadoop是一个开源的分布式计算框架，可用于处理大数据集。它是Apache软件基金会的一个项目，其核心组件包括Hadoop Distributed File System（HDFS）和MapReduce计算模型。</p><p>HDFS是一个分布式文件系统，可以将大量数据分布式地存储在多个节点上，并提供高可靠性和高可用性的数据访问。MapReduce是一种分布式数据处理模型，用于对HDFS中存储的大数据集进行分布式处理和分析。</p><p>Hadoop还包括其他一些组件，如YARN（Yet Another Resource Negotiator），它负责在集群中协调应用程序和计算资源的分配，以及Hive，它是一个数据仓库系统，可以使用SQL查询来处理和分析大规模数据。</p><p>Hadoop技术已经成为大数据处理和分析的标准解决方案之一，它的高可扩展性、高可靠性和低成本使得越来越多的企业和组织开始采用Hadoop技术来处理他们的大数据。</p><h2 id="1-Hadoop学习目录"><a href="#1-Hadoop学习目录" class="headerlink" title="1.Hadoop学习目录"></a>1.Hadoop学习目录</h2><p>1.大数据概述：了解大数据概念、挑战和机遇，以及Hadoop技术的作用和优势。</p><p>2.Hadoop生态系统：了解Hadoop生态系统中的不同组件，包括HDFS、MapReduce、YARN、Hive、Pig、Spark等。</p><p>3.安装和配置：学习如何安装和配置Hadoop集群，包括如何设置HDFS和YARN的配置文件。</p><p>4.Hadoop编程模型：掌握MapReduce编程模型，包括Map、Reduce、Partition等基本概念，以及如何使用Java或其他编程语言编写MapReduce程序。</p><p>5.HDFS文件系统：学习如何使用HDFS存储和管理大数据，包括如何上传、下载、复制和删除数据，以及如何使用命令行和Web界面管理HDFS。</p><p>6.数据分析：了解如何使用Hadoop进行数据分析，包括使用Pig、Hive、Spark等工具对数据进行查询、处理和分析，以及如何使用HBase和Cassandra等NoSQL数据库存储和查询数据。</p><p>7.高级主题：包括Hadoop的高可用性、性能调优、安全等方面的内容，以及如何使用Flume、Kafka、ZooKeeper等工具进行数据采集、消息传递和分布式协调。</p><p>8.实战项目：进行实战项目练习，例如使用Hadoop处理大规模数据、构建数据仓库、实现推荐系统等。</p><h3 id="1-1-大数据概述"><a href="#1-1-大数据概述" class="headerlink" title="1.1.大数据概述"></a>1.1.大数据概述</h3><p>大数据指的是规模巨大、多样化、高速增长的数据集合，超出了传统数据处理软件能够处理的能力范围。大数据的兴起源于互联网的发展，越来越多的人使用网络服务，产生了海量的数据。随着物联网、移动互联网、社交媒体等新兴技术的普及，大数据的规模和复杂性也在不断增加。</p><p>大数据的挑战在于如何高效地存储、处理和分析这些数据，以提取有用的信息和洞察。传统的数据处理方法已经无法胜任，需要新的技术和工具来应对这一挑战。Hadoop就是应对大数据挑战的一种解决方案，它提供了分布式存储和计算框架，能够高效地处理海量数据。</p><p>大数据也带来了很多机遇，它可以帮助企业、政府等机构更好地理解和应对市场、用户、环境等方面的变化。例如，企业可以利用大数据分析挖掘用户行为、市场趋势等信息，以制定更准确的营销策略和产品规划；政府可以利用大数据分析了解社会热点、民生问题等情况，以制定更科学的政策和计划。</p><h3 id="1-2-Hadoop生态系统"><a href="#1-2-Hadoop生态系统" class="headerlink" title="1.2.Hadoop生态系统"></a>1.2.Hadoop生态系统</h3><p>Hadoop生态系统是由多个组件和工具构成的开源大数据平台，它们相互配合，共同完成大数据的存储、处理、分析等任务。以下是Hadoop生态系统的主要组件和工具：</p><p>1.Hadoop Common：Hadoop的公共库，包括Hadoop的核心组件、API、工具等，为其他组件提供基础支持。</p><p>2.Hadoop Distributed File System（HDFS）：Hadoop的分布式文件系统，用于存储和管理大数据。HDFS具有高可靠性、可扩展性和容错性，能够处理PB级别的数据。</p><p>3.YARN（Yet Another Resource Negotiator）：Hadoop的资源管理器，用于管理集群资源，为作业分配资源，并监控作业运行状态。YARN支持多种计算框架，例如MapReduce、Spark、Tez等。</p><p>4.MapReduce：Hadoop的分布式计算框架，用于处理大规模数据。MapReduce将作业分成Map和Reduce两个阶段，将大任务分成多个小任务并行执行，提高了处理效率。</p><p>5.Hive：基于Hadoop的数据仓库工具，可以将结构化数据映射到Hadoop集群中的文件系统上，支持SQL查询和分析。</p><p>6.Pig：基于Hadoop的高级数据流语言和平台，可以用于分析大规模数据。Pig具有灵活的数据模型和丰富的内置函数，可以处理各种数据格式和结构。</p><p>7.Spark：基于内存计算的分布式计算框架，具有高速、易用、灵活等优点。Spark支持多种计算任务，包括批处理、流处理、机器学习等。</p><p>除了上述组件和工具，Hadoop生态系统还包括其他一些工具和项目，例如：</p><p>8.HBase：基于Hadoop的分布式NoSQL数据库，适用于实时查询和更新大量数据。</p><p>9.ZooKeeper：分布式协调服务，用于管理分布式应用程序的配置、命名、同步和分组等任务。</p><p>10.Flume：分布式的日志收集、聚合和传输系统，用于收集和传输海量日志数据。</p><p>11.Kafka：分布式流式处理平台，用于高效地处理和传输数据流。</p><p>总之，Hadoop生态系统提供了一系列的工具和组件，使得大数据处理变得更加高效、便捷和可靠。</p><h3 id="1-3-安装和配置"><a href="#1-3-安装和配置" class="headerlink" title="1.3.安装和配置"></a>1.3.安装和配置</h3><p>1.下载Hadoop：从官网（<a href="https://hadoop.apache.org/%EF%BC%89%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84Hadoop%EF%BC%8C%E5%B9%B6%E8%A7%A3%E5%8E%8B%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E3%80%82%E5%9C%A8%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%AD%EF%BC%8C%E9%80%9A%E5%B8%B8%E4%BD%BF%E7%94%A8%E5%8D%95%E6%9C%BA%E6%A8%A1%E5%BC%8F%E8%BF%90%E8%A1%8CHadoop%E3%80%82">https://hadoop.apache.org/）下载最新版的Hadoop，并解压到指定目录。在本地开发环境中，通常使用单机模式运行Hadoop。</a></p><p>2.配置环境变量：将Hadoop的bin目录添加到系统的PATH环境变量中，以便在命令行中直接使用Hadoop命令。</p><p>3.配置Hadoop：修改Hadoop的配置文件，以适应不同的需求。Hadoop的配置文件位于conf目录下，包括core-site.xml、hdfs-site.xml、mapred-site.xml和yarn-site.xml等。</p><ul><li>core-site.xml：配置Hadoop的通用参数，例如Hadoop的文件系统、IO方式等。</li><li>hdfs-site.xml：配置HDFS相关的参数，例如HDFS的数据副本数、块大小等。</li><li>mapred-site.xml：配置MapReduce相关的参数，例如MapReduce的任务数量、输出压缩方式等。</li><li>yarn-site.xml：配置YARN相关的参数，例如YARN的资源管理方式、调度方式等。</li></ul><p>4.启动Hadoop：使用start-all.sh脚本启动Hadoop，该脚本会启动HDFS、YARN和其他相关服务。</p><p>5.测试Hadoop：使用Hadoop自带的例子程序，例如WordCount程序，验证Hadoop的安装和配置是否正确。如果运行成功，可以开始编写自己的MapReduce程序，进行大数据处理。</p><h3 id="1-4-Hadoop编程模型"><a href="#1-4-Hadoop编程模型" class="headerlink" title="1.4.Hadoop编程模型"></a>1.4.Hadoop编程模型</h3><p>Hadoop编程模型基于MapReduce，是一种分布式计算模型，常用于大规模数据处理。MapReduce将计算任务分解为两个部分：Map和Reduce。</p><p>Map任务将输入数据划分为若干个小数据块，并对每个数据块进行处理，输出一组键值对，其中键表示数据的类型，值表示数据的内容。Map任务可以在多个节点上并行执行，每个节点只处理一部分数据，以提高处理速度和效率。</p><p>Reduce任务将Map任务的输出数据按照键值对中的键进行分组，并对每组数据进行处理，输出一个最终结果。Reduce任务也可以在多个节点上并行执行，每个节点只处理一部分数据，以提高处理速度和效率。</p><p>Hadoop编程模型的主要流程如下：</p><p>1.输入数据：从Hadoop的文件系统（HDFS）中读取输入数据，将其分成若干个小数据块。</p><p>2.Map阶段：将输入数据的每个小数据块作为Map任务的输入，通过Map函数进行处理，将处理结果输出为一组键值对。</p><p>3.Shuffle阶段：将Map任务的输出数据按照键值对中的键进行分组，将同一组数据发送到同一个Reduce任务中进行处理。</p><p>4.Reduce阶段：将Shuffle阶段的输出数据作为Reduce任务的输入，通过Reduce函数进行处理，输出一个最终结果。</p><p>5.输出数据：将Reduce任务的输出数据写入HDFS中，作为最终结果。</p><p>除了MapReduce，Hadoop还支持其他编程模型，例如Hive、Pig和Spark等，这些模型基于MapReduce模型，并提供更高级别的抽象和接口，方便用户进行数据处理和分析。</p><h3 id="1-5-HDFS文件系统"><a href="#1-5-HDFS文件系统" class="headerlink" title="1.5.HDFS文件系统"></a>1.5.HDFS文件系统</h3><p>HDFS（Hadoop Distributed File System）是Hadoop的分布式文件系统，被设计用于存储和管理大规模数据集。它是一个高容错性、高可靠性的文件系统，可以运行在廉价硬件上，并且支持水平扩展。</p><p>HDFS的主要特点如下：</p><p>1.大容量：HDFS可以存储PB级别的数据，可以容易地扩展存储容量。</p><p>2.可靠性：HDFS使用数据冗余来提高数据的可靠性，如果某个节点出现故障，数据可以从其他节点恢复。</p><p>3.高效性：HDFS优化了大规模数据的读写操作，支持流式访问，可以快速读取和写入大文件。</p><p>4.可扩展性：HDFS支持水平扩展，可以根据需要添加更多的节点，以满足不同的需求。</p><p>HDFS的文件系统结构类似于传统的文件系统，包括文件和目录。但是，HDFS的文件系统是分布式的，每个文件被分成多个数据块，并存储在不同的节点上。每个数据块的默认大小是128 MB，可以根据需要进行配置。当一个文件被上传到HDFS中时，它会被分成多个数据块，并存储在不同的节点上，以提高数据的可靠性和容错性。</p><p>HDFS的核心组件包括NameNode和DataNode。NameNode负责管理文件系统的元数据（例如文件和目录的名称、权限和位置等），而DataNode负责存储和管理实际的数据块。</p><p>HDFS是Hadoop生态系统的重要组成部分，常用于存储和管理大规模数据集，例如日志数据、图像数据和音频数据等。</p><h3 id="1-6-数据分析"><a href="#1-6-数据分析" class="headerlink" title="1.6.数据分析"></a>1.6.数据分析</h3><p>数据分析是一种通过对数据进行收集、处理、清洗、建模和解释的方法来发现有用信息的过程。数据分析可以用于解决各种问题，例如发现趋势、预测未来事件、评估性能、识别机会等。</p><p>在大数据领域，数据分析通常需要处理大量的数据，并从中提取有用的信息。Hadoop生态系统提供了许多工具和技术来支持大规模数据分析，例如：</p><p>1.MapReduce：MapReduce是一种分布式计算模型，可以用于处理大规模数据集。它将数据分成若干个小数据块，并在多个节点上并行处理这些数据块，以提高处理速度和效率。</p><p>2.Hive：Hive是一种基于Hadoop的数据仓库工具，可以用SQL语言进行数据分析。它将SQL查询转换为MapReduce作业，并在后台自动执行。</p><p>3.Pig：Pig是一种基于Hadoop的数据流语言，可以用于数据分析和转换。它可以将数据流式处理，以提高处理效率。</p><p>4.Spark：Spark是一种快速、通用的分布式计算系统，可以用于处理大规模数据集。它提供了许多高级API，例如Spark SQL、Spark Streaming和MLlib等，支持数据分析、机器学习和实时处理等。</p><p>5.Mahout：Mahout是一个开源的机器学习库，可以用于数据挖掘、分类、聚类和推荐等。</p><p>这些工具和技术可以帮助数据分析人员更轻松地处理和分析大规模数据集，并从中发现有用的信息和洞见。</p><h3 id="1-7-高级主题"><a href="#1-7-高级主题" class="headerlink" title="1.7.高级主题"></a>1.7.高级主题</h3><p>以下是一些Hadoop高级主题：</p><p>1.YARN：YARN是Hadoop的资源管理器，它负责管理Hadoop集群中的资源分配和作业调度。YARN将计算资源分成容器，可以在不同的节点上分配和管理这些容器。它支持多种应用程序框架，例如MapReduce、Spark和HBase等。</p><p>2.HBase：HBase是一种分布式的、面向列的NoSQL数据库，可以存储大规模结构化数据。它使用Hadoop HDFS作为底层存储，并提供了快速的数据访问和实时查询功能。</p><p>3.ZooKeeper：ZooKeeper是一个分布式的协调服务，可以用于管理分布式系统中的配置信息、锁定和同步等。它可以帮助分布式应用程序更好地管理和协调数据，确保数据一致性和可靠性。</p><p>4.Oozie：Oozie是一个基于Hadoop的工作流引擎，可以用于定义、管理和执行复杂的、分布式的作业流程。它可以将不同的Hadoop作业组合成一个完整的工作流程，并在后台自动执行。</p><p>5.Sqoop：Sqoop是一个开源工具，可以用于将关系型数据库中的数据导入到Hadoop中。它支持多种数据库和数据格式，并提供了高效的数据传输和转换功能。</p><p>这些高级主题可以帮助用户更深入地了解Hadoop的内部机制和各个组件之间的相互作用。同时，它们也提供了更多的功能和工具，以满足不同的数据处理和分析需求。</p><h3 id="1-8-实战项目"><a href="#1-8-实战项目" class="headerlink" title="1.8.实战项目"></a>1.8.实战项目</h3><p>以下是一些基于Hadoop的实战项目：</p><p>1.日志分析：使用Hadoop生态系统中的工具和技术来分析大量的Web日志数据，以了解网站的访问情况、用户行为和趋势等。可以使用工具如Hive、Pig、MapReduce和Spark等。</p><p>2.电商推荐系统：使用Hadoop生态系统中的机器学习库和数据处理工具，例如Mahout和Spark MLlib等，来构建一个电商推荐系统。该系统可以基于用户的历史购买记录、浏览记录和其他行为数据，推荐个性化的产品或服务。</p><p>3.大数据可视化：使用Hadoop和相关的可视化工具，例如Apache Superset、Tableau和Power BI等，来构建大数据可视化应用程序。该应用程序可以帮助用户更直观地了解和分析大规模数据集。</p><p>4.智能医疗系统：使用Hadoop生态系统中的工具和技术，例如Spark Streaming和机器学习库，来构建一个智能医疗系统。该系统可以基于患者的医疗记录、生理数据和其他相关信息，提供个性化的诊断和治疗建议。</p><p>5.金融风险管理：使用Hadoop生态系统中的工具和技术，例如Hive和MapReduce，来构建一个金融风险管理系统。该系统可以分析市场数据、经济指标和其他相关信息，以预测风险和市场趋势，并提供投资建议。</p><p>这些实战项目可以帮助用户将Hadoop的知识应用到实际的场景中，并提供了丰富的经验和技能。同时，它们也可以为用户提供机会，深入了解各种Hadoop技术和工具的应用，从而提高其技术水平和竞争力。</p><h2 id="2-学习链接"><a href="#2-学习链接" class="headerlink" title="2.学习链接"></a>2.学习链接</h2><p>黑马程序员：<a href="https://www.bilibili.com/video/BV1CU4y1N7Sh/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1CU4y1N7Sh/?spm_id_from=333.337.search-card.all.click</a><br>尚硅谷：<a href="https://www.bilibili.com/video/BV1Qp4y1n7EN/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1Qp4y1n7EN/?spm_id_from=333.337.search-card.all.click</a></p>]]></content>
      
      
      <categories>
          
          <category> Hadoop技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python入门</title>
      <link href="/2023/03/07/python-lesson-one/"/>
      <url>/2023/03/07/python-lesson-one/</url>
      
        <content type="html"><![CDATA[<h2 id="Python学习目录"><a href="#Python学习目录" class="headerlink" title="Python学习目录"></a>Python学习目录</h2><p>1.基础语法：</p><ul><li>数据类型和变量</li><li>字符串和编码</li><li>条件和循环</li><li>列表和元组</li><li>字典和集合</li><li>函数</li><li>高级特性（切片、迭代、列表生成式、生成器、迭代器、装饰器等）</li><li>模块</li><li>面向对象编程</li><li>错误、调试和测试</li></ul><p>2.标准库：</p><ul><li>常用内置模块（os、sys、datetime、math、random、json、re等）</li><li>文件和目录操作</li><li>网络编程（socket）</li><li>多线程编程（threading）</li><li>正则表达式（re模块）</li></ul><p>3.第三方库：</p><ul><li>NumPy（数组计算）</li><li>pandas（数据分析）</li><li>Matplotlib（数据可视化）</li><li>Scikit-learn（机器学习）</li><li>requests（网络请求）</li><li>Flask（Web开发）</li><li>Django（Web开发）</li><li>TensorFlow（深度学习）</li></ul><p>4.其他：</p><ul><li>虚拟环境和包管理工具（virtualenv、pip）</li><li>IDE和编辑器（PyCharm、VSCode、Sublime Text等）</li><li>编码规范和风格指南（PEP 8）</li></ul><h2 id="Python常用框架"><a href="#Python常用框架" class="headerlink" title="Python常用框架"></a>Python常用框架</h2><p>1.Django：一个全栈式的Web框架，包括ORM、表单验证、模板引擎等功能，可以快速构建Web应用。</p><p>2.Flask：一个轻量级Web框架，适用于构建小型Web应用或API服务，易于学习和使用。</p><p>3.Tornado：一个高性能的Web框架，主要用于构建异步Web服务和长连接应用。</p><p>4.Pyramid：一个通用的Web框架，提供了灵活的URL映射和模板渲染等功能，可用于构建中小型Web应用。</p><p>5.Bottle：一个微型的Web框架，仅依赖Python标准库，适用于构建简单的Web应用和API服务。</p><p>6.CherryPy：一个轻量级的Web框架，提供了高性能的HTTP服务器和可插拔的功能组件，可用于构建中小型Web应用。</p><p>7.Scrapy：一个开源的Web爬虫框架，可以用于抓取大规模的数据，支持异步处理和分布式部署。</p><p>8.NumPy：一个开源的数值计算库，提供了多维数组和矩阵运算、线性代数、随机数生成等功能，可用于科学计算和数据分析。</p><p>9.Pandas：一个数据分析库，提供了数据结构和数据分析工具，支持数据清洗、分组、聚合等操作。</p><p>10.TensorFlow：一个开源的人工智能框架，支持深度学习、神经网络和自然语言处理等领域，可用于构建各种机器学习应用。</p>]]></content>
      
      
      <categories>
          
          <category> Python编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA入门（2）</title>
      <link href="/2023/03/07/java-lesson-two/"/>
      <url>/2023/03/07/java-lesson-two/</url>
      
        <content type="html"><![CDATA[<h2 id="SSM框架"><a href="#SSM框架" class="headerlink" title="SSM框架"></a>SSM框架</h2><p>Java SSM框架是指Spring + SpringMVC + MyBatis这一组合。它是一种基于MVC（Model-View-Controller）设计模式的Java Web开发框架，可以协助开发人员快速构建高效、安全、可维护的Web应用程序。</p><ul><li><p>Spring框架是一个轻量级的IoC（Inversion of Control）和AOP（Aspect Oriented Programming）容器，它提供了一组简单易用的API，可以轻松地管理应用程序中的Java对象和组件。</p></li><li><p>SpringMVC是基于Spring框架的MVC实现，它提供了一套处理Web请求和响应的API，可以将Web应用程序的控制层和视图层分离，从而实现更高效的开发和更好的可维护性。</p></li><li><p>MyBatis是一个开源的持久化框架，它可以将Java对象映射到数据库表中的记录，提供了一套简单易用的API，可以轻松地进行数据库操作。</p></li></ul><p>Java SSM框架结合了这三个框架的优点，使得Web应用程序的开发变得更加高效、简单、可维护。它已经成为了Java Web开发中的主流框架之一。</p><h3 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h3><p>学习目录：</p><p>1、Spring IoC容器：理解控制反转（IoC）和依赖注入（DI）的概念，掌握Bean的生命周期、作用域和自动装配等特性。</p><p>2、Spring AOP框架：了解面向切面编程（AOP）的概念和作用，学习如何在Spring中配置和使用AOP。</p><p>3、Spring JDBC框架：掌握使用Spring JDBC访问关系型数据库的方法，包括JdbcTemplate和NamedParameterJdbcTemplate等类的使用。</p><p>4、Spring事务管理：了解Spring的事务管理机制，学习如何在Spring中使用编程式和声明式事务管理。</p><p>5、Spring MVC框架：学习Spring MVC的基本概念和工作原理，包括控制器、视图和模型等，同时掌握如何处理表单数据和异常等情况。</p><p>6、Spring Security框架：掌握Spring Security的基本概念和使用方法，了解如何在Spring应用程序中添加安全性。</p><p>7、Spring Boot框架：学习Spring Boot的基本概念和特性，包括自动配置、启动器、Actuator等，掌握如何使用Spring Boot构建Web应用程序和RESTful服务。</p><p>8、Spring Cloud框架：了解Spring Cloud的概念和特性，包括服务发现、服务治理、配置中心、断路器等，掌握如何使用Spring Cloud构建分布式应用。</p><ul><li><strong>Spring IOC（控制反转）</strong>是Spring框架的核心之一，它通过将对象之间的依赖关系交给容器来管理，从而降低了组件之间的耦合度。在Spring中，通过配置文件或者注解的方式将对象的创建和依赖注入交给IOC容器来管理。</li></ul><p>在Spring中，IOC容器可以使用两种方式来实现控制反转：BeanFactory和ApplicationContext。BeanFactory是Spring框架中最基本的IOC容器，它负责对象的创建、装配和管理。而ApplicationContext是BeanFactory的子接口，除了提供IOC功能外，还提供了更多的企业级特性，例如AOP、国际化、事件机制等。</p><p>Spring IOC的核心概念包括Bean、BeanFactory、ApplicationContext、Bean的作用域、Bean的生命周期等。其中Bean表示Spring容器中管理的对象，BeanFactory是容器的基本接口，ApplicationContext是BeanFactory的子接口，Bean的作用域定义了Bean对象的生命周期和可见范围，Bean的生命周期包括Bean的创建、初始化和销毁等阶段。</p><p>在使用Spring IOC时，我们需要定义Bean的配置，包括Bean的类型、属性和依赖关系等，然后将Bean的配置文件交给IOC容器来管理。IOC容器会负责Bean的创建、属性注入和依赖注入等工作。我们可以使用XML配置文件、注解或者Java代码来定义Bean的配置。</p><p>总之，Spring IOC是Spring框架的核心之一，它通过将对象之间的依赖关系交给容器来管理，从而降低了组件之间的耦合度，提高了应用程序的可维护性和扩展性。掌握Spring IOC的原理和使用方法是学习Spring框架的重要一步。</p><ul><li><strong>Spring AOP（面向切面编程）</strong>是Spring框架中的一个重要模块，它可以实现在不修改原有业务逻辑的情况下，对业务逻辑进行增强，例如添加日志、事务、安全等功能。</li></ul><p>在Spring AOP中，通过定义切点和切面来实现对目标对象的增强。切点是指需要被增强的目标方法，而切面是对切点进行增强的逻辑实现。切点和切面的定义可以使用XML配置文件、注解或者Java代码来实现。</p><p>在Spring AOP中，还有一些重要的概念，例如通知、切面、切点、连接点和切面代理等。通知是在切点前、后、异常、最终等时刻执行的逻辑代码，切面是由切点和通知组成的，切点是指需要被增强的目标方法，连接点是指可以被通知的方法执行时刻，切面代理是切面的一个代理类，用来实现切面对目标方法的增强。</p><p>Spring AOP的实现方式包括JDK动态代理和CGLIB动态代理。在使用JDK动态代理时，代理类必须实现一个接口；而使用CGLIB动态代理时，则无需实现接口。默认情况下，Spring AOP使用JDK动态代理，如果目标对象没有实现接口，则会自动使用CGLIB动态代理。</p><p>总之，Spring AOP是Spring框架中的一个重要模块，它可以实现对目标对象的增强，例如添加日志、事务、安全等功能，从而提高了应用程序的可维护性和扩展性。学习Spring AOP的原理和使用方法是Spring开发者必备的技能之一。</p><ul><li><strong>Spring JDBC</strong>是Spring框架中的一个重要模块，它简化了JDBC的开发流程，提高了JDBC的易用性和可维护性。</li></ul><p>在传统的JDBC开发中，需要手动进行数据库连接、预处理、参数设置、结果集处理等操作，而Spring JDBC通过提供JdbcTemplate和NamedParameterJdbcTemplate两个类来简化JDBC的操作流程。JdbcTemplate是基于JDBC的简单封装，可以执行任意SQL语句，包括查询和更新操作；NamedParameterJdbcTemplate则是基于JdbcTemplate的进一步封装，它支持命名参数和命名SQL语句，提高了JDBC的可读性和可维护性。</p><p>除了JdbcTemplate和NamedParameterJdbcTemplate，Spring JDBC还提供了一些重要的类和接口，例如DataSource、TransactionManager、RowMapper、SqlParameterSource等。其中，DataSource用于管理数据库连接池，TransactionManager用于管理事务，RowMapper用于将结果集映射到Java对象中，SqlParameterSource用于管理SQL语句中的参数。</p><p>总之，Spring JDBC是Spring框架中的一个重要模块，它简化了JDBC的开发流程，提高了JDBC的易用性和可维护性。学习Spring JDBC的使用方法和原理，可以帮助开发者更加高效地开发JDBC应用程序。</p><ul><li><strong>Spring事务管理</strong>是Spring框架中的一个重要功能，它可以帮助开发者更加方便地进行事务管理，实现了分布式事务的管理和控制，提高了系统的可靠性和可维护性。</li></ul><p>Spring事务管理提供了声明式事务和编程式事务两种方式，其中声明式事务通过配置AOP切面实现，可以将事务管理从业务逻辑中分离出来，使代码更加清晰简洁，而编程式事务则需要开发者手动在代码中进行事务控制。</p><p>在声明式事务中，Spring提供了多种事务管理方式，包括基于注解的事务管理、基于XML配置文件的事务管理、基于Java代码的事务管理等。其中，基于注解的事务管理是使用最为广泛的一种方式，它可以通过在方法上添加@Transactional注解来实现事务管理，减少了开发者的配置量。</p><p>在Spring事务管理中，还需要选择合适的事务管理器来管理事务。Spring提供了多种事务管理器，包括JDBC事务管理器、Hibernate事务管理器、JTA事务管理器等，开发者可以根据自己的需求选择适合的事务管理器。</p><p>总之，Spring事务管理是Spring框架中的一个重要功能，它可以帮助开发者更加方便地进行事务管理，提高了系统的可靠性和可维护性。掌握Spring事务管理的使用方法和原理，可以帮助开发者更加高效地开发事务管理应用程序。</p><ul><li><strong>Spring MVC</strong>是一种基于MVC（Model-View-Controller）架构的Web应用程序开发框架，它是Spring框架的一部分。Spring MVC提供了一种开发Web应用程序的模式，即通过使用控制器来接收和处理客户端请求，并使用模型和视图来生成响应。</li></ul><p>Spring MVC的核心组件包括控制器（Controller）、模型（Model）、视图（View）以及前端控制器（Front Controller）。前端控制器是Spring MVC的核心组件，它负责拦截所有的客户端请求，并将请求分发给相应的控制器进行处理。控制器是Spring MVC应用程序的核心，它接收并处理客户端请求，并通过模型和视图生成响应。模型负责封装应用程序的业务逻辑，而视图则负责将响应渲染为HTML、XML或JSON格式。</p><p>Spring MVC的优点包括：</p><p>1.灵活性：Spring MVC采用松散耦合的设计，可以轻松地与其他Spring组件和第三方框架集成。</p><p>2.可扩展性：Spring MVC提供了许多可扩展的接口和类，可以根据需要进行自定义开发。</p><p>3.易于测试：Spring MVC的松散耦合和可扩展性使得开发人员可以轻松地进行单元测试和集成测试。</p><p>4.安全性：Spring MVC提供了许多安全性控制选项，可以帮助开发人员保护Web应用程序免受攻击。</p><p>总之，Spring MVC是一个成熟的Web应用程序开发框架，提供了丰富的功能和优秀的设计，可以帮助开发人员快速构建高质量的Web应用程序。</p><ul><li><strong>Spring Security</strong>是Spring Framework中用于实现安全认证和授权的框架，它提供了一系列的安全性服务和方法，包括身份验证、授权、攻击防护等，可以帮助开发人员轻松地为Web应用程序添加安全性。</li></ul><p>Spring Security提供了一种基于过滤器（Filter）的安全性框架，它使用一系列的过滤器来保护Web应用程序。Spring Security过滤器链中的每个过滤器都可以对请求进行认证、授权和访问控制，以确保Web应用程序的安全性。</p><p>Spring Security的主要功能包括：</p><p>1.身份验证：Spring Security提供了多种身份验证方式，包括基于表单的身份验证、基于HTTP基本认证、OpenID身份验证等。</p><p>2.授权：Spring Security提供了基于角色和权限的授权方式，可以根据用户的角色和权限来限制其访问权限。</p><p>3.访问控制：Spring Security提供了访问控制功能，可以通过配置来限制用户的访问权限。</p><p>4.攻击防护：Spring Security提供了一系列的攻击防护功能，包括防止跨站点请求伪造（CSRF）、防止会话劫持、防止点击劫持等。</p><p>总之，Spring Security是一个非常强大的安全性框架，可以帮助开发人员为Web应用程序提供安全性保护。它易于使用、可扩展和高度可定制，是开发Web应用程序时必备的安全性组件之一。</p><ul><li><strong>Spring Boot</strong>是一个用于创建基于Spring框架的快速应用程序的开源框架。它通过自动化配置、约定优于配置和开箱即用的特性，简化了Spring应用程序的开发过程。Spring Boot还提供了许多附加功能，如嵌入式Web服务器、Actuator、Spring Data、Spring Security等。</li></ul><p>Spring Boot的主要特点包括：</p><p>1.简单易用：Spring Boot通过约定优于配置的方式，提供了一套简单易用的开发模型，开发者可以轻松地创建和运行Spring应用程序。</p><p>2.自动配置：Spring Boot提供了大量的自动配置，根据应用程序的依赖关系自动配置Spring应用程序，简化了应用程序的配置过程。</p><p>3.开箱即用：Spring Boot提供了一组内置的应用程序组件，例如嵌入式Web服务器、数据库连接池等，这些组件可以立即使用，无需额外的配置。</p><p>4.微服务支持：Spring Boot可以用于构建微服务架构，提供了对Spring Cloud等微服务框架的支持。</p><p>5.监控和管理：Spring Boot提供了Actuator组件，可以轻松地监控和管理Spring应用程序。</p><p>总之，Spring Boot是一个优秀的开源框架，可以帮助开发人员更快、更简单地构建Spring应用程序。它的高度可配置、可扩展和可定制性，使其成为现代应用程序开发中的热门选择。</p><ul><li><strong>Spring Cloud</strong>是一个用于开发分布式系统的开源框架。它建立在Spring Boot的基础之上，通过提供一组开箱即用的分布式系统功能来简化分布式系统的开发。</li></ul><p>Spring Cloud的主要组件包括：</p><p>1.服务发现和注册：Spring Cloud提供了Eureka和Consul等服务注册和发现工具，可以帮助开发人员轻松地实现微服务架构中的服务发现和注册功能。</p><p>2.配置中心：Spring Cloud Config提供了一个集中的配置管理中心，可以将应用程序的配置信息集中管理，方便在不同环境中进行配置的切换。</p><p>3.负载均衡：Spring Cloud提供了Ribbon和Feign等负载均衡工具，可以帮助开发人员轻松地实现微服务架构中的负载均衡功能。</p><p>4.熔断器：Spring Cloud提供了Hystrix熔断器，可以帮助开发人员解决微服务架构中的服务故障问题，提高系统的可用性。</p><p>5.API网关：Spring Cloud提供了Zuul API网关，可以帮助开发人员对外提供RESTful API服务，实现服务的路由、负载均衡、安全控制等功能。</p><p>总之，Spring Cloud是一个强大的开源框架，可以帮助开发人员快速构建分布式系统。通过提供一组开箱即用的分布式系统功能，Spring Cloud大大简化了分布式系统的开发和部署。同时，Spring Cloud也提供了丰富的扩展性和可定制性，可以满足不同场景下的需求。</p><h3 id="SpringMVC框架"><a href="#SpringMVC框架" class="headerlink" title="SpringMVC框架"></a>SpringMVC框架</h3><p>学习目录：<br>1.SpringMVC框架概述</p><ul><li>MVC设计模式</li><li>SpringMVC架构和核心组件</li><li>SpringMVC和SpringBoot的关系</li></ul><p>2.SpringMVC开发环境搭建</p><ul><li>JDK和IDE的安装</li><li>SpringMVC的依赖库和配置</li><li>创建SpringMVC项目</li></ul><p>3.SpringMVC请求处理流程</p><ul><li>DispatcherServlet</li><li>HandlerMapping</li><li>HandlerAdapter</li><li>HandlerInterceptor</li><li>HandlerExceptionResolver</li><li>ViewResolver</li></ul><p>4.SpringMVC请求映射</p><ul><li>URL和URI</li><li>URL映射的方式</li><li>URL模板和路径变量</li><li>请求参数和请求头部信息的获取</li><li>表单数据的处理</li></ul><p>5.SpringMVC响应处理</p><ul><li>视图和视图解析器</li><li>视图的类型和渲染</li><li>视图模板和模型数据</li><li>RESTful Web服务</li></ul><p>6.SpringMVC数据绑定和验证</p><ul><li>表单数据绑定</li><li>自定义类型转换器</li><li>数据验证和错误处理</li><li>国际化和本地化处理</li></ul><p>7.SpringMVC拦截器和过滤器</p><ul><li>拦截器和过滤器的区别</li><li>SpringMVC拦截器的使用</li><li>SpringMVC过滤器的使用</li></ul><p>8.SpringMVC文件上传和下载</p><ul><li>文件上传的处理</li><li>文件下载的处理</li></ul><p>9.SpringMVC异常处理</p><ul><li>异常处理的流程</li><li>异常处理的方式</li><li>全局异常处理</li></ul><p>10.SpringMVC单元测试</p><ul><li>SpringMVC单元测试的环境搭建</li><li>SpringMVC单元测试的方式</li><li>MockMvc的使用</li></ul><h3 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h3><p>1.学习目录：</p><ul><li>MyBatis框架概述</li><li>什么是MyBatis框架</li><li>MyBatis框架的特点和优势</li></ul><p>2.MyBatis框架入门</p><ul><li>安装和配置MyBatis框架</li><li>编写第一个MyBatis程序</li></ul><p>3.MyBatis配置文件详解</p><ul><li>MyBatis配置文件的结构和作用</li><li>MyBatis配置文件的常用属性和元素</li><li>MyBatis配置文件的高级特性（如分页、缓存等）</li></ul><p>4.MyBatis映射文件详解</p><ul><li>MyBatis映射文件的结构和作用</li><li>MyBatis映射文件中的SQL语句编写</li><li>MyBatis映射文件中的参数映射和结果映射</li></ul><p>5.MyBatis注解开发</p><ul><li>MyBatis注解的概述和作用</li><li>MyBatis注解的使用方法和示例</li></ul><p>6.MyBatis动态SQL</p><ul><li>MyBatis动态SQL的概述和作用</li><li>MyBatis动态SQL的实现方式和示例</li></ul><p>7.MyBatis插件开发</p><ul><li>MyBatis插件的概述和作用</li><li>MyBatis插件的开发步骤和示例</li></ul><p>8.MyBatis与Spring集成</p><ul><li>MyBatis与Spring集成的方式和作用</li><li>MyBatis与Spring集成的配置方法和示例</li></ul><p>9.MyBatis与SpringBoot集成</p><ul><li>MyBatis与SpringBoot集成的方式和作用</li><li>MyBatis与SpringBoot集成的配置方法和示例</li></ul><p>10.MyBatis常见问题解决</p><ul><li>MyBatis常见问题的分析和解决方法</li></ul><h3 id="相关学习视频链接"><a href="#相关学习视频链接" class="headerlink" title="相关学习视频链接"></a>相关学习视频链接</h3><p>黑马教程：<a href="https://www.bilibili.com/video/BV1Fi4y1S7ix/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1Fi4y1S7ix/?spm_id_from=333.337.search-card.all.click</a><br>黎曼的猜想：<a href="https://www.bilibili.com/video/BV1mE411X7yp/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1mE411X7yp/?spm_id_from=333.337.search-card.all.click</a></p><p>项目实战：<br>动力节点：<a href="https://www.bilibili.com/video/BV1tZ4y1d7kg/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1tZ4y1d7kg/?spm_id_from=333.337.search-card.all.click</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA入门</title>
      <link href="/2023/02/22/java-lesson/"/>
      <url>/2023/02/22/java-lesson/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java的流程控制"><a href="#1-Java的流程控制" class="headerlink" title="1.Java的流程控制"></a>1.Java的流程控制</h2><p>1、if语句：根据条件判断是否执行一段代码。</p><p>2、switch语句：根据不同的取值，执行不同的分支代码。</p><p>3、for循环语句：按照指定的条件，循环执行一段代码。</p><p>4、while循环语句：当满足条件时，重复执行一段代码。</p><p>5、do-while循环语句：先执行一次循环体，然后根据条件重复执行。</p><p>6、break语句：跳出当前循环或switch语句。</p><p>7、continue语句：跳过当前循环的本次迭代，继续执行下一次迭代。</p><p>8、return语句：结束当前方法，并返回一个值。</p><p>9、try-catch语句：捕获并处理异常。</p><ul><li>if语句</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果条件成立，执行这里的代码</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果条件不成立，执行这里的代码</span><span class="token punctuation">}</span></code></pre><ul><li>switch语句</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">case</span> value1<span class="token operator">:</span>       <span class="token comment" spellcheck="true">// 如果变量的值等于value1，执行这里的代码</span>       <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> value2<span class="token operator">:</span>       <span class="token comment" spellcheck="true">// 如果变量的值等于value2，执行这里的代码</span>       <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 可以有更多的case分支</span>   <span class="token keyword">default</span><span class="token operator">:</span>       <span class="token comment" spellcheck="true">// 如果变量的值与所有case不匹配，执行这里的代码</span><span class="token punctuation">}</span></code></pre><ul><li>for循环语句</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>initialization<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 循环体</span><span class="token punctuation">}</span></code></pre><ul><li>while循环语句</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 循环体</span><span class="token punctuation">}</span></code></pre><ul><li>do-while循环语句</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 循环体</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>break语句</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>continue语句</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>return语句</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>try-catch语句</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 可能会抛出异常的代码</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 异常处理代码</span><span class="token punctuation">}</span></code></pre><h2 id="2-java中的数组操作"><a href="#2-java中的数组操作" class="headerlink" title="2.java中的数组操作"></a>2.java中的数组操作</h2><p>1.声明数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>2.访问数组元素</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> first <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>3.遍历数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>多种循环遍历方式<span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token operator">-</span>each循环遍历<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">while</span>循环遍历<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">do</span><span class="token operator">-</span><span class="token keyword">while</span>循环遍历<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4.数组拷贝</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dest<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> src<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5.多维数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>6.数组排序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>7.数组搜索</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-Java面向对象编程"><a href="#3-Java面向对象编程" class="headerlink" title="3.Java面向对象编程"></a>3.Java面向对象编程</h2><p>Java是一种面向对象的编程语言，它支持面向对象编程的三大特征：封装、继承和多态。下面对这三个特征进行简单介绍：</p><ul><li><p>封装：封装是将数据和方法封装到一个类中，从而保护数据的安全性和可靠性。封装可以使得程序的模块化更加清晰，同时也可以提高代码的可维护性和复用性。</p></li><li><p>继承：继承是指一个类可以从另一个类中继承属性和方法。通过继承，一个类可以拥有父类的属性和方法，同时还可以根据需要进行扩展和修改。继承可以使得程序的结构更加清晰，同时也可以提高代码的可维护性和复用性。</p></li><li><p>多态：多态是指同一个方法可以根据不同的对象调用出不同的结果。Java中的多态主要通过方法的重载和重写来实现。多态可以使得程序的可扩展性更强，同时也可以提高代码的可读性和可维护性。</p></li></ul><p>在Java中，面向对象编程是非常重要的，可以使用类、对象、接口等来实现面向对象的思想。通过合理运用面向对象的思想，可以让程序的结构更加清晰，同时也可以提高代码的可维护性和复用性。</p><h3 id="3-1-面向对象的构造方法及方法重载"><a href="#3-1-面向对象的构造方法及方法重载" class="headerlink" title="3.1.面向对象的构造方法及方法重载"></a>3.1.面向对象的构造方法及方法重载</h3><h4 id="构造方法（Constructor）"><a href="#构造方法（Constructor）" class="headerlink" title="构造方法（Constructor）"></a>构造方法（Constructor）</h4><p>构造方法是一种特殊的方法，用于创建对象并初始化对象的属性。在Java中，每个类都有一个构造方法，如果没有明确地定义构造方法，则会自动生成一个默认构造方法。构造方法的名称必须与类名相同，没有返回值类型，可以有参数和代码块。当创建一个对象时，Java会自动调用构造方法来初始化对象的属性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="方法重载（Method-Overloading）"><a href="#方法重载（Method-Overloading）" class="headerlink" title="方法重载（Method Overloading）"></a>方法重载（Method Overloading）</h4><p>方法重载是指在一个类中定义多个同名但参数类型、个数或顺序不同的方法。在Java中，方法重载可以提高代码的复用性和可读性。当调用一个重载方法时，Java会根据方法参数的不同自动匹配到对应的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，Calculator类中定义了两个同名的add方法，一个接受两个int类型参数，另一个接受两个double类型参数。当调用add方法时，Java会根据传入的参数类型自动匹配到对应的方法。</p><h3 id="3-2-面向对象编程中的继承和多态"><a href="#3-2-面向对象编程中的继承和多态" class="headerlink" title="3.2.面向对象编程中的继承和多态"></a>3.2.面向对象编程中的继承和多态</h3><h4 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h4><p>继承是指一个类可以从另一个类中继承属性和方法。通过继承，一个类可以拥有父类的属性和方法，同时还可以根据需要进行扩展和修改。在Java中，继承可以使用关键字extends来实现。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is eating."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is barking."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，Dog类继承自Animal类，并添加了自己的bark方法。通过继承，Dog类可以拥有Animal类的属性和方法。</p><h4 id="多态（Polymorphism）"><a href="#多态（Polymorphism）" class="headerlink" title="多态（Polymorphism）"></a>多态（Polymorphism）</h4><p>多态是指同一个方法可以根据不同的对象调用出不同的结果。在Java中，多态主要通过方法的重载和重写来实现。方法重载是指在一个类中定义多个同名但参数类型、个数或顺序不同的方法；方法重写是指在子类中重新定义父类中已有的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal is eating."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog is eating."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog is barking."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，Dog类重写了Animal类的eat方法，使得当调用Dog对象的eat方法时，输出的结果为“Dog is eating.”。通过多态，可以使得程序的可扩展性更强，同时也可以提高代码的可读性和可维护性。</p><h3 id="3-3-抽象类及接口"><a href="#3-3-抽象类及接口" class="headerlink" title="3.3.抽象类及接口"></a>3.3.抽象类及接口</h3><h4 id="抽象类（Abstract-Class）"><a href="#抽象类（Abstract-Class）" class="headerlink" title="抽象类（Abstract Class）"></a>抽象类（Abstract Class）</h4><p>抽象类是指无法被实例化的类，它可以包含抽象方法和非抽象方法。抽象方法是指只声明了方法的名字、返回值类型和参数类型，但没有具体的实现代码的方法。抽象类一般用来定义一些基础的操作或者一些共性的方法，具体的实现则交由子类去完成。在Java中，抽象类可以使用关键字abstract来定义。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is sleeping."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is eating dog food."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is barking."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，Animal类是一个抽象类，其中定义了一个抽象方法eat()，具体的实现交由Dog类去完成。通过抽象类，可以使得代码更加灵活和可扩展。</p><h4 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h4><p>接口是指一组抽象方法的集合，它不能包含具体的实现代码。接口一般用来定义一些行为规范，而不关心具体的实现细节。在Java中，接口可以使用关键字interface来定义。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is eating dog food."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is sleeping."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is barking."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，Animal接口定义了两个抽象方法eat()和sleep()，Dog类实现了Animal接口，并实现了eat()和sleep()方法。通过接口，可以使得程序更加松耦合，具有更好的可扩展性和可维护性。</p><h3 id="3-4-静态字段和静态方法"><a href="#3-4-静态字段和静态方法" class="headerlink" title="3.4.静态字段和静态方法"></a>3.4.静态字段和静态方法</h3><p>在Java中，静态字段和静态方法是与类相关而不是与对象相关的。也就是说，无论创建了多少个对象，静态字段和静态方法都只有一个副本，它们存储在类的内存区域中，不属于任何一个对象。</p><h4 id="静态字段（Static-Fields）"><a href="#静态字段（Static-Fields）" class="headerlink" title="静态字段（Static Fields）"></a>静态字段（Static Fields）</h4><p>静态字段也称为类变量或类属性，是指被static关键字修饰的字段。静态字段是与类相关的，它可以被类的所有实例共享。静态字段通常用于表示一些与对象无关的状态或者属性，比如计数器、版本号等等。静态字段可以通过类名访问，也可以通过对象名访问，但是建议使用类名来访问。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 静态字段</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 静态方法</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，Person类有一个静态字段count，用来统计创建了多少个Person对象。在每次创建Person对象时，count都会自增1。静态字段count可以通过Person.getCount()方法来访问。</p><h4 id="静态方法（Static-Methods）"><a href="#静态方法（Static-Methods）" class="headerlink" title="静态方法（Static Methods）"></a>静态方法（Static Methods）</h4><p>静态方法也称为类方法，是指被static关键字修饰的方法。静态方法是与类相关的，它可以通过类名直接调用，不需要创建对象。静态方法通常用于一些与对象无关的操作，比如工具类的方法、数学库的方法等等。静态方法不能访问非静态的字段和方法，因为它们只有一个副本，不属于任何一个对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> MathUtils<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用静态方法</span>        <span class="token keyword">int</span> diff <span class="token operator">=</span> MathUtils<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，MathUtils类有两个静态方法add()和subtract()，用来进行加法和减法操作。这些静态方法可以直接通过类名调用，不需要创建MathUtils对象。</p><h3 id="3-5-包、作用域和内部类"><a href="#3-5-包、作用域和内部类" class="headerlink" title="3.5.包、作用域和内部类"></a>3.5.包、作用域和内部类</h3><h4 id="包（Packages）"><a href="#包（Packages）" class="headerlink" title="包（Packages）"></a>包（Packages）</h4><p>Java中的包是一种组织类的机制，可以把相关的类放在同一个包中，方便管理和使用。包的名称通常使用反向域名（reverse domain name）的方式来命名，例如com.example.utils。Java中的类可以使用包名来限定类名的作用域，以避免命名冲突。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，StringUtil类被定义在com.example.utils包中，类的全名为com.example.utils.StringUtil。</p><h4 id="作用域（Access-Modifiers）"><a href="#作用域（Access-Modifiers）" class="headerlink" title="作用域（Access Modifiers）"></a>作用域（Access Modifiers）</h4><p>Java中的作用域用于限定类、字段、方法的访问范围，包括public、protected、default、private四种修饰符。</p><ul><li>public：公有的，可以被任何类访问。</li><li>protected：受保护的，只能被本类、同一个包中的类和子类访问。</li><li>default：默认的，没有修饰符，只能被本类和同一个包中的类访问。</li><li>private：私有的，只能被本类访问。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">reverse</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="内部类（Inner-Classes）"><a href="#内部类（Inner-Classes）" class="headerlink" title="内部类（Inner Classes）"></a>内部类（Inner Classes）</h4><p>Java中的内部类是定义在另一个类中的类。内部类可以访问外部类的字段和方法，因此它们可以用来实现一些特殊的功能。Java中的内部类有四种类型：成员内部类、静态内部类、局部内部类和匿名内部类。</p><ul><li>成员内部类（Member Inner Classes）：成员内部类是定义在另一个类中的非静态类。成员内部类可以访问外部类的字段和方法，也可以定义自己的字段和方法。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>静态内部类（Static Nested Classes）:静态内部类是定义在另一个类中的静态类。静态内部类不能访问外部类的非静态字段和方法，但是可以访问外部类的静态字段和方法.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，Inner类是Outer类的静态内部类，它可以访问Outer类的静态字段x。可以通过以下方式创建Inner类的对象：</p><pre class=" language-java"><code class="language-java">Outer<span class="token punctuation">.</span>Inner inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inner<span class="token punctuation">.</span><span class="token function">printX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在创建Inner类的对象时，不需要先创建Outer类的对象。同时，Inner类也可以拥有自己的静态字段和方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 私有构造方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，Singleton类的构造方法是私有的，SingletonHolder类是Singleton类的静态内部类，它创建了一个静态的Singleton实例。在getInstance方法中，通过访问SingletonHolder.INSTANCE来获取Singleton实例。这种方式可以保证线程安全和延迟加载，因为SingletonHolder类只有在getInstance方法第一次被调用时才会被加载，而且只会被加载一次。</p><ul><li>局部内部类: 是定义在一个方法或者一个代码块内部的类。与静态内部类不同，局部内部类不能有静态字段或者方法。局部内部类可以访问其外部类的所有成员，包括私有成员和静态成员。局部内部类只在定义它的方法或者代码块中可见，因此局部内部类不能被其他方法或者代码块所使用。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Inner inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在上面的例子中，Inner类是定义在print方法中的局部内部类，它可以访问Outer类的所有成员。由于Inner类只在print方法中可见，因此不能在其他方法中使用。</p><ul><li>匿名内部类: 是没有名字的局部内部类。它常常用于创建接口的实例或者继承自抽象类的实例。匿名内部类通常使用时直接定义在方法调用的位置上，定义的同时创建对象并将其返回。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Greeting</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Greeting greeting <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        greeting<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-6-Classpath和jar"><a href="#3-6-Classpath和jar" class="headerlink" title="3.6.Classpath和jar"></a>3.6.Classpath和jar</h3><p>classpath是指Java虚拟机（JVM）用于查找类文件的路径，它是由一组目录和JAR文件组成的。当JVM需要加载一个类时，它会从classpath中的目录和JAR文件中查找该类的字节码文件。classpath可以由多个路径组成，路径之间使用分号或者冒号分隔，具体格式取决于操作系统。</p><p>classpath的设置有多种方式，可以通过系统环境变量、启动参数或者配置文件来设置。在使用命令行启动Java应用程序时，可以使用“-classpath”或者“-cp”参数来设置classpath，例如：</p><pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>classpath <span class="token punctuation">.</span><span class="token punctuation">:</span>lib<span class="token operator">/</span><span class="token operator">*</span> MyApp</code></pre><p>上面的命令设置了classpath为当前目录和lib目录下的所有JAR文件。</p><p>JAR（Java Archive）是一种Java平台下的归档文件格式，它可以将多个文件打包成一个文件，并且可以使用压缩算法进行压缩。JAR文件通常用于分发Java库、应用程序或者Applet。</p><p>使用JAR文件可以方便地将多个类文件和资源文件打包成一个文件，并且可以通过classpath来引用JAR文件中的类和资源。在Java应用程序中，可以使用“-classpath”或者“-cp”参数来设置classpath，其中可以包含JAR文件的路径。例如：</p><pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>classpath <span class="token punctuation">.</span><span class="token punctuation">:</span>lib<span class="token operator">/</span>mylib<span class="token punctuation">.</span>jar MyApp</code></pre><p>上面的命令设置了classpath为当前目录和lib目录下的mylib.jar文件。在程序中使用mylib.jar文件中的类时，只需要在类路径中添加该文件即可。</p><h2 id="4-Java的核心类"><a href="#4-Java的核心类" class="headerlink" title="4.Java的核心类"></a>4.Java的核心类</h2><p>1.Object类：所有Java类的基类，包含所有Java对象共有的方法，如toString()、equals()和hashCode()等。</p><p>2.String类：字符串类，用于存储和操作字符串数据。</p><p>3.StringBuilder和StringBuffer类：用于高效地操作字符串，例如拼接、插入、删除等。</p><p>4.Math类：提供了一些常用的数学计算方法，如sin()、cos()、tan()、sqrt()等。</p><p>5.Arrays类：提供了一些常用的数组操作方法，如sort()、binarySearch()、equals()等。</p><p>6.Collection和Map接口：集合框架中的两个核心接口，分别表示一个集合和一个映射表，提供了一些常用的集合操作方法。</p><p>7.ArrayList、LinkedList和HashSet等类：集合框架中的一些常用实现类，用于存储和操作集合数据。</p><p>8.Date和Calendar类：用于处理日期和时间相关的操作。</p><p>9.InputStream和OutputStream类：用于读取和写入字节数据。</p><p>10.Reader和Writer类：用于读取和写入字符数据。</p><p>11.File和Path类：用于表示文件和目录路径，提供了一些文件和目录操作方法。</p><h3 id="4-1-Oject类"><a href="#4-1-Oject类" class="headerlink" title="4.1.Oject类"></a>4.1.Oject类</h3><p>Object类是Java语言中所有类的父类，位于java.lang包中。它定义了一些通用的方法，这些方法在所有Java对象中都可以使用。以下是Object类的一些重要方法：</p><p>1.equals()：用于判断两个对象是否相等。默认情况下，equals()方法会比较两个对象的引用是否相等，也就是是否指向同一个内存地址。子类可以重写该方法，以改变对象相等的比较方式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 比较两个对象的属性是否相等</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>2.hashCode()：用于获取对象的哈希码，该哈希码是一个整数，可以用于快速地比较两个对象是否相等。如果两个对象相等，它们的哈希码应该相同。同样地，子类可以重写该方法，以改变哈希码的生成方式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> field1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> field2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.toString()：用于将对象转换为字符串。默认情况下，该方法会返回一个包含对象类名和哈希码的字符串。子类可以重写该方法，以改变输出的格式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"MyClass{"</span> <span class="token operator">+</span>            <span class="token string">"field1="</span> <span class="token operator">+</span> field1 <span class="token operator">+</span>            <span class="token string">", field2="</span> <span class="token operator">+</span> field2 <span class="token operator">+</span>            <span class="token comment" spellcheck="true">// ...</span>            <span class="token string">'}'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.getClass()：用于获取对象的类类型。返回一个Class对象，该对象包含了该对象所属的类的信息。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5.finalize()：在垃圾回收器回收对象之前调用，用于执行对象的清理操作。子类可以重写该方法，以实现自定义的清理逻辑。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行对象的清理操作</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由于Object类是所有类的父类，因此它的方法在Java编程中非常重要，被广泛地使用。例如，在实现自定义类时，通常需要重写equals()和hashCode()方法，以实现对象相等的比较。在使用集合框架时，通常需要将对象转换为字符串，以便于打印和调试。</p><h3 id="4-2-String类"><a href="#4-2-String类" class="headerlink" title="4.2.String类"></a>4.2.String类</h3><p>1.length()方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2.charAt()方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3.substring()方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">></span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beginIndex <span class="token operator">></span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>endIndex <span class="token operator">-</span> beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>beginIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>endIndex <span class="token operator">==</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span>            <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> beginIndex<span class="token punctuation">,</span> endIndex <span class="token operator">-</span> beginIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.equals()方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String anotherString <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>5.compareTo()方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>String anotherString<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> len2 <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> lim <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c1 <span class="token operator">=</span> v1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c2 <span class="token operator">=</span> v2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> c1 <span class="token operator">-</span> c2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len1 <span class="token operator">-</span> len2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>6.indexof()方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>String str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">int</span> index1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找字符 'o' 的位置</span><span class="token keyword">int</span> index2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找子字符串 "world" 的位置</span><span class="token keyword">int</span> index3 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从索引 5 开始查找字符 'o' 的位置</span><span class="token keyword">int</span> index4 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从索引 5 开始查找子字符串 "world" 的位置</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 6</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 7</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 -1，因为从索引 5 开始没有子字符串 "world"</span></code></pre><h3 id="4-3-StringBuilder和StringBuffer类"><a href="#4-3-StringBuilder和StringBuffer类" class="headerlink" title="4.3.StringBuilder和StringBuffer类"></a>4.3.StringBuilder和StringBuffer类</h3><p>StringBuilder 和 StringBuffer 类是 Java 中的可变字符串类，它们允许我们对字符串内容进行修改。它们的方法基本相同，但是 StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的。因此，在单线程环境下，使用 StringBuilder 能够获得更好的性能。</p><p>下面是 StringBuilder 和 StringBuffer 的一些常用方法：</p><ul><li>append()：向字符串的末尾添加字符或者字符串。</li><li>insert()：在指定的位置插入字符或者字符串。</li><li>delete()：删除指定位置的字符或者字符串。</li><li>replace()：替换指定位置的字符或者字符串。</li><li>charAt()：获取指定位置的字符。</li><li>length()：获取字符串的长度。</li></ul><pre class=" language-java"><code class="language-java">StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 "Hello world!"</span>sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除索引为 5 的字符，即空格</span>sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在索引为 5 的位置插入字符 ","</span>sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 替换索引 6 到索引 10 的字符串为 "Java"</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 "Hello, Java!"</span></code></pre><h3 id="4-4-Arrays类"><a href="#4-4-Arrays类" class="headerlink" title="4.4.Arrays类"></a>4.4.Arrays类</h3><p>java.util.Arrays 类提供了一些用于处理数组的工具方法。这些方法包括数组的排序、查找、填充、比较等操作。</p><p>下面是 Arrays 类中一些常用方法的介绍：</p><ul><li>sort()：对数组进行排序。可以使用默认排序规则，也可以指定自定义排序规则。</li><li>binarySearch()：在排序后的数组中查找指定元素的索引值。如果找到了，返回元素的索引值；否则返回负数。</li><li>fill()：使用指定的值填充数组的所有元素。</li><li>equals()：比较两个数组是否相等。如果两个数组的长度和每个元素的值都相等，则认为这两个数组相等。</li><li>copyOf()：复制数组中的一部分元素，返回一个新的数组。</li><li>toString()：将数组转换成字符串。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对数组进行排序</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 [1, 2, 5, 8, 9]</span><span class="token keyword">int</span> index <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 查找元素 5 的索引值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Index of 5 is "</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 "Index of 5 is 2"</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将 arr2 数组的所有元素都设置为 10</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 [10, 10, 10, 10, 10]</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 复制 arr3 数组的前三个元素到 arr4 数组中</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 [1, 2, 3, 0, 0]</span><span class="token keyword">boolean</span> isEqual <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断两个数组是否相等</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Is arr3 equals to arr4? "</span> <span class="token operator">+</span> isEqual<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 "Is arr3 equals to arr4? false"</span></code></pre><h3 id="4-5-Collection和Map接口"><a href="#4-5-Collection和Map接口" class="headerlink" title="4.5.Collection和Map接口"></a>4.5.Collection和Map接口</h3><p>java.util 包中定义了两个顶层接口 Collection 和 Map。</p><p>Collection 接口表示一组对象，这些对象称为集合（Collection）。Collection 接口的常用实现类包括 ArrayList、LinkedList、HashSet、TreeSet 等。</p><p>Map 接口表示一组键值对（key-value pair），其中每个键都唯一地映射到一个值。Map 接口的常用实现类包括 HashMap、TreeMap、LinkedHashMap 等。</p><p>下面是 Collection 接口和 Map 接口中一些常用方法的介绍：<br>1.Collection 接口：</p><ul><li>add()：向集合中添加一个元素。</li><li>remove()：从集合中删除指定元素。</li><li>contains()：判断集合中是否包含指定元素。</li><li>size()：返回集合中元素的个数。</li><li>isEmpty()：判断集合是否为空。</li><li>iterator()：返回一个迭代器（Iterator），可以用来遍历集合中的元素。</li><li>toArray()：将集合转换成数组。</li></ul><p>2.Map 接口：</p><ul><li>put()：向 map 中添加一个键值对。</li><li>get()：获取指定键对应的值。</li><li>remove()：从 map 中删除指定键对应的键值对。</li><li>containsKey()：判断 map 中是否包含指定键。</li><li>containsValue()：判断 map 中是否包含指定值。</li><li>size()：返回 map 中键值对的个数。</li><li>isEmpty()：判断 map 是否为空。</li><li>keySet()：返回 map 中所有键的集合。</li><li>values()：返回 map 中所有值的集合。</li><li>entrySet()：返回 map 中所有键值对的集合。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用 ArrayList 存储一组整数</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 [5, 2, 8]</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除索引为 1 的元素</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 [5, 8]</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 2</span><span class="token comment" spellcheck="true">// 使用 HashMap 存储一组学生的信息</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scores<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scores<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scores<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 90</span>scores<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除王五的成绩</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 {张三=90, 李四=80}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scores<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 true</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> scores<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" 的成绩是 "</span> <span class="token operator">+</span> scores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-6-ArrayList、LinkedList和HashSet等类"><a href="#4-6-ArrayList、LinkedList和HashSet等类" class="headerlink" title="4.6.ArrayList、LinkedList和HashSet等类"></a>4.6.ArrayList、LinkedList和HashSet等类</h3><p>ArrayList、LinkedList和HashSet是Java中常用的集合类，它们分别对应着不同的数据结构和功能。</p><p>ArrayList是基于动态数组实现的，它可以自动扩容以适应不同的元素数量。因为内部使用数组来存储元素，所以随机访问元素的效率非常高，但在插入和删除元素时需要移动数组中的其他元素，效率较低。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个ArrayList对象</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String fruit <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 在指定位置插入元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改元素</span>        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除元素</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是否包含某个元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"List contains apple."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取元素数量</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"List size: "</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>LinkedList是基于双向链表实现的，它可以在任意位置高效地插入和删除元素，但随机访问元素的效率比较低，因为需要从头或尾开始遍历链表。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个LinkedList对象</span>        LinkedList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String fruit <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 在指定位置插入元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改元素</span>        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除元素</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是否包含某个元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"List contains apple."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取元素数量</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"List size: "</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HashSet是基于哈希表实现的，它可以快速地检查元素是否存在，但元素的顺序是不确定的。当需要存储大量数据时，HashSet通常比List或Set更高效，但如果需要保持元素的插入顺序或按照某种规则排序，则应该使用List或TreeSet等集合类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个HashSet对象</span>        HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String fruit <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断是否包含某个元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Set contains apple."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 删除元素</span>        set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取元素数量</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Set size: "</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>除了基本的增删查改操作外，这些集合类还提供了一些常用的方法，如isEmpty、size、contains、add、remove、iterator等。在使用时应根据具体的需求选择适合的集合类，并注意它们的性能和特性。</p><h3 id="4-7-Date和Calendar类"><a href="#4-7-Date和Calendar类" class="headerlink" title="4.7.Date和Calendar类"></a>4.7.Date和Calendar类</h3><p>Date 类表示日期和时间，而 Calendar 类提供了对日期和时间进行操作的方法。以下是它们的简单介绍和示例代码：</p><p>Date 类示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 Date 对象</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将 Date 对象转换为指定格式的字符串</span>SimpleDateFormat dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String dateString <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在控制台上打印日期字符串</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Calendar 类示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 Calendar 对象</span>Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取当前时间的年、月、日等信息</span><span class="token keyword">int</span> year <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意月份是从 0 开始计数的</span><span class="token keyword">int</span> day <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> hour <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> minute <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> second <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在控制台上打印日期字符串</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> minute <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需要注意的是，Date 类已经过时了，应该使用 java.time 包中的类来代替它。例如，可以使用 LocalDateTime 类来表示日期和时间，并使用 DateTimeFormatter 类将其转换为指定格式的字符串。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 LocalDateTime 对象</span>LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将 LocalDateTime 对象转换为指定格式的字符串</span>DateTimeFormatter formatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String dateString <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在控制台上打印日期字符串</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-8-InputStream和OutputStream类"><a href="#4-8-InputStream和OutputStream类" class="headerlink" title="4.8.InputStream和OutputStream类"></a>4.8.InputStream和OutputStream类</h3><p>InputStream 和 OutputStream 是 Java 中用于读取和写入数据的抽象类。它们是输入流和输出流的父类，提供了一些通用的方法，例如 read() 和 write()。</p><p>InputStream 类示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 FileInputStream 对象来读取文件</span>InputStream input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"path/to/file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读取单个字节，并打印到控制台上</span><span class="token keyword">int</span> data <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 关闭输入流</span>input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>OutputStream 类示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 FileOutputStream 对象来写入文件</span>OutputStream output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"path/to/file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写入单个字节</span>output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭输出流</span>output<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需要注意的是，在使用输入流和输出流时，需要注意流的关闭操作。可以使用 try-catch 语句来自动关闭流，以确保资源的正确释放。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"path/to/file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     OutputStream output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"path/to/another/file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 读取并写入数据</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理异常</span><span class="token punctuation">}</span></code></pre><p>此外，Java 还提供了一些具体的输入流和输出流类，例如 FileInputStream、FileOutputStream、ByteArrayInputStream、ByteArrayOutputStream、ObjectInputStream、ObjectOutputStream 等，可以根据需要选择适合的流类。</p><h3 id="4-9-Reader和Writer类"><a href="#4-9-Reader和Writer类" class="headerlink" title="4.9.Reader和Writer类"></a>4.9.Reader和Writer类</h3><p>Reader 和 Writer 是 Java 中用于读取和写入字符数据的抽象类。它们是字符输入流和字符输出流的父类，提供了一些通用的方法，例如 read() 和 write()。</p><p>Reader 类示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 FileReader 对象来读取文件</span>Reader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"path/to/file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个字符数组来存储读取的数据</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读取数据到字符数组中，并打印到控制台上</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 关闭输入流</span>reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Writer 类示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 FileWriter 对象来写入文件</span>Writer writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"path/to/file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写入字符串</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭输出流</span>writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此外，Java 还提供了一些具体的字符输入流和字符输出流类，例如 FileReader、FileWriter、BufferedReader、BufferedWriter 等，可以根据需要选择适合的流类。</p><h3 id="4-10-File和Path类"><a href="#4-10-File和Path类" class="headerlink" title="4.10.File和Path类"></a>4.10.File和Path类</h3><p>File 和 Path 是 Java 中用于表示文件和目录路径的类。它们提供了一些常用的方法，例如创建、删除、重命名文件或目录、获取文件属性等。</p><p>File 类示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 File 对象表示文件</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"path/to/file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断文件是否存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除文件</span>    file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建文件</span>    file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建一个 File 对象表示目录</span>File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"path/to/directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断目录是否存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除目录及其所有子目录和文件</span>    <span class="token function">deleteDir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建目录</span>    dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 递归删除目录及其所有子目录和文件</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteDir</span><span class="token punctuation">(</span>File dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">deleteDir</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    dir<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Path 类示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个 Path 对象</span>Path path <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"path/to/file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取文件名</span>String fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取文件所在的目录路径</span>Path parentPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断文件是否存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Files<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除文件</span>    Files<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建文件</span>    Files<span class="token punctuation">.</span><span class="token function">createFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建一个目录路径</span>Path dirPath <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"path/to/directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断目录是否存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Files<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除目录及其所有子目录和文件</span>    Files<span class="token punctuation">.</span><span class="token function">walkFileTree</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span><span class="token operator">&lt;</span>Path<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> FileVisitResult <span class="token function">visitFile</span><span class="token punctuation">(</span>Path file<span class="token punctuation">,</span> BasicFileAttributes attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            Files<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> FileVisitResult<span class="token punctuation">.</span>CONTINUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> FileVisitResult <span class="token function">postVisitDirectory</span><span class="token punctuation">(</span>Path dir<span class="token punctuation">,</span> IOException exc<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            Files<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> FileVisitResult<span class="token punctuation">.</span>CONTINUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建目录</span>    Files<span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要注意的是，File 类和 Path 类的使用方式有所不同，前者是基于文件系统路径的，后者是基于统一的路径抽象概念。在 Java 7 中引入的 Files 类提供了一些基于 Path 类的文件操作方法，更加方便和安全。因此，尽可能使用 Path 类和 Files 类进行文件操作是一个良好的编程实践。</p><h2 id="5-JAVA异常处理"><a href="#5-JAVA异常处理" class="headerlink" title="5.JAVA异常处理"></a>5.JAVA异常处理</h2><p>Java 异常处理是 Java 语言中重要的特性之一。在 Java 中，异常指的是程序执行过程中出现的一些异常情况，例如输入错误、文件不存在、网络连接中断等。当程序遇到异常情况时，会抛出一个异常对象，程序可以通过捕获这个异常对象并处理它，以便程序能够正常地继续执行或者给用户友好的提示。</p><p>Java 中的异常分为两类：受检异常（Checked Exception）和非受检异常（Unchecked Exception）。受检异常是在编译时就可以预见的异常，程序在调用可能会抛出受检异常的方法时必须进行异常处理，否则编译器会报错。例如，FileNotFoundException 就是一个受检异常，如果程序使用 FileReader 类读取一个不存在的文件，就必须处理 FileNotFoundException 异常。</p><p>非受检异常是在运行时才会出现的异常，通常是由程序错误导致的，例如数组下标越界、空指针引用等。这些异常是无法在编译时预见的，程序可以选择处理这些异常，但也可以不处理。如果不处理，这些异常会被传递到调用者处，最终导致程序崩溃。常见的非受检异常包括 RuntimeException、NullPointerException、ArrayIndexOutOfBoundsException 等。</p><p>Java 异常处理的关键在于 try-catch 块。程序在 try 块中执行可能会抛出异常的代码，如果抛出异常，则跳转到 catch 块，并执行相应的异常处理代码。catch 块可以处理多种类型的异常，也可以选择不处理异常，直接将异常向上传递到调用者处。finally 块中的代码无论异常是否发生都会执行，通常用于释放资源等清理工作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 可能会抛出异常的代码</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionType1</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理 ExceptionType1 异常</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionType2</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理 ExceptionType2 异常</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 清理工作</span><span class="token punctuation">}</span></code></pre><h3 id="5-1-自定义异常"><a href="#5-1-自定义异常" class="headerlink" title="5.1.自定义异常"></a>5.1.自定义异常</h3><p>在 Java 中，我们可以通过继承 Exception 类或 RuntimeException 类来自定义异常。自定义异常可以帮助我们更好地管理程序中的异常情况，从而提高程序的可读性和可维护性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errorCode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们定义了一个名为 MyException 的异常类，它继承自 Exception 类。我们添加了一个 errorCode 属性，用于记录异常的错误码，以便程序在处理异常时能够更好地识别异常类型。</p><p>在 MyException 类中，我们添加了一个带有两个参数的构造函数，用于创建一个新的 MyException 对象。第一个参数是异常的详细信息，第二个参数是异常的错误码。我们还添加了一个 getErrorCode() 方法，用于获取错误码。</p><p>我们可以在程序中抛出 MyException 异常，并捕获它：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 可能会抛出 MyException 异常的代码</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误码："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误信息："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过自定义异常，我们可以更好地管理程序中的异常情况，提高程序的可读性和可维护性。我们可以根据实际需要定义多个自定义异常类，以便程序能够更好地识别和处理不同的异常情况。</p><h2 id="6-JAVA反射"><a href="#6-JAVA反射" class="headerlink" title="6.JAVA反射"></a>6.JAVA反射</h2><p>Java 反射（Reflection）是 Java 的一个重要特性，它允许程序在运行时动态地获取类的信息并操作对象。Java 反射使得程序可以在编译时不知道类名的情况下创建对象、调用方法、访问成员变量等。<br>Java 反射提供了一组 API，可以在运行时获取类的信息。这些 API 包括 Class 类、Constructor 类、Method 类、Field 类等。下面是一个简单的 Java 反射示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Method setMethod <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setNumber"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    setMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Method getMethod <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> getMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number = "</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们使用了 Class.forName() 方法获取了名为 MyClass 的类的 Class 对象，然后使用 newInstance() 方法创建了 MyClass 类的实例对象。我们通过 getDeclaredMethod() 方法获取了 MyClass 类的 setNumber() 和 getNumber() 方法，并使用 invoke() 方法调用了这些方法。<br>Java 反射的主要用途包括：</p><ul><li>动态创建对象：在运行时创建类的实例对象，可以在编译时不知道类名的情况下创建对象。</li><li>动态调用方法：在运行时调用类的方法，可以在编译时不知道方法名的情况下调用方法。</li><li>动态访问成员变量：在运行时获取和设置类的成员变量，可以在编译时不知道成员变量名的情况下访问成员变量。</li><li>获取类的信息：在运行时获取类的信息，包括类名、父类、接口、构造方法、成员变量、方法等。<br>需要注意的是，由于 Java 反射使用了一些底层机制，因此使用反射可能会降低程序的性能。在实际开发中，我们应该根据实际情况谨慎使用反射。</li></ul><h2 id="7-JAVA注解"><a href="#7-JAVA注解" class="headerlink" title="7.JAVA注解"></a>7.JAVA注解</h2><p>Java 注解（Annotation）是 Java 5 中引入的一个特性，它提供了一种注释 Java 代码的方式，可以在不改变程序代码逻辑的情况下向程序添加元数据。Java 注解可以用于生成文档、代码分析、编译时检查等场景，可以提高程序的可读性、可维护性和可扩展性。</p><p>Java 注解的语法格式为 @注解名，它可以出现在类、方法、变量等程序元素前面，用于表示这个程序元素的一些特性或限制。Java 内置了一些注解，如 @Override、@Deprecated、@SuppressWarnings 等。除了内置注解，Java 还支持自定义注解，我们可以使用 @interface 关键字来定义自己的注解。</p><p>下面是一个自定义注解的例子：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们使用 @Target 注解指定了这个注解的作用范围为方法，使用 @Retention 注解指定了这个注解的生命周期为运行时。我们定义了一个名为 MyAnnotation 的注解，它有两个属性：value 和 priority。value 属性的默认值为 “”，priority 属性的默认值为 0。</p><p>我们可以在程序中使用这个注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> priority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们在 doSomething() 方法前面添加了 @MyAnnotation 注解，并指定了 value 和 priority 属性的值。</p><p>通过自定义注解，我们可以在程序中添加一些元数据，以便程序能够更好地理解、分析和优化。在实际开发中，我们可以根据实际需要定义多个自定义注解，并在程序中使用它们。</p><h3 id="7-1-使用注解"><a href="#7-1-使用注解" class="headerlink" title="7.1.使用注解"></a>7.1.使用注解</h3><p>在 Java 中，注解可以用于标记程序元素，如类、方法、变量等，以提供更多的信息和限制。下面是一些使用注解的例子：<br>1、标记方法为废弃的<br>Java 内置了一个 @Deprecated 注解，可以用于标记方法已经过时，不建议再使用：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>在使用这个方法时，编译器会发出警告信息，提醒我们不要使用这个方法。<br>2、检查未处理的异常<br>Java 内置了一个 @SuppressWarnings 注解，可以用于禁止指定的警告信息或检查：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，@SuppressWarnings 注解用于禁止“unchecked”警告信息。如果不使用这个注解，编译器会提示“unchecked”警告信息，因为这个方法使用了未经检查的类型。<br>3、自定义注解<br>我们也可以定义自己的注解，以标记程序元素的特性和限制。比如，我们可以定义一个 @NotNull 注解，用于标记一个变量不允许为空：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NotNull</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们定义了一个名为 NotNull 的注解，它的作用范围为字段。我们可以在程序中使用这个注解：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们使用 @NotNull 注解标记了 name 字段，表示这个字段不允许为空。</p><h2 id="8-JAVA泛型"><a href="#8-JAVA泛型" class="headerlink" title="8.JAVA泛型"></a>8.JAVA泛型</h2><p>Java 泛型是 Java SE 5.0 引入的一个重要特性，它提供了编写类型安全的代码的机制。泛型使得编写的代码更加灵活、可读性更好，并且在编译时就可以检测出类型错误，从而避免了在运行时发生的错误。</p><p>泛型的基本概念是参数化类型，它允许我们在定义类、接口、方法时指定类型参数。在 Java 中，我们使用尖括号（&lt;&gt;）来指定类型参数，这些参数可以在类或方法的声明中使用。下面是一个泛型类的示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Box</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们定义了一个名为 Box 的泛型类，它有一个类型参数 T。在类的声明中，我们使用了类型参数 T，并在构造方法和 getter&#x2F;setter 方法中使用了它。这样，我们就可以在使用 Box 类时指定它的类型参数，比如：</p><pre class=" language-java"><code class="language-java">Box<span class="token operator">&lt;</span>String<span class="token operator">></span> stringBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String str <span class="token operator">=</span> stringBox<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个例子中，我们创建了一个类型为 String 的 Box 对象，然后从它的 value 属性中获取了字符串值。</p><p>除了泛型类，Java 还支持泛型接口和泛型方法。泛型接口和泛型类的定义方式类似，而泛型方法则是在方法声明中指定类型参数，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getFirst</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> null <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们定义了一个名为 getFirst 的泛型方法，它有一个类型参数 T。在方法的实现中，我们使用了 List<T> 类型的参数，并返回 List 的第一个元素。这个方法可以用于获取列表的第一个元素，而不需要指定列表元素的类型。</p><h3 id="8-1-使用泛型"><a href="#8-1-使用泛型" class="headerlink" title="8.1.使用泛型"></a>8.1.使用泛型</h3><p>1、泛型类<br>泛型类是一种具有类型参数的类，它可以用于表示一种通用的数据类型，比如 List<T>，Map&lt;K, V&gt; 等。在定义泛型类时，需要在类名后面加上类型参数列表，类型参数列表可以包含一个或多个类型参数，用逗号隔开，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Box</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们定义了一个名为 Box 的泛型类，它有一个类型参数 T。在类的声明中，我们使用了类型参数 T，并在构造方法和 getter&#x2F;setter 方法中使用了它。<br>2、泛型方法<br>泛型方法是一种具有类型参数的方法，它可以用于表示一种通用的行为，比如排序、查找等操作。在定义泛型方法时，需要在方法名前面加上类型参数列表，类型参数列表可以包含一个或多个类型参数，用逗号隔开，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getFirst</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> null <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们定义了一个名为 getFirst 的泛型方法，它有一个类型参数 T。在方法的实现中，我们使用了 List<T> 类型的参数，并返回 List 的第一个元素。<br>3、通配符<br>通配符是一种用于表示泛型类型参数的占位符，它可以用于表示任何类型或某个特定类型的子类型。在 Java 中，通配符使用问号（?）来表示，例如：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个例子中，我们创建了一个 ArrayList<String> 对象，并将它赋值给 List&lt;?&gt; 类型的变量。这个变量可以表示任何类型的 List 对象，但是我们无法修改它的内容。<br>4、上界通配符<br>上界通配符是一种用于限制泛型类型参数的类型的通配符，它可以用于表示某个类型及其子类型。在 Java 中，上界通配符使用 extends 关键字来表示，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>T item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        total <span class="token operator">+=</span> item<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们定义了一个名为 sum 的泛型方法，它有一个类型参数 T，T 的上界为 Number。在方法的实现中</p><h3 id="8-2-编写泛型"><a href="#8-2-编写泛型" class="headerlink" title="8.2.编写泛型"></a>8.2.编写泛型</h3><p>1、在类名或方法名后面使用尖括号（&lt;&gt;）定义泛型类型参数，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>2、在类的成员变量、方法参数、方法返回值等处使用泛型类型参数，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、在创建对象或调用方法时，传递实际类型参数，例如：</p><pre class=" language-java"><code class="language-java">Box<span class="token operator">&lt;</span>String<span class="token operator">></span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String value <span class="token operator">=</span> box<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个例子中，我们创建了一个名为 box 的 Box 对象，并将其类型参数设置为 String。然后，我们调用 setValue 方法设置值为 “Hello, World!”，并调用 getValue 方法获取该值。<br>4、可以使用通配符来限制泛型类型参数的范围，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Number number <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        total <span class="token operator">+=</span> number<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这个例子中，我们定义了一个名为 sum 的静态方法，它的参数类型为 List&lt;? extends Number&gt;，表示可以接受任何 Number 或其子类型的 List。在方法的实现中，我们使用了 Number 的 doubleValue 方法将其转换为 double 类型，并累加到 total 中。</p><p>总的来说，泛型可以使我们的代码更加通用和灵活，同时也提高了代码的可读性和可维护性。但是在使用泛型时需要注意一些细节，比如类型擦除、类型参数限制、泛型方法等，需要仔细学习和理解。</p><h3 id="8-3-extends和super通配符"><a href="#8-3-extends和super通配符" class="headerlink" title="8.3.extends和super通配符"></a>8.3.extends和super通配符</h3><p>extends 和 super 是两种常用的通配符限定符，用于限定泛型类型参数的上界和下界。</p><p>1、使用 extends 通配符可以将泛型类型参数限定为某个类型的子类型，例如：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的 ? extends Number 表示 list 可以是任何 Number 类型的子类，例如 Integer、Double 等。在这个例子中，我们将 ArrayList<Integer> 赋值给 list 变量，因为 Integer 是 Number 的子类。</p><p>extends 通配符可以用在泛型类型参数的声明、方法的参数、方法的返回值等多个场景中。在方法的参数中使用 extends 通配符时，表示可以接受任何符合类型限定的对象作为参数，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Number number <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        total <span class="token operator">+=</span> number<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、使用 super 通配符可以将泛型类型参数限定为某个类型的超类型，例如：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的 ? super Integer 表示 list 可以是任何 Integer 类型的父类，例如 Number、Object 等。在这个例子中，我们将 ArrayList<Number> 赋值给 list 变量，因为 Number 是 Integer 的父类。</p><p>super 通配符可以用在泛型类型参数的声明、方法的参数等多个场景中。在方法的参数中使用 super 通配符时，表示可以接受任何类型限定的超类型对象作为参数，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Integer<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="9-JAVA集合"><a href="#9-JAVA集合" class="headerlink" title="9.JAVA集合"></a>9.JAVA集合</h2><p>Java 中的集合（Collection）是一种用于存储对象的容器，可以用来管理和操作一组元素。Java 提供了多种集合类型，包括 List、Set、Queue 和 Map 等。其中，List、Set 和 Queue 是继承自 Collection 接口的子接口，而 Map 则是一个独立的接口。</p><ul><li>List<br>List 是一个有序的集合，可以按照元素插入的顺序进行访问。常用的实现类有 ArrayList 和 LinkedList。ArrayList 是一个基于动态数组的实现，支持随机访问和快速插入&#x2F;删除操作；LinkedList 是一个基于双向链表的实现，支持高效的插入&#x2F;删除操作。</li></ul><p>List 接口提供了一系列方法，可以对列表进行增删改查等操作。例如：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 apple</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 [apple, orange]</span></code></pre><ul><li>Set<br>Set 是一个无序的集合，不允许重复元素。常用的实现类有 HashSet 和 TreeSet。HashSet 是一个基于哈希表的实现，支持快速的插入&#x2F;查找操作；TreeSet 是一个基于红黑树的实现，支持自然排序和范围查询等操作。</li></ul><p>Set 接口也提供了一系列方法，可以对集合进行增删改查等操作。例如：</p><pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 true</span>set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 [apple, orange]</span></code></pre><ul><li>Queue<br>Queue 是一个队列，支持先进先出（FIFO）的操作。常用的实现类有 LinkedList 和 PriorityQueue。LinkedList 是一个基于双向链表的实现，支持快速的入队&#x2F;出队操作；PriorityQueue 是一个基于堆的实现，支持按照优先级进行排序。</li></ul><p>Queue 接口定义了一些方法，用于对队列进行入队出队等操作。例如：</p><pre class=" language-java"><code class="language-java">Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 apple</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 apple</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 [banana, orange]</span></code></pre><ul><li>Map<br>Map 是一个键值对集合，可以通过键来访问值。常用的实现类有 HashMap 和 TreeMap。HashMap 是一个基于哈希表的实现，支持快速的查找&#x2F;插入操作；TreeMap 是一个基于红黑树的实现，支持按照键的自然排序和范围查询等操作。</li></ul><p>Map 接口定义了一系列方法，用于对映射进行操作。例如：</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println</code></pre><h2 id="10-JAVA正则表达式"><a href="#10-JAVA正则表达式" class="headerlink" title="10.JAVA正则表达式"></a>10.JAVA正则表达式</h2><p>正则表达式是一种用来描述字符序列的一种语法规则。在 Java 中，正则表达式被广泛地应用于字符串匹配、替换、拆分等操作。</p><p>Java 中的正则表达式由特定的字符和元字符组成，可以用来表示一定范围内的字符、一组字符、一种字符的数量和位置等信息。以下是一些常用的元字符：</p><ul><li><p>^ 表示匹配字符串的开头</p></li><li><p>$ 表示匹配字符串的结尾</p></li><li><p>. 表示匹配任意一个字符</p></li><li><p>? 表示匹配零个或一个前面的字符</p></li><li><p>[] 表示匹配方括号中的任意一个字符</p></li><li><p>() 表示捕获匹配的子串<br>以下是一些常用的正则表达式示例：</p></li><li><p>匹配以数字开头的字符串：^[0-9].*</p></li><li><p>匹配包含数字和字母的字符串：^[0-9a-zA-Z]+$</p></li><li><p>匹配包含 email 地址的字符串：^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(.[a-zA-Z0-9_-]+)+$</p></li><li><p>匹配包含手机号的字符串：^1[3-9][0-9]{9}$<br>在 Java 中，可以使用 Pattern 和 Matcher 类来操作正则表达式。以下是一个示例：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String input <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span>        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个示例中，首先创建了一个 Pattern 对象，用来表示匹配单词的正则表达式。然后创建了一个 Matcher 对象，并将其应用于输入字符串。最后，通过调用 Matcher 对象的 find() 方法来查找匹配项，并通过 group() 方法来获取匹配的字符串。</p><h2 id="11-JAVA单元测试"><a href="#11-JAVA单元测试" class="headerlink" title="11.JAVA单元测试"></a>11.JAVA单元测试</h2><p>单元测试是一种用来测试软件系统中最小可测试单元的方法。在 Java 中，单元测试通常使用 JUnit 框架来实现。</p><p>JUnit 是一个开源的 Java 单元测试框架，它可以帮助开发人员编写和运行测试用例，并提供丰富的断言、测试组织和测试结果报告等功能。</p><p>以下是一个使用 JUnit 进行单元测试的示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Calculator calculator<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSubtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个示例中，首先引入了 JUnit 相关的类和方法。然后定义了一个 CalculatorTest 类，并在其中定义了两个测试方法 testAdd() 和 testSubtract()。在每个测试方法中，首先创建了一个 Calculator 对象，并调用其相应的方法进行计算。然后使用 assertEquals() 方法来判断实际结果是否等于期望结果。<br>JUnit 提供了许多类和方法，可以帮助开发人员编写和运行各种类型的测试用例，例如：</p><ul><li>@Before：在每个测试方法执行之前运行的方法。</li><li>@After：在每个测试方法执行之后运行的方法。</li><li>@Test：用来标识一个测试方法。</li><li>@Ignore：用来标识一个被忽略的测试方法。</li><li>assertEquals()：用来判断实际结果是否等于期望结果。</li><li>assertTrue()：用来判断实际结果是否为 true。</li><li>assertFalse()：用来判断实际结果是否为 false。</li><li>assertNull()：用来判断实际结果是否为 null。</li><li>assertNotNull()：用来判断实际结果是否不为 null。<br>JUnit 还提供了丰富的测试报告和测试统计信息，可以帮助开发人员更好地了解测试用例的执行情况和测试覆盖率等信息。通过使用 JUnit，开发人员可以更加方便地进行单元测试，从而提高软件系统的质量和稳定性。</li></ul><h2 id="12-多线程"><a href="#12-多线程" class="headerlink" title="12.多线程"></a>12.多线程</h2><p>多线程是指在一个程序中同时执行多个线程（Thread）。在 Java 中，实现多线程有两种方式：继承 Thread 类和实现 Runnable 接口。</p><p>1、继承 Thread 类<br>实现多线程最基本的方式是继承 Thread 类，重写 run() 方法，然后创建 Thread 的子类对象并调用 start() 方法。</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 线程执行的代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个示例中，我们定义了一个 MyThread 类，并重写了 Thread 类的 run() 方法，该方法包含了线程实际执行的代码。在主线程中，我们创建了 MyThread 的子类对象，并调用 start() 方法启动该线程。</p><p>2、实现 Runnable 接口<br>实现 Runnable 接口是另一种实现多线程的方式，它更加灵活，因为一个类可以实现多个接口，而继承只能继承一个父类。</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 线程执行的代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyRunnable runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个示例中，我们定义了一个 MyRunnable 类，并实现了 Runnable 接口，该接口只有一个 run() 方法。在主线程中，我们创建了 MyRunnable 类的对象，并将其传递给 Thread 类的构造方法，然后调用 start() 方法启动该线程。</p><p>多线程在实际开发中应用非常广泛，它可以提高程序的效率和性能，同时也能增加程序的复杂性和难度。开发人员需要仔细设计和测试多线程程序，避免出现死锁、竞态条件和资源争用等问题。同时，Java 还提供了许多多线程相关的类和方法，例如锁、条件变量、线程池等，可以帮助开发人员更好地管理和控制多线程程序的执行。</p><h2 id="13-spring-boot开发"><a href="#13-spring-boot开发" class="headerlink" title="13.spring boot开发"></a>13.spring boot开发</h2><p>Spring Boot 是 Spring 框架的一种新的编程模型，它致力于使 Spring 应用程序的开发更加简单、快速和便捷。Spring Boot 的特点是可以轻松创建独立的、生产级别的 Spring 应用程序，并使用嵌入式 Web 服务器（如 Tomcat、Jetty 和 Undertow）运行应用程序，无需打包成 WAR 文件部署到外部 Web 服务器。</p><p>以下是使用 Spring Boot 进行开发的一些基本步骤：</p><p>1、安装 Spring Boot<br>Spring Boot 可以通过 Maven 或 Gradle 进行安装，也可以直接下载安装包进行安装。具体安装方法可以参考官方文档。</p><p>2、创建项目<br>可以使用 Spring Initializr 快速创建 Spring Boot 项目。Spring Initializr 是一个基于 Web 的工具，可以生成基本的项目结构和 Maven&#x2F;Gradle 配置文件。在 Spring Initializr 中，可以选择所需的依赖项和插件，例如 Spring Web、Spring Data JPA、Thymeleaf 等。创建完毕后，可以使用 Maven 或 Gradle 进行构建。</p><p>3、编写代码<br>可以使用任何喜欢的集成开发环境（IDE）编写代码，例如 IntelliJ IDEA、Eclipse 或 Visual Studio Code。Spring Boot 使用注解（Annotation）来配置应用程序，例如 @SpringBootApplication、@RestController、@RequestMapping 等。开发人员可以使用这些注解来配置应用程序，然后通过 Maven 或 Gradle 进行构建。</p><p>4、测试应用程序<br>Spring Boot 提供了一套完整的测试框架，可以帮助开发人员对应用程序进行单元测试、集成测试和端到端测试。在测试过程中，可以使用 Mockito 和 JUnit 等测试工具。</p><p>5、打包和部署<br>在开发完成后，可以使用 Maven 或 Gradle 进行打包，然后将应用程序部署到生产环境中。Spring Boot 可以打包成可执行的 JAR 文件，也可以打包成 WAR 文件部署到外部 Web 服务器。</p><p>总的来说，Spring Boot 是一个快速、简单、灵活的开发框架，可以帮助开发人员快速构建高质量的 Spring 应用程序。同时，Spring Boot 还提供了丰富的扩展库和工具，可以帮助开发人员更好地管理和扩展应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大整数、数据结构</title>
      <link href="/2023/02/17/big-data-calculate-and-data-structure/"/>
      <url>/2023/02/17/big-data-calculate-and-data-structure/</url>
      
        <content type="html"><![CDATA[<h2 id="1-集合类"><a href="#1-集合类" class="headerlink" title="1.集合类"></a>1.集合类</h2><p>Java中集合类可以用来存储和操作对象的容器，其中包括List、Set和Map等。</p><h3 id="1-1-不定长数组"><a href="#1-1-不定长数组" class="headerlink" title="1.1.不定长数组"></a>1.1.不定长数组</h3><p>在 Java 中，可以使用 ArrayList 类来实现不定长数组。ArrayList 是 Java Collections Framework 中的一种动态数组实现，提供了自动扩容的功能。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicArrayExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> arrList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加元素</span>        arrList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取元素</span>        <span class="token keyword">int</span> element <span class="token operator">=</span> arrList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Element at index 1: "</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改元素</span>        arrList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除元素</span>        arrList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Element at index "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> arrList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-List组合"><a href="#1-2-List组合" class="headerlink" title="1.2.List组合"></a>1.2.List组合</h3><p>List集合可以用来存储一组有序的元素，可以允许重复元素存在。常用的List集合有ArrayList和LinkedList。</p><ul><li>ArrayList代码示例：</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：apple</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：3</span></code></pre><ul><li>LinkedList代码示例：</li></ul><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：apple</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：3</span></code></pre><h3 id="1-3-Set集合"><a href="#1-3-Set集合" class="headerlink" title="1.3.Set集合"></a>1.3.Set集合</h3><p>Set集合用于存储一组唯一的元素，不允许重复元素存在。常用的Set集合有HashSet和TreeSet。</p><ul><li>HashSet代码示例：</li></ul><pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：3</span></code></pre><ul><li>TreeSet代码示例：</li></ul><pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：3</span></code></pre><h3 id="1-4-Map集合"><a href="#1-4-Map集合" class="headerlink" title="1.4.Map集合"></a>1.4.Map集合</h3><p>Map集合用于存储一组键值对，其中每个键唯一对应一个值。常用的Map集合有HashMap和TreeMap。</p><ul><li>HashMap代码示例：</li></ul><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：red</span></code></pre><ul><li>TreeMap代码示例：</li></ul><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出：red</span></code></pre><h2 id="2-大整数运算"><a href="#2-大整数运算" class="headerlink" title="2.大整数运算"></a>2.大整数运算</h2><p>在Java中，如果需要进行大整数运算，可以使用BigInteger类来实现。BigInteger类可以表示任意长度的整数，可以进行加、减、乘、除、模等运算，以及与其他类型（如long、int）的转换等操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigIntegerExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"987654321"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 加法</span>        BigInteger c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a + b = "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 乘法</span>        BigInteger d <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a * b = "</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面是一个简单的 C++ 实现示例，可以计算任意长度的大整数加法和乘法。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实现大整数加法</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> carry <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> carry <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>carry <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carry <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>carry<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现大整数乘法</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">multiply</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> carry <span class="token operator">+</span> res<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            carry <span class="token operator">=</span> tmp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>carry<span class="token punctuation">)</span> res<span class="token punctuation">[</span>i<span class="token operator">+</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> carry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出 vector 中的数</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>    cin <span class="token operator">>></span> s1 <span class="token operator">>></span> s2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将字符串转换为 vector</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        b<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 大整数加法和乘法</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出结果</span>    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-树"><a href="#3-树" class="headerlink" title="3.树"></a>3.树</h2><p>树是一种非常常见的数据结构，其本身是一种非线性结构，由许多节点构成。在树的结构中，每个节点可以有多个子节点，但是每个节点都只有一个父节点。树的便利（遍历）算法用于按照一定顺序访问树的所有节点。</p><p>常用的树的便利算法包括：前序遍历、中序遍历、后序遍历和层次遍历。</p><p>以下是这些算法的简要介绍：</p><ul><li>前序遍历（Preorder Traversal）：按照根节点 -&gt; 左子树 -&gt; 右子树的顺序访问树的所有节点。</li><li>中序遍历（Inorder Traversal）：按照左子树 -&gt; 根节点 -&gt; 右子树的顺序访问树的所有节点。</li><li>后序遍历（Postorder Traversal）：按照左子树 -&gt; 右子树 -&gt; 根节点的顺序访问树的所有节点。</li><li>层次遍历（Level Order Traversal）：按照从根节点开始逐层向下的顺序访问树的所有节点。<br>下面是这些算法的Java代码实现：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    TreeNode left<span class="token punctuation">;</span>    TreeNode right<span class="token punctuation">;</span>    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeTraversal</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 后序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 层次遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelOrderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>二叉树、红黑树和森林是树的特殊类型。</p><p>二叉树是一种特殊的树，它的每个节点最多有两个子节点，被称为左子节点和右子节点。二叉树可以用于实现一些常见的数据结构，例如二叉搜索树、堆和表达式树等。</p><p>红黑树是一种自平衡的二叉搜索树。它在插入和删除节点时能够自动保持平衡，确保树的高度不会超过 O(log n)。红黑树的结构简单，插入、删除和查找节点的时间复杂度都是 O(log n)。</p><p>森林是由多个树组成的数据结构，可以看作是多个独立的树的集合。在森林中，每个树都是独立的，树与树之间没有任何关联。</p><p>在遍历树时，可以使用递归或迭代算法。递归算法代码简单，易于理解，但在树较大时可能会导致栈溢出。迭代算法可以使用栈来模拟递归过程，避免栈溢出的问题。<br>下面是一个简单的二叉搜索树的 Java 实现示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    Node left<span class="token punctuation">;</span>    Node right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        left <span class="token operator">=</span> null<span class="token punctuation">;</span>        right <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BinarySearchTree</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Node <span class="token function">insert</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的 Node 类代表树中的一个节点，包含一个整数值、左子树和右子树。BinarySearchTree 类代表二叉搜索树，包含一个指向树根的节点 root 和各种树操作，如插入、搜索和中序遍历等。</p><h2 id="4-回溯法"><a href="#4-回溯法" class="headerlink" title="4.回溯法"></a>4.回溯法</h2><h3 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h3><p>八皇后问题是指将8个皇后放置在8×8的国际象棋棋盘上，使得每个皇后都无法攻击到其他皇后。这意味着每个皇后都位于不同的行、列或对角线上。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EightQueens</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> queen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">putQueen</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total solutions: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">putQueen</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printSolution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                queen<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">putQueen</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>queen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> queen<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>queen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> queen<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span>row <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSolution</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Solution "</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">": "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>queen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>C++实现：</p><pre class=" language-C++"><code class="language-C++">#include <iostream>using namespace std;const int maxn = 11;   // 棋盘大小int n;                 // 棋盘大小int row[maxn];         // 表示当前列上是否有皇后，row[i] = k表示第i列的皇后在第k行int ans;               // 答案计数器// 检查当前点(row, col)是否可以放置皇后bool check(int row, int col){    for (int i = 1; i < col; i++)        if (row == ::row[i] || abs(row - ::row[i]) == abs(col - i))            return false;    return true;}// dfs搜索void dfs(int col){    if (col == n+1)    {        ans++;  // 找到一种解法        return;    }    for (int i = 1; i <= n; i++)    {        if (check(i, col))        {            ::row[col] = i;     // 在该列放置皇后            dfs(col + 1);       // 继续下一列            ::row[col] = 0;     // 回溯到上一步        }    }}int main(){    cin >> n;    dfs(1);    cout << ans << endl;    return 0;}</code></pre><p>这是一个典型的深度优先搜索问题，我们按照列来搜索，在每一列中找到一个可以放置皇后的位置，然后继续下一列。对于每一行中的每一个点，需要判断当前点是否可以放置皇后，如果可以，则递归到下一列继续搜索；如果不行，则回溯到上一列继续搜索。该算法的时间复杂度是指数级别的，与棋盘大小n有关。因此，当n较大时，该算法的时间开销会非常大。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态、贪心、字符匹配</title>
      <link href="/2023/02/16/Dynamic-Greedy-Character-Matching/"/>
      <url>/2023/02/16/Dynamic-Greedy-Character-Matching/</url>
      
        <content type="html"><![CDATA[<h2 id="1-动态规划算法"><a href="#1-动态规划算法" class="headerlink" title="1.动态规划算法"></a>1.动态规划算法</h2><p>动态规划（Dynamic Programming）是一种常用的算法思想，主要用于解决具有重叠子问题和最优子结构性质的问题。动态规划算法的主要思想是将一个大问题分解为若干个小问题，并先求解小问题的解，最后将小问题的解组合成大问题的解。</p><p>动态规划算法通常包括以下步骤：</p><p>1、确定状态：将原问题转化为若干个子问题，并确定状态表示。状态表示应该尽量简洁明了，同时包含所有必要的信息。</p><p>2、确定转移方程：找到子问题之间的联系，即通过已知的子问题得到未知问题的解。这个过程通常称为“状态转移”。</p><p>3、确定边界条件：对于最简单的情况，我们需要确定一些初始条件或边界条件，以便启动算法。</p><p>4、计算结果：按照转移方程，从最简单的情况开始逐步计算出所有状态的值。</p><p>5、返回结果：根据计算结果，我们可以得到原问题的解。</p><h3 id="1-1-背包问题"><a href="#1-1-背包问题" class="headerlink" title="1.1.背包问题"></a>1.1.背包问题</h3><p>背包问题是一种经典的组合优化问题，旨在寻找在限制条件下能够装入背包中的最大价值的物品组合。该问题可以描述为：有一个容量为 W 的背包和 n 个物品，第 i 个物品的重量为 w_i，价值为 v_i。现在要选择一些物品放入背包中，使得在不超过背包容量 W 的前提下，所选物品的总价值最大。</p><p>背包问题是一个 NP-完全问题，即没有已知的高效算法可以在多项式时间内解决。不过，动态规划是解决背包问题的一种常用方法，可以在一定程度上优化求解过程。</p><p>在动态规划求解背包问题时，通常需要定义一个二维数组 dp，其中 dp[i][j] 表示在前 i 个物品中，能够装入容量为 j 的背包的最大价值。状态转移方程为：</p><pre><code>dp[i][j]=max&#123;dp[i−1][j],dp[i−1][j−wi]+vi&#125;</code></pre><p>其中，i 表示当前物品编号，j 表示当前背包容量，w_i 和 v_i 分别表示当前物品的重量和价值。如果当前物品重量 w_i 大于当前背包容量 j，则不能将当前物品放入背包中。</p><p>最终，背包问题的解为 dp[n][W]，即在前 n 个物品中，能够装入容量为 W 的背包的最大价值。<br>下面是一个简单的 0&#x2F;1 背包问题的 Java 代码实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">knapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxWeight<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化一个二维数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>weights<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxWeight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历物品和背包容量</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> maxWeight<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> weights<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当前物品装不下</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 当前物品可以装</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>weights<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>weights<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>maxWeight<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-最长公共子序列"><a href="#1-2-最长公共子序列" class="headerlink" title="1.2.最长公共子序列"></a>1.2.最长公共子序列</h3><p>最长公共子序列（Longest Common Subsequence，LCS）是指两个序列中都包含的最长子序列，不需要子序列在原序列中连续。例如，字符串 “ABCBDAB” 和 “BDCABA” 的 LCS 为 “BCBA”。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化一个二维数组</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历字符串s1和s2</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从 dp 数组中回溯出最长公共子序列</span>    StringBuilder lcsBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lcsBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将回溯得到的子序列反转并返回</span>    <span class="token keyword">return</span> lcsBuilder<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-最长上升子序列"><a href="#1-3-最长上升子序列" class="headerlink" title="1.3.最长上升子序列"></a>1.3.最长上升子序列</h3><p>最长上升子序列（Longest Increasing Subsequence，LIS）是指在一个序列中，找到一个最长的子序列，使得这个子序列中的元素是严格单调递增的。例如，对于序列 [10, 9, 2, 5, 3, 7, 101, 18]，最长上升子序列为 [2, 3, 7, 18]，长度为 4。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    right <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            dp<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-贪心算法"><a href="#2-贪心算法" class="headerlink" title="2.贪心算法"></a>2.贪心算法</h2><ul><li><p>贪心算法是一种常见的算法设计策略，它在每一步选择中都采取在当前状态下最优的选择，从而希望最终能够得到全局最优解。贪心算法与动态规划算法类似，都是解决最优化问题的算法，但它们之间的区别在于贪心算法的每一步选择都没有后效性，即某个状态以及之前的所有状态完全确定了此后的决策，而与之前的决策路径无关，因此贪心算法一般不保存之前的状态，因此空间复杂度较小。</p></li><li><p>贪心算法不是万能的，它的正确性需要满足贪心选择性质和最优子结构性质。贪心选择性质是指在做出每个选择时都采取当前状态下的最优选择；最优子结构性质是指原问题的最优解可以由子问题的最优解推导得到。</p></li><li><p>贪心算法的具体实现通常包括两个步骤：建立数学模型，根据问题特点设计贪心策略。建立数学模型通常是把问题抽象成一些数学模型，如图论、树形结构、网络流、线性规划等；根据问题特点设计贪心策略通常包括贪心策略的选择、证明和算法实现等。贪心算法通常需要结合具体问题具体分析，适当考虑问题的特殊性，尽可能地降低时间和空间复杂度。</p></li></ul><h3 id="2-1-背包问题"><a href="#2-1-背包问题" class="headerlink" title="2.1.背包问题"></a>2.1.背包问题</h3><ul><li><p>对于分数背包问题，我们可以将物品按照单位重量的价值从高到低排序，然后依次选择单位重量价值最高的物品直到背包装满为止。</p></li><li><p>对于完全背包问题，我们可以将物品按照单位重量的价值从高到低排序，然后依次选择单位重量价值最高的物品，直到背包容量不够为止。然后，对于剩余的背包容量，我们可以采用贪心算法中的贪心选择性质，选择单位重量价值最高的物品，直到背包装满为止。<br>分数背包问题：</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FractionalKnapsack</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> maxValue <span class="token operator">=</span> <span class="token function">fractionalKnapsack</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> values<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Maximum value we can obtain = "</span> <span class="token operator">+</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">fractionalKnapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Item<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">comparingDouble</span><span class="token punctuation">(</span>Item<span class="token operator">:</span><span class="token operator">:</span>valuePerWeight<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> maxValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Item item <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">>=</span> item<span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxValue <span class="token operator">+=</span> item<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                capacity <span class="token operator">-=</span> item<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                maxValue <span class="token operator">+=</span> capacity <span class="token operator">*</span> item<span class="token punctuation">.</span><span class="token function">valuePerWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">valuePerWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> value <span class="token operator">/</span> weight<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>完全背包问题:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Knapsack</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token function">knapsack</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> values<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Maximum value we can obtain = "</span> <span class="token operator">+</span> maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">knapsack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weights<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> weights<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> capacity<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-活动安排问题"><a href="#2-2-活动安排问题" class="headerlink" title="2.2.活动安排问题"></a>2.2.活动安排问题</h3><p>在贪心算法中，活动安排问题是指有n个活动，每个活动有一个开始时间和一个结束时间，你需要从这些活动中选择尽可能多的不冲突的活动。</p><p>具体地，给定n个活动的开始时间s和结束时间f，选择尽可能多的活动，使得它们的时间不重叠。该问题可以用贪心算法求解。</p><p>一种常用的贪心策略是每次选择结束时间最早的活动，这样可以留下更多的时间去安排其他活动。算法的具体实现可以使用以下步骤：</p><p>1、将所有的活动按照结束时间从小到大排序；<br>2、选择第一个活动；<br>3、依次选择下一个结束时间不冲突的活动，直到无法选择为止；<br>4、返回选择的活动集合。<br>通过这种贪心策略，可以保证得到最优解。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Activity</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Activity<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token function">Activity</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">-</span> activity<span class="token punctuation">.</span>end<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivitySelection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMaxActivities</span><span class="token punctuation">(</span>Activity<span class="token punctuation">[</span><span class="token punctuation">]</span> activities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>activities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> activities<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>activities<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start <span class="token operator">>=</span> activities<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Activity<span class="token punctuation">[</span><span class="token punctuation">]</span> activities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxActivities <span class="token operator">=</span> <span class="token function">getMaxActivities</span><span class="token punctuation">(</span>activities<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Maximum number of activities that can be scheduled: "</span> <span class="token operator">+</span> maxActivities<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-霍夫曼编码"><a href="#2-3-霍夫曼编码" class="headerlink" title="2.3.霍夫曼编码"></a>2.3.霍夫曼编码</h3><p>霍夫曼编码（Huffman Coding）是一种用于数据压缩的算法。它是一种可变字长编码（Variable Length Code）的编码方式，即不同的符号（如字符）在编码后的长度可以不同。</p><p>霍夫曼编码通过对不同的字符分配不同的编码，使得常用的字符的编码长度较短，不常用的字符的编码长度较长，从而达到压缩数据的效果。</p><p>霍夫曼编码的原理是：通过建立一颗哈夫曼树，将所有字符的出现频率作为叶子节点，将频率较小的字符放在较深的层次，频率较大的字符放在较浅的层次，这样，在编码时，频率高的字符编码长度短，频率低的字符编码长度长，从而达到压缩数据的效果。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuffmanCode</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HuffmanNode</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>HuffmanNode<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 对应的字符</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> freq<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 字符出现的频率</span>        <span class="token keyword">private</span> HuffmanNode left<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 左子树</span>        <span class="token keyword">private</span> HuffmanNode right<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 右子树</span>        <span class="token keyword">public</span> <span class="token function">HuffmanNode</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> freq<span class="token punctuation">,</span> HuffmanNode left<span class="token punctuation">,</span> HuffmanNode right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>freq <span class="token operator">=</span> freq<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 重写比较方法</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>HuffmanNode o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> freq <span class="token operator">-</span> o<span class="token punctuation">.</span>freq<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构造Huffman编码树</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HuffmanNode <span class="token function">buildHuffmanTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> freq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个优先队列，用于存储树节点</span>        PriorityQueue<span class="token operator">&lt;</span>HuffmanNode<span class="token operator">></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化优先队列，将所有的单个字符作为一颗单节点树加入优先队列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> freq<span class="token punctuation">.</span>length<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>freq<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HuffmanNode</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> freq<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 构造Huffman编码树</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            HuffmanNode left <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HuffmanNode right <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HuffmanNode parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuffmanNode</span><span class="token punctuation">(</span><span class="token string">'\0'</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>freq <span class="token operator">+</span> right<span class="token punctuation">.</span>freq<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            pq<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归地生成Huffman编码表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generateHuffmanCodes</span><span class="token punctuation">(</span>HuffmanNode node<span class="token punctuation">,</span> String code<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> huffmanCodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            huffmanCodes<span class="token punctuation">[</span>node<span class="token punctuation">.</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">generateHuffmanCodes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> code <span class="token operator">+</span> <span class="token string">"0"</span><span class="token punctuation">,</span> huffmanCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">generateHuffmanCodes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> code <span class="token operator">+</span> <span class="token string">"1"</span><span class="token punctuation">,</span> huffmanCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 主函数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入需要编码的字符串: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 统计每个字符出现的次数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> freq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            freq<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 构造Huffman编码树</span>        HuffmanNode root <span class="token operator">=</span> <span class="token function">buildHuffmanTree</span><span class="token punctuation">(</span>freq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成Huffman编码表</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> huffmanCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">generateHuffmanCodes</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> huffmanCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出编码结果</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>huffmanCodes<span class="token punctuation">[</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Huffman编码结果为: "</span> <span class="token operator">+</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上代码首先根据输入的字符串统计每个字符出现的次数，然后根据字符频率构建Huffman编码树，并通过递归的方式生成Huffman编码表，最后对输入的字符串进行编</p><h2 id="3-字符串匹配算法"><a href="#3-字符串匹配算法" class="headerlink" title="3.字符串匹配算法"></a>3.字符串匹配算法</h2><p>字符串匹配算法用于在一个主串中查找一个模式串的位置，也被称为子串查找。在计算机科学中，字符串匹配算法是一类重要的基本算法，在各种应用中都得到了广泛的应用，比如搜索引擎、数据库查询、文本编辑器、语音识别、网络协议等。</p><h3 id="3-1-朴素算法"><a href="#3-1-朴素算法" class="headerlink" title="3.1.朴素算法"></a>3.1.朴素算法</h3><p>朴素算法（也称为暴力算法）是最简单的字符串匹配算法，它的基本思想是从主串的第一个字符开始依次比较模式串，如果模式串中的每个字符都与主串中对应位置的字符相同，就说明匹配成功。如果模式串中的任意一个字符与主串中对应位置的字符不相同，就将模式串后移一位，然后再次比较，直到模式串中的所有字符都与主串中的对应位置的字符相同，或者主串的末尾被比较完毕为止。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> String pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">!=</span> pattern<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> m<span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配成功，返回匹配的位置</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 匹配失败，返回-1</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-KMP算法"><a href="#3-2-KMP算法" class="headerlink" title="3.2.KMP算法"></a>3.2.KMP算法</h3><p>KMP算法（Knuth-Morris-Pratt Algorithm）是一种高效的字符串匹配算法，可以在时间复杂度为O(n+m)的情况下，解决模式串在文本串中的匹配问题。</p><p>KMP算法的核心思想是：当出现不匹配的字符时，利用已经匹配过的信息，尽量减少模式串与文本串的匹配次数。具体实现是在模式串中预处理出一个next数组，用来记录模式串中每个前缀的最长公共前后缀长度。</p><p>KMP算法的过程如下：</p><p>1、初始化：模式串的第一位设为匹配位置，文本串从第0位开始匹配。<br>2、在文本串中从当前匹配位置开始，依次比较模式串和文本串的字符：</p><ul><li>如果匹配，则同时向后移动一位。</li><li>如果不匹配，根据next数组，将模式串向右移动一位或多位，再继续比较。</li></ul><p>3、如果匹配成功，返回匹配位置；否则，返回匹配失败。<br>KMP算法中next数组的求解方法是：对于模式串中的每个前缀，求出它的最长公共前后缀长度。最长公共前后缀长度是指，在一个字符串中，既是该字符串的前缀，又是该字符串的后缀，并且不等于该字符串本身的部分的长度。</p><p>KMP算法的时间复杂度为O(n+m)，其中n为文本串的长度，m为模式串的长度。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KMP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNext</span><span class="token punctuation">(</span>String p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> slen <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plen <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> slen <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> plen<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> plen<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-Boyer-Moore"><a href="#3-3-Boyer-Moore" class="headerlink" title="3.3.Boyer-Moore"></a>3.3.Boyer-Moore</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyerMoore</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BoyerMoore</span><span class="token punctuation">(</span>String pat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pat <span class="token operator">=</span> pat<span class="token punctuation">;</span>        <span class="token keyword">int</span> M <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>        right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> R<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>            right<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            right<span class="token punctuation">[</span>pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>String txt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> txt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> M <span class="token operator">=</span> pat<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> skip<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">-</span> M<span class="token punctuation">;</span> i <span class="token operator">+=</span> skip<span class="token punctuation">)</span> <span class="token punctuation">{</span>            skip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> M <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pat<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    skip <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> right<span class="token punctuation">[</span>txt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>skip <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> N<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String txt <span class="token operator">=</span> <span class="token string">"ABAAABCD"</span><span class="token punctuation">;</span>        String pat <span class="token operator">=</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span>        BoyerMoore bm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoyerMoore</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> offset <span class="token operator">=</span> bm<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">==</span> txt<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pattern not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pattern found at index "</span> <span class="token operator">+</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-数学算法"><a href="#4-数学算法" class="headerlink" title="4.数学算法"></a>4.数学算法</h2><h3 id="4-1-欧几里得算法"><a href="#4-1-欧几里得算法" class="headerlink" title="4.1.欧几里得算法"></a>4.1.欧几里得算法</h3><p>欧几里得算法，也称为辗转相除法，是求两个正整数的最大公约数的一种方法。其基本思想是将两个数中较大的数用较小的数去除，然后不断用较小的数去除余数，直到余数为0为止，此时较小的数即为这两个数的最大公约数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-素数筛法"><a href="#4-2-素数筛法" class="headerlink" title="4.2.素数筛法"></a>4.2.素数筛法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sieveOfEratosthenes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>primes<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    primes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    primes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>primes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> primes<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此方法接受一个正整数 n 作为参数，返回一个长度为 n+1 的布尔数组，其中 primes[i] 表示整数 i 是否为素数。</p><p>在算法中，首先初始化所有数为素数。然后，从 2 开始，如果当前数是素数，就将它的倍数都标记为合数。最后返回结果。</p><h3 id="4-3-快速幂算法"><a href="#4-3-快速幂算法" class="headerlink" title="4.3.快速幂算法"></a>4.3.快速幂算法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">*=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a <span class="token operator">*=</span> a<span class="token punctuation">;</span>        b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph Theory Algorithms</title>
      <link href="/2023/02/15/Graph-Theory-Algorithm/"/>
      <url>/2023/02/15/Graph-Theory-Algorithm/</url>
      
        <content type="html"><![CDATA[<p>最短路径算法（Dijkstra算法、Bellman-Ford算法、Floyd算法）<br>Dijkstra算法（Dijkstra’s Algorithm）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PriorityQueue<span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> distances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    distances<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pair<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> pair <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> node <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> distance <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>distances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&lt;</span> distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> newDistance <span class="token operator">=</span> distances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">+</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>distances<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span> <span class="token operator">||</span> newDistance <span class="token operator">&lt;</span> distances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                distances<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> newDistance<span class="token punctuation">)</span><span class="token punctuation">;</span>                visited<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>newDistance<span class="token punctuation">,</span> neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> distances<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Bellman-Ford算法（Bellman-Ford Algorithm）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">bellmanFord</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> distances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    distances<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> node <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>distances<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> newDistance <span class="token operator">=</span> distances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">+</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>distances<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span> <span class="token operator">||</span> newDistance <span class="token operator">&lt;</span> distances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    distances<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> newDistance<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> node <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>distances<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> newDistance <span class="token operator">=</span> distances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">+</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>distances<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span> <span class="token operator">||</span> newDistance <span class="token operator">&lt;</span> distances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Negative cycle detected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> distances<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Floyd算法（Floyd’s Algorithm）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> graph<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> dist<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p>最小生成树算法（Prim算法、Kruskal算法）等<br>Kruskal算法（Kruskal’s Algorithm）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token function">kruskal</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> edges<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> mst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UnionFind uf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span>weight <span class="token operator">-</span> b<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Edge edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> edge<span class="token punctuation">.</span>u<span class="token punctuation">;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uf<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">!=</span> uf<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>            uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> mst<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x</code></pre><p>Prim算法（Prim’s Algorithm）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> <span class="token function">prim</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Edge<span class="token operator">>></span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Edge<span class="token operator">></span> mst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PriorityQueue<span class="token operator">&lt;</span>Edge<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span>weight <span class="token operator">-</span> b<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Edge edge <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> edge<span class="token punctuation">.</span>u<span class="token punctuation">;</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> edge<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> mst<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search Algorithm</title>
      <link href="/2023/02/15/Search-Algorithm/"/>
      <url>/2023/02/15/Search-Algorithm/</url>
      
        <content type="html"><![CDATA[<p>搜索算法的Python实现：</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span>、二分查找算法（Binary Search Algorithm）：<span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    low<span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">elif</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token number">2</span>、广度优先搜索算法（Breadth First Search Algorithm）：<span class="token keyword">from</span> collections <span class="token keyword">import</span> deque<span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    visited <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>        node<span class="token punctuation">,</span> path <span class="token operator">=</span> queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> node <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            path <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span>            <span class="token keyword">if</span> node <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> path            <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> None<span class="token number">3</span>、深度优先搜索算法（Depth First Search Algorithm）：<span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> target<span class="token punctuation">,</span> visited<span class="token operator">=</span>None<span class="token punctuation">,</span> path<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> visited <span class="token keyword">is</span> None<span class="token punctuation">:</span>        visited <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> path <span class="token keyword">is</span> None<span class="token punctuation">:</span>        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>start<span class="token punctuation">)</span>    path <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>        <span class="token keyword">if</span> start <span class="token operator">==</span> target<span class="token punctuation">:</span>        <span class="token keyword">return</span> path        <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> neighbor <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>            new_path <span class="token operator">=</span> dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> neighbor<span class="token punctuation">,</span> target<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> path<span class="token punctuation">)</span>            <span class="token keyword">if</span> new_path<span class="token punctuation">:</span>                <span class="token keyword">return</span> new_path        <span class="token keyword">return</span> None<span class="token number">4</span>、A搜索算法（A Search Algorithm）：<span class="token keyword">from</span> queue <span class="token keyword">import</span> PriorityQueue<span class="token keyword">def</span> <span class="token function">a_star</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> target<span class="token punctuation">,</span> heuristic<span class="token punctuation">)</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> PriorityQueue<span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>    visited <span class="token operator">=</span> <span class="token punctuation">{</span>start<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token operator">not</span> queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cost<span class="token punctuation">,</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> node <span class="token operator">==</span> target<span class="token punctuation">:</span>            path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> node <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>                node <span class="token operator">=</span> visited<span class="token punctuation">[</span>node<span class="token punctuation">]</span>            <span class="token keyword">return</span> path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> neighbor<span class="token punctuation">,</span> weight <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_cost <span class="token operator">=</span> cost <span class="token operator">+</span> weight            <span class="token keyword">if</span> neighbor <span class="token operator">not</span> <span class="token keyword">in</span> visited <span class="token operator">or</span> new_cost <span class="token operator">&lt;</span> visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span><span class="token punctuation">:</span>                visited<span class="token punctuation">[</span>neighbor<span class="token punctuation">]</span> <span class="token operator">=</span> new_cost                priority <span class="token operator">=</span> new_cost <span class="token operator">+</span> heuristic<span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> target<span class="token punctuation">)</span>                queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">(</span>priority<span class="token punctuation">,</span> neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> None</code></pre><p>以下是JAVA实现：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、二分查找算法（Binary Search Algorithm）：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">2</span>、广度优先搜索算法（Breadth First Search Algorithm）：<span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">bfs</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Queue<span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>>></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pair<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> pair <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> node <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> path<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> newPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>neighbor<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">3</span>、深度优先搜索算法（Depth First Search Algorithm）：<span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">dfs</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> visited<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>visited <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> newPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> neighbor<span class="token punctuation">,</span> target<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">4</span>、A搜索算法（A Search Algorithm）：<span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">aStar</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> heuristic<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PriorityQueue<span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    visited<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> gScores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gScores<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Pair<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> pair <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> node <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cost <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> visited<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> path<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> neighbor <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> gScore <span class="token operator">=</span> gScores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">+</span> graph<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>g</code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法汇总</title>
      <link href="/2021/11/20/Algorithm/"/>
      <url>/2021/11/20/Algorithm/</url>
      
        <content type="html"><![CDATA[<p>排序算法：冒泡排序、选择排序、插入排序、快速排序、归并排序、堆排序等。</p><p>搜索算法：线性搜索、二分搜索、广度优先搜索、深度优先搜索等。</p><p>图论算法：最短路径算法（Dijkstra算法、Bellman-Ford算法、Floyd算法）、最小生成树算法（Prim算法、Kruskal算法）等。</p><p>动态规划算法：背包问题、最长公共子序列、最长上升子序列等。</p><p>贪心算法：背包问题、活动安排问题、霍夫曼编码等。</p><p>字符串匹配算法：朴素算法、KMP算法、Boyer-Moore算法等。</p><p>数学算法：欧几里得算法（求最大公约数）、素数筛法、快速幂算法等。</p><p>机器学习算法：线性回归、逻辑回归、决策树、支持向量机、神经网络等。</p><p>排序算法：<br>冒泡排序：</p><pre class=" language-python"><code class="language-python">Python版<span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历 n-1 轮，每轮将一个最大的元素移动到末尾</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在每轮遍历中，比较相邻的两个元素，如果前一个元素大于后一个元素，就交换它们</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> arrJAVA版public static void bubbleSort<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token operator">//</span> 遍历 n<span class="token number">-1</span> 轮，每轮将一个最大的元素移动到末尾    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">//</span> 在每轮遍历中，比较相邻的两个元素，如果前一个元素大于后一个元素，就交换它们        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                int temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>选择排序：</p><pre class=" language-python"><code class="language-python">Python版<span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历 n-1 轮，每轮选出一个最小元素</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 从未排序部分选出最小元素的下标</span>        min_idx <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min_idx<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_idx <span class="token operator">=</span> j        <span class="token comment" spellcheck="true"># 将最小元素交换到已排序部分的末尾</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min_idx<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> arrJAVA版public static void selectionSort<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token operator">//</span> 遍历 n<span class="token number">-1</span> 轮，每轮选出一个最小元素    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">//</span> 从未排序部分选出最小元素的下标        int minIdx <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                minIdx <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">//</span> 将最小元素交换到已排序部分的末尾        int temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>插入排序：</p><pre class=" language-python"><code class="language-python">Python版<span class="token keyword">def</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从第二个元素开始遍历</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将当前元素插入到已排序部分的正确位置</span>        key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">:</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key    <span class="token keyword">return</span> arrJAVA版public static void insertionSort<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token operator">//</span> 从第二个元素开始遍历    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">//</span> 将当前元素插入到已排序部分的正确位置        int key <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        int j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>快速排序：</p><pre class=" language-python"><code class="language-python">Python版<span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> arr    <span class="token keyword">else</span><span class="token punctuation">:</span>        pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 选择第一个元素作为基准值</span>        left <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> pivot<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 左子数组</span>        right <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">>=</span> pivot<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 右子数组</span>        <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span>JAVA版public static void quickSort<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> int left<span class="token punctuation">,</span> int right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    int pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">//</span> 选择左端点作为基准值    int i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">//</span> 从右端点向左扫描，找到第一个小于基准值的元素        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            j<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">//</span> 从左端点向右扫描，找到第一个大于基准值的元素        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>  <span class="token operator">//</span> 将基准值放入正确位置    quickSort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">//</span> 递归排序左子数组    quickSort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">//</span> 递归排序右子数组<span class="token punctuation">}</span></code></pre><p>归并排序：</p><pre class=" language-python"><code class="language-python">Python版<span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> arr    <span class="token keyword">else</span><span class="token punctuation">:</span>        mid <span class="token operator">=</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>        right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>    res <span class="token operator">+=</span> left<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span>    res <span class="token operator">+=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> resJAVA版public static void mergeSort<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> int left<span class="token punctuation">,</span> int right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    int mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    mergeSort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    mergeSort<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    merge<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public static void merge<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> int left<span class="token punctuation">,</span> int mid<span class="token punctuation">,</span> int right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int<span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> new int<span class="token punctuation">[</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    int i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;</span><span class="token operator">&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> left<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>堆排序：</p><pre class=" language-python"><code class="language-python">Python版<span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    build_heap<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">build_heap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    largest <span class="token operator">=</span> i    left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span>    right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span>    <span class="token keyword">if</span> left <span class="token operator">&lt;</span> n <span class="token operator">and</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>        largest <span class="token operator">=</span> left    <span class="token keyword">if</span> right <span class="token operator">&lt;</span> n <span class="token operator">and</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>        largest <span class="token operator">=</span> right    <span class="token keyword">if</span> largest <span class="token operator">!=</span> i<span class="token punctuation">:</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>JAVA版public static void heapSort<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    buildHeap<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        swap<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>public static void buildHeap<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>public static void heapify<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> int n<span class="token punctuation">,</span> int i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int largest <span class="token operator">=</span> i<span class="token punctuation">;</span>    int left <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    int right <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n <span class="token operator">&amp;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        largest <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        largest <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        swap<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>public static void swap<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> int i<span class="token punctuation">,</span> int j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My_CSDN</title>
      <link href="/2021/11/20/My-CSDN/"/>
      <url>/2021/11/20/My-CSDN/</url>
      
        <content type="html"><![CDATA[<p>Welcome to check my CSDN account, Something about JAVA are all in it.My account is <strong>“Prophet_Kin”</strong></p><p>例如：<br>Java自定义异常类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoRegisterException</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> usernames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span>， “李四”， “王五”<span class="token punctuation">}</span>；        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RegisterException<span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> RegisterException<span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String name<span class="token operator">:</span> usernames<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token keyword">throws</span> <span class="token keyword">new</span> <span class="token class-name">RegisterException</span><span class="token punctuation">(</span><span class="token string">"该用户名已被注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>RegisterException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注册成功！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RegisterException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>The course about Cyber Security：</p><p>Lesson One：cyber security course for beginner:[1] <a href="https://www.youtube.com/watch?v=U_P23SqJaDc">https://www.youtube.com/watch?v=U_P23SqJaDc</a></p><p>Lesson Two: Computer Networking Course - Network Engineering:[2] <a href="https://www.youtube.com/watch?v=qiQR5rTSshw">https://www.youtube.com/watch?v=qiQR5rTSshw</a></p><p>Lesson Three: Certified Ethical Hacking:[3] <a href="https://www.youtube.com/watch?v=CZePtb2Z3r4">https://www.youtube.com/watch?v=CZePtb2Z3r4</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
